
;; Function virtual leveldb::Status leveldb::EnvWrapper::DeleteFile(const string&) (_ZN7leveldb10EnvWrapper10DeleteFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, funcdef_no=2138, decl_uid=44255, cgraph_uid=762, symbol_order=774)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 23 count 16 (    1)


virtual leveldb::Status leveldb::EnvWrapper::DeleteFile(const string&)

Dataflow summary:
def_info->table_size = 785, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 3 [bx] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={17d,16u} r1={5d,3u} r2={12d,12u} r3={3d,5u} r4={14d,21u,8e} r5={8d,4u} r7={5d,27u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={16d,9u} r18={4d} r19={4d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 459{354d,97u,8e} in 61{57 regular + 4 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]

( 0 )->[2]->( 3 14 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]

( 2 )->[3]->( 4 11 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 2 [cx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]

( 3 )->[4]->( 5 14 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 2 [cx] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 2 [cx] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]

( 4 )->[5]->( 6 11 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 2 [cx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]

( 5 )->[6]->( 7 14 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 2 [cx] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 2 [cx] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]

( 6 )->[7]->( 8 11 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 2 [cx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]

( 7 )->[8]->( 9 14 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 2 [cx] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 2 [cx] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]

( 8 )->[9]->( 10 11 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 2 [cx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]

( 9 )->[10]->( 12 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 3 9 5 7 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 10 11 14 )->[12]->( 13 15 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 5 [di]
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 12 )->[13]->( 1 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 7 [sp] 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 7 [sp]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

( 2 4 6 8 )->[14]->( 12 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 12 )->[15]->( )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 13 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 16 to worklist
  Adding insn 7 to worklist
  Adding insn 179 to worklist
  Adding insn 24 to worklist
  Adding insn 32 to worklist
  Adding insn 40 to worklist
  Adding insn 48 to worklist
  Adding insn 56 to worklist
  Adding insn 64 to worklist
  Adding insn 72 to worklist
  Adding insn 213 to worklist
  Adding insn 80 to worklist
  Adding insn 136 to worklist
  Adding insn 154 to worklist
  Adding insn 153 to worklist
  Adding insn 187 to worklist
  Adding insn 158 to worklist
  Adding insn 216 to worklist
  Adding insn 144 to worklist
  Adding insn 155 to worklist
Finished finding needed instructions:
processing block 13 lr out =  0 [ax] 3 [bx] 7 [sp]
  Adding insn 186 to worklist
  Adding insn 185 to worklist
processing block 15 lr out =  7 [sp]
processing block 12 lr out =  0 [ax] 7 [sp]
  Adding insn 151 to worklist
processing block 10 lr out =  3 [bx] 7 [sp]
  Adding insn 75 to worklist
  Adding insn 74 to worklist
processing block 11 lr out =  3 [bx] 7 [sp]
  Adding insn 135 to worklist
processing block 9 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
  Adding insn 71 to worklist
  Adding insn 68 to worklist
  Adding insn 67 to worklist
  Adding insn 66 to worklist
processing block 14 lr out =  3 [bx] 7 [sp]
  Adding insn 143 to worklist
processing block 8 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
  Adding insn 63 to worklist
  Adding insn 60 to worklist
  Adding insn 59 to worklist
  Adding insn 58 to worklist
processing block 7 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
  Adding insn 55 to worklist
  Adding insn 52 to worklist
  Adding insn 51 to worklist
  Adding insn 50 to worklist
processing block 6 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
  Adding insn 47 to worklist
  Adding insn 44 to worklist
  Adding insn 43 to worklist
  Adding insn 42 to worklist
processing block 5 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
  Adding insn 39 to worklist
  Adding insn 36 to worklist
  Adding insn 35 to worklist
  Adding insn 34 to worklist
processing block 4 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
  Adding insn 31 to worklist
  Adding insn 28 to worklist
  Adding insn 27 to worklist
  Adding insn 26 to worklist
processing block 3 lr out =  0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
  Adding insn 23 to worklist
  Adding insn 20 to worklist
  Adding insn 19 to worklist
  Adding insn 18 to worklist
processing block 2 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
  Adding insn 15 to worklist
  Adding insn 12 to worklist
  Adding insn 11 to worklist
  Adding insn 10 to worklist
  Adding insn 2 to worklist
  Adding insn 180 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 23 count 16 (    1)
;;   ======================================================
;;   -- basic block 2 from 179 to 16 -- after reload
;;   ======================================================

;;	  0--> b  0: i 179 [--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i   2 bx=di                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 180 {sp=sp-0x10;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  2--> b  0: i  10 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i   7 {[sp+0x8]=unspec[0x28] 79;ax=0;clobber flags;}:athlon-vector,athlon-ieu,athlon-ieu
;;	  5--> b  0: i  11 ax=[si]                                 :athlon-direct,athlon-load
;;	  8--> b  0: i  12 cx=[ax+0x38]                            :athlon-direct,athlon-load
;;	  8--> b  0: i  15 flags=cmp(cx,[const(unspec[`_ZN7leveldb10EnvWrapper10DeleteFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'] 2)]):athlon-direct,athlon-load,athlon-ieu
;;	 12--> b  0: i  16 pc={(flags!=0)?L139:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 12
;;   new head = 179
;;   new tail = 16

;;   ======================================================
;;   -- basic block 3 from 18 to 24 -- after reload
;;   ======================================================

;;	  0--> b  0: i  18 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  19 ax=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  20 ax=[ax+0x38]                            :athlon-direct,athlon-load
;;	  9--> b  0: i  23 flags=cmp(ax,cx)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i  24 pc={(flags!=0)?L131:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 18
;;   new tail = 24

;;   ======================================================
;;   -- basic block 4 from 26 to 32 -- after reload
;;   ======================================================

;;	  0--> b  0: i  26 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  27 cx=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  28 cx=[cx+0x38]                            :athlon-direct,athlon-load
;;	  9--> b  0: i  31 flags=cmp(cx,ax)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i  32 pc={(flags!=0)?L139:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 26
;;   new tail = 32

;;   ======================================================
;;   -- basic block 5 from 34 to 40 -- after reload
;;   ======================================================

;;	  0--> b  0: i  34 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  35 ax=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  36 ax=[ax+0x38]                            :athlon-direct,athlon-load
;;	  9--> b  0: i  39 flags=cmp(ax,cx)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i  40 pc={(flags!=0)?L131:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 34
;;   new tail = 40

;;   ======================================================
;;   -- basic block 6 from 42 to 48 -- after reload
;;   ======================================================

;;	  0--> b  0: i  42 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  43 cx=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  44 cx=[cx+0x38]                            :athlon-direct,athlon-load
;;	  9--> b  0: i  47 flags=cmp(cx,ax)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i  48 pc={(flags!=0)?L139:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 42
;;   new tail = 48

;;   ======================================================
;;   -- basic block 7 from 50 to 56 -- after reload
;;   ======================================================

;;	  0--> b  0: i  50 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  51 ax=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  52 ax=[ax+0x38]                            :athlon-direct,athlon-load
;;	  9--> b  0: i  55 flags=cmp(ax,cx)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i  56 pc={(flags!=0)?L131:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 50
;;   new tail = 56

;;   ======================================================
;;   -- basic block 8 from 58 to 64 -- after reload
;;   ======================================================

;;	  0--> b  0: i  58 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  59 cx=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  60 cx=[cx+0x38]                            :athlon-direct,athlon-load
;;	  9--> b  0: i  63 flags=cmp(cx,ax)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i  64 pc={(flags!=0)?L139:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 58
;;   new tail = 64

;;   ======================================================
;;   -- basic block 9 from 66 to 72 -- after reload
;;   ======================================================

;;	  0--> b  0: i  66 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  67 ax=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  68 ax=[ax+0x38]                            :athlon-direct,athlon-load
;;	  9--> b  0: i  71 flags=cmp(ax,cx)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i  72 pc={(flags!=0)?L131:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 66
;;   new tail = 72

;;   ======================================================
;;   -- basic block 10 from 74 to 213 -- after reload
;;   ======================================================

;;	  0--> b  0: i  74 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  75 ax=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  80 call [[ax+0x38]]                        :athlon-vector,athlon-ieu
;;	  7--> b  0: i 213 pc=L149                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 74
;;   new tail = 213

;;   ======================================================
;;   -- basic block 11 from 135 to 136 -- after reload
;;   ======================================================

;;	  0--> b  0: i 135 di=bx                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 136 call [ax]                               :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 135
;;   new tail = 136

;;   ======================================================
;;   -- basic block 12 from 151 to 154 -- after reload
;;   ======================================================

;;	  0--> b  0: i 153 {flags=unspec[[sp+0x8],0x28] 80;clobber di;}:athlon-vector,athlon-ieu,athlon-ieu
;;	  1--> b  0: i 151 ax=bx                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 154 pc={(flags!=0)?L215:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 153
;;   new tail = 154

;;   ======================================================
;;   -- basic block 13 from 158 to 187 -- after reload
;;   ======================================================

;;	  0--> b  0: i 185 {sp=sp+0x10;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i 158 use ax                                  :nothing
;;	  1--> b  0: i 186 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i 187 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 218
;;   new tail = 187

;;   ======================================================
;;   -- basic block 14 from 143 to 216 -- after reload
;;   ======================================================

;;	  0--> b  0: i 143 di=bx                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 144 call [cx]                               :athlon-vector,athlon-ieu
;;	  2--> b  0: i 216 pc=L149                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 143
;;   new tail = 216

;;   ======================================================
;;   -- basic block 15 from 155 to 155 -- after reload
;;   ======================================================

;;	  0--> b  0: i 155 call [`__stack_chk_fail']               :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 155
;;   new tail = 155



starting the processing of deferred insns
ending the processing of deferred insns


virtual leveldb::Status leveldb::EnvWrapper::DeleteFile(const string&)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 3 [bx] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={17d,16u} r1={5d,3u} r2={12d,12u} r3={3d,5u} r4={14d,21u,8e} r5={8d,4u} r7={5d,27u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={16d,9u} r18={4d} r19={4d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 459{354d,97u,8e} in 61{57 regular + 4 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 17 [flags]
;; live  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 4 [si] 7 [sp] 17 [flags]
;; live  kill	 17 [flags]
(note 8 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 8 13 2 NOTE_INSN_FUNCTION_BEG)
(note 13 5 179 2 NOTE_INSN_DELETED)
(insn/f:TI 179 13 2 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) ./include/leveldb/env.h:296 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn 2 179 180 2 (set (reg/f:DI 3 bx [orig:122 <retval> ] [122])
        (reg:DI 5 di [ .result_ptr ])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn/f:TI 180 2 181 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) ./include/leveldb/env.h:296 970 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -16 [0xfffffffffffffff0])))
            (nil))))
(note 181 180 10 2 NOTE_INSN_PROLOGUE_END)
(insn 10 181 7 2 (set (reg/f:DI 4 si [orig:87 D.51288 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:123 this ] [123])
                (const_int 8 [0x8])) [3 this_2(D)->target_+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 7 10 11 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                        (const_int 8 [0x8])) [3 D.51292+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [154])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) ./include/leveldb/env.h:296 986 {stack_tls_protect_set_di}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:DI 0 ax [154])
            (nil))))
(insn:TI 11 7 12 2 (set (reg/f:DI 0 ax [orig:126 _3->_vptr.Env ] [126])
        (mem/f:DI (reg/f:DI 4 si [orig:87 D.51288 ] [87]) [3 _3->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:87 D.51288 ] [87]) [3 _3->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 12 11 15 2 (set (reg/f:DI 2 cx [orig:89 D.51290 ] [89])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:126 _3->_vptr.Env ] [126])
                (const_int 56 [0x38])) [3 MEM[(int (*__vtbl_ptr_type) () *)_4 + 56B]+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:126 _3->_vptr.Env ] [126])
        (nil)))
(insn 15 12 16 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 2 cx [orig:89 D.51290 ] [89])
            (mem/u/c:DI (const:DI (unspec:DI [
                            (symbol_ref/i:DI ("_ZN7leveldb10EnvWrapper10DeleteFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE") [flags 0x1]  <function_decl 0x7f0d12352000 DeleteFile>)
                        ] UNSPEC_GOTPCREL)) [18  S8 A8]))) 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 16 15 17 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 139)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2000 (nil)))
 -> 139)
;;  succ:       3 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              14 [20.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 8000, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 2 [cx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
(note 17 16 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 18 17 19 3 (set (reg/f:DI 4 si [orig:91 D.51288 ] [91])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:87 D.51288 ] [87])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_3].target_+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 19 18 20 3 (set (reg/f:DI 0 ax [orig:129 _11->_vptr.Env ] [129])
        (mem/f:DI (reg/f:DI 4 si [orig:91 D.51288 ] [91]) [3 _11->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:91 D.51288 ] [91]) [3 _11->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 20 19 23 3 (set (reg/f:DI 0 ax [orig:93 D.51290 ] [93])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:129 _11->_vptr.Env ] [129])
                (const_int 56 [0x38])) [3 MEM[(int (*__vtbl_ptr_type) () *)_12 + 56B]+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 23 20 24 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:93 D.51290 ] [93])
            (reg/f:DI 2 cx [orig:89 D.51290 ] [89]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:89 D.51290 ] [89])
        (nil)))
(jump_insn:TI 24 23 25 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 131)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2000 (nil)))
 -> 131)
;;  succ:       4 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              11 [20.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 6400, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 2 [cx] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 2 [cx] 4 [si] 17 [flags]
;; live  kill	
(note 25 24 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn:TI 26 25 27 4 (set (reg/f:DI 4 si [orig:95 D.51288 ] [95])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:91 D.51288 ] [91])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_11].target_+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 27 26 28 4 (set (reg/f:DI 2 cx [orig:132 _16->_vptr.Env ] [132])
        (mem/f:DI (reg/f:DI 4 si [orig:95 D.51288 ] [95]) [3 _16->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:95 D.51288 ] [95]) [3 _16->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 28 27 31 4 (set (reg/f:DI 2 cx [orig:97 D.51290 ] [97])
        (mem/f:DI (plus:DI (reg/f:DI 2 cx [orig:132 _16->_vptr.Env ] [132])
                (const_int 56 [0x38])) [3 MEM[(int (*__vtbl_ptr_type) () *)_17 + 56B]+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 31 28 32 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 2 cx [orig:97 D.51290 ] [97])
            (reg/f:DI 0 ax [orig:93 D.51290 ] [93]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:93 D.51290 ] [93])
        (nil)))
(jump_insn:TI 32 31 33 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 139)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2000 (nil)))
 -> 139)
;;  succ:       5 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              14 [20.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 5120, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 2 [cx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
(note 33 32 34 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn:TI 34 33 35 5 (set (reg/f:DI 4 si [orig:99 D.51288 ] [99])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:95 D.51288 ] [95])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_16].target_+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 35 34 36 5 (set (reg/f:DI 0 ax [orig:135 _21->_vptr.Env ] [135])
        (mem/f:DI (reg/f:DI 4 si [orig:99 D.51288 ] [99]) [3 _21->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:99 D.51288 ] [99]) [3 _21->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 36 35 39 5 (set (reg/f:DI 0 ax [orig:101 D.51290 ] [101])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:135 _21->_vptr.Env ] [135])
                (const_int 56 [0x38])) [3 MEM[(int (*__vtbl_ptr_type) () *)_22 + 56B]+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 39 36 40 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:101 D.51290 ] [101])
            (reg/f:DI 2 cx [orig:97 D.51290 ] [97]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:97 D.51290 ] [97])
        (nil)))
(jump_insn:TI 40 39 41 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 131)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2000 (nil)))
 -> 131)
;;  succ:       6 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              11 [20.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 4096, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       5 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 2 [cx] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 2 [cx] 4 [si] 17 [flags]
;; live  kill	
(note 41 40 42 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 42 41 43 6 (set (reg/f:DI 4 si [orig:103 D.51288 ] [103])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:99 D.51288 ] [99])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_21].target_+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 43 42 44 6 (set (reg/f:DI 2 cx [orig:138 _26->_vptr.Env ] [138])
        (mem/f:DI (reg/f:DI 4 si [orig:103 D.51288 ] [103]) [3 _26->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:103 D.51288 ] [103]) [3 _26->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 44 43 47 6 (set (reg/f:DI 2 cx [orig:105 D.51290 ] [105])
        (mem/f:DI (plus:DI (reg/f:DI 2 cx [orig:138 _26->_vptr.Env ] [138])
                (const_int 56 [0x38])) [3 MEM[(int (*__vtbl_ptr_type) () *)_27 + 56B]+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 47 44 48 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 2 cx [orig:105 D.51290 ] [105])
            (reg/f:DI 0 ax [orig:101 D.51290 ] [101]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:101 D.51290 ] [101])
        (nil)))
(jump_insn:TI 48 47 49 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 139)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1990 (nil)))
 -> 139)
;;  succ:       7 [80.1%]  (FALLTHRU,CAN_FALLTHRU)
;;              14 [19.9%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]

;; basic block 7, loop depth 0, count 0, freq 3281, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       6 [80.1%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 2 [cx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
(note 49 48 50 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn:TI 50 49 51 7 (set (reg/f:DI 4 si [orig:107 D.51288 ] [107])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:103 D.51288 ] [103])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_26].target_+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 51 50 52 7 (set (reg/f:DI 0 ax [orig:141 _31->_vptr.Env ] [141])
        (mem/f:DI (reg/f:DI 4 si [orig:107 D.51288 ] [107]) [3 _31->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:107 D.51288 ] [107]) [3 _31->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 52 51 55 7 (set (reg/f:DI 0 ax [orig:109 D.51290 ] [109])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:141 _31->_vptr.Env ] [141])
                (const_int 56 [0x38])) [3 MEM[(int (*__vtbl_ptr_type) () *)_32 + 56B]+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 55 52 56 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:109 D.51290 ] [109])
            (reg/f:DI 2 cx [orig:105 D.51290 ] [105]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:105 D.51290 ] [105])
        (nil)))
(jump_insn:TI 56 55 57 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 131)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1990 (nil)))
 -> 131)
;;  succ:       8 [80.1%]  (FALLTHRU,CAN_FALLTHRU)
;;              11 [19.9%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]

;; basic block 8, loop depth 0, count 0, freq 2628, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       7 [80.1%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 2 [cx] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 2 [cx] 4 [si] 17 [flags]
;; live  kill	
(note 57 56 58 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn:TI 58 57 59 8 (set (reg/f:DI 4 si [orig:111 D.51288 ] [111])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:107 D.51288 ] [107])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_31].target_+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 59 58 60 8 (set (reg/f:DI 2 cx [orig:144 _36->_vptr.Env ] [144])
        (mem/f:DI (reg/f:DI 4 si [orig:111 D.51288 ] [111]) [3 _36->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:111 D.51288 ] [111]) [3 _36->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 60 59 63 8 (set (reg/f:DI 2 cx [orig:113 D.51290 ] [113])
        (mem/f:DI (plus:DI (reg/f:DI 2 cx [orig:144 _36->_vptr.Env ] [144])
                (const_int 56 [0x38])) [3 MEM[(int (*__vtbl_ptr_type) () *)_37 + 56B]+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 63 60 64 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 2 cx [orig:113 D.51290 ] [113])
            (reg/f:DI 0 ax [orig:109 D.51290 ] [109]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:109 D.51290 ] [109])
        (nil)))
(jump_insn:TI 64 63 65 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 139)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2000 (nil)))
 -> 139)
;;  succ:       9 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              14 [20.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]

;; basic block 9, loop depth 0, count 0, freq 2102, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 2 [cx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
(note 65 64 66 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn:TI 66 65 67 9 (set (reg/f:DI 4 si [orig:115 D.51288 ] [115])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:111 D.51288 ] [111])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_36].target_+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 67 66 68 9 (set (reg/f:DI 0 ax [orig:147 _41->_vptr.Env ] [147])
        (mem/f:DI (reg/f:DI 4 si [orig:115 D.51288 ] [115]) [3 _41->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:115 D.51288 ] [115]) [3 _41->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 68 67 71 9 (set (reg/f:DI 0 ax [orig:117 D.51290 ] [117])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:147 _41->_vptr.Env ] [147])
                (const_int 56 [0x38])) [3 MEM[(int (*__vtbl_ptr_type) () *)_42 + 56B]+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 71 68 72 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:117 D.51290 ] [117])
            (reg/f:DI 2 cx [orig:113 D.51290 ] [113]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:113 D.51290 ] [113])
        (nil)))
(jump_insn:TI 72 71 73 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 131)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1980 (nil)))
 -> 131)
;;  succ:       10 [80.2%]  (FALLTHRU,CAN_FALLTHRU)
;;              11 [19.8%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]

;; basic block 10, loop depth 0, count 0, freq 1686, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [80.2%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 4 [si]
;; live  kill	
(note 73 72 76 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(note 76 73 74 10 NOTE_INSN_DELETED)
(insn:TI 74 76 75 10 (set (reg/f:DI 4 si [orig:119 D.51288 ] [119])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:115 D.51288 ] [115])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_41].target_+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 75 74 80 10 (set (reg/f:DI 0 ax [orig:150 _46->_vptr.Env ] [150])
        (mem/f:DI (reg/f:DI 4 si [orig:119 D.51288 ] [119]) [3 _46->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(call_insn:TI 80 75 213 10 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:150 _46->_vptr.Env ] [150])
                    (const_int 56 [0x38])) [3 MEM[(int (*__vtbl_ptr_type) () *)_47 + 56B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_48;(struct Env)_46->7) S1 A8])
        (const_int 0 [0])) ./include/leveldb/env.h:296 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:150 _46->_vptr.Env ] [150])
                    (expr_list:REG_CALL_DECL (nil)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn:TI 213 80 214 10 (set (pc)
        (label_ref 149)) 654 {jump}
     (nil)
 -> 149)
;;  succ:       12 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 214 213 131)
;; basic block 11, loop depth 0, count 0, freq 3693, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [20.0%]  (CAN_FALLTHRU)
;;              9 [19.8%]  (CAN_FALLTHRU)
;;              5 [20.0%]  (CAN_FALLTHRU)
;;              7 [19.9%]  (CAN_FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 131 214 132 11 3 "" [4 uses])
(note 132 131 135 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn:TI 135 132 136 11 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:122 <retval> ] [122])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(call_insn:TI 136 135 149 11 (call (mem:QI (reg/f:DI 0 ax [orig:93 D.51290 ] [93]) [0  S1 A8])
        (const_int 0 [0])) ./include/leveldb/env.h:296 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:93 D.51290 ] [93])
                    (expr_list:REG_CALL_DECL (nil)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       12 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 12, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [100.0%]  (CAN_FALLTHRU)
;;              11 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              14 [100.0%]  (CAN_FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 5 [di]
(code_label 149 136 159 12 1 "" [2 uses])
(note 159 149 153 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn:TI 153 159 151 12 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                                (const_int 8 [0x8])) [3 D.51292+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 5 di [155]))
        ]) ./include/leveldb/env.h:296 990 {stack_tls_protect_test_di}
     (expr_list:REG_UNUSED (reg:DI 5 di [155])
        (nil)))
(insn:TI 151 153 154 12 (set (reg/i:DI 0 ax)
        (reg/f:DI 3 bx [orig:122 <retval> ] [122])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:122 <retval> ] [122])
        (nil)))
(jump_insn:TI 154 151 161 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 215)
            (pc))) ./include/leveldb/env.h:296 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 215)
;;  succ:       13 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              15 [0.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 13, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, RTL)
;;  pred:       12 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 7 [sp] 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 7 [sp]
;; live  kill	 17 [flags]
(note 161 154 218 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(note 218 161 185 13 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 185 218 158 13 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) ./include/leveldb/env.h:296 970 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (nil))))
(insn 158 185 186 13 (use (reg/i:DI 0 ax)) ./include/leveldb/env.h:296 -1
     (nil))
(insn/f:TI 186 158 187 13 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) ./include/leveldb/env.h:296 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 187 186 188 13 (simple_return) ./include/leveldb/env.h:296 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

(barrier 188 187 139)
;; basic block 14, loop depth 0, count 0, freq 4621, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [20.0%]  (CAN_FALLTHRU)
;;              4 [20.0%]  (CAN_FALLTHRU)
;;              6 [19.9%]  (CAN_FALLTHRU)
;;              8 [20.0%]  (CAN_FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 139 188 140 14 2 "" [4 uses])
(note 140 139 143 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn:TI 143 140 144 14 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:122 <retval> ] [122])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(call_insn:TI 144 143 216 14 (call (mem:QI (reg/f:DI 2 cx [orig:89 D.51290 ] [89]) [0  S1 A8])
        (const_int 0 [0])) ./include/leveldb/env.h:296 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:89 D.51290 ] [89])
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_CALL_DECL (nil)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(jump_insn:TI 216 144 217 14 (set (pc)
        (label_ref 149)) ./include/leveldb/env.h:296 654 {jump}
     (nil)
 -> 149)
;;  succ:       12 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 217 216 215)
;; basic block 15, loop depth 0, count 0, freq 4
;;  prev block 14, next block 1, flags: (REACHABLE, RTL)
;;  pred:       12 [0.0%]  (CAN_FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 215 217 160 15 14 "" [1 uses])
(note 160 215 155 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 155 160 156 15 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f0d119c66c0 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) ./include/leveldb/env.h:296 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f0d119c66c0 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 156 155 178)
(note 178 156 0 NOTE_INSN_DELETED)

;; Function virtual leveldb::Status leveldb::EnvWrapper::NewWritableFile(const string&, leveldb::WritableFile**) (_ZN7leveldb10EnvWrapper15NewWritableFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPPNS_12WritableFileE, funcdef_no=2135, decl_uid=44245, cgraph_uid=759, symbol_order=771)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 23 count 16 (    1)


virtual leveldb::Status leveldb::EnvWrapper::NewWritableFile(const string&, leveldb::WritableFile**)

Dataflow summary:
def_info->table_size = 785, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 3 [bx] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={17d,16u} r1={5d,3u} r2={5d,3u} r3={4d,6u} r4={14d,21u,8e} r5={11d,7u} r7={5d,27u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={16d,9u} r18={4d} r19={4d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={9d,9u} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 464{355d,101u,8e} in 62{58 regular + 4 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]

( 0 )->[2]->( 3 14 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 17 [flags] 37 [r8]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

( 2 )->[3]->( 4 11 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]

( 3 )->[4]->( 5 14 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 4 [si] 5 [di] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 4 [si] 5 [di] 17 [flags] 37 [r8]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

( 4 )->[5]->( 6 11 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]

( 5 )->[6]->( 7 14 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 4 [si] 5 [di] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 4 [si] 5 [di] 17 [flags] 37 [r8]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

( 6 )->[7]->( 8 11 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]

( 7 )->[8]->( 9 14 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 4 [si] 5 [di] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 4 [si] 5 [di] 17 [flags] 37 [r8]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

( 8 )->[9]->( 10 11 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]

( 9 )->[10]->( 12 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 3 9 5 7 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 10 11 14 )->[12]->( 13 15 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 3 [bx]
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 12 )->[13]->( 1 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 7 [sp] 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 7 [sp]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

( 2 4 6 8 )->[14]->( 12 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 12 )->[15]->( )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 13 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 17 to worklist
  Adding insn 8 to worklist
  Adding insn 189 to worklist
  Adding insn 25 to worklist
  Adding insn 33 to worklist
  Adding insn 41 to worklist
  Adding insn 49 to worklist
  Adding insn 57 to worklist
  Adding insn 65 to worklist
  Adding insn 73 to worklist
  Adding insn 221 to worklist
  Adding insn 82 to worklist
  Adding insn 145 to worklist
  Adding insn 164 to worklist
  Adding insn 163 to worklist
  Adding insn 197 to worklist
  Adding insn 168 to worklist
  Adding insn 224 to worklist
  Adding insn 154 to worklist
  Adding insn 165 to worklist
Finished finding needed instructions:
processing block 13 lr out =  0 [ax] 3 [bx] 7 [sp]
  Adding insn 196 to worklist
  Adding insn 195 to worklist
processing block 15 lr out =  7 [sp]
processing block 12 lr out =  0 [ax] 7 [sp]
  Adding insn 161 to worklist
processing block 10 lr out =  3 [bx] 7 [sp]
  Adding insn 81 to worklist
  Adding insn 76 to worklist
  Adding insn 75 to worklist
processing block 11 lr out =  3 [bx] 7 [sp]
  Adding insn 144 to worklist
processing block 9 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
  Adding insn 72 to worklist
  Adding insn 69 to worklist
  Adding insn 68 to worklist
  Adding insn 67 to worklist
processing block 14 lr out =  3 [bx] 7 [sp]
  Adding insn 153 to worklist
processing block 8 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
  Adding insn 64 to worklist
  Adding insn 61 to worklist
  Adding insn 60 to worklist
  Adding insn 59 to worklist
processing block 7 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
  Adding insn 56 to worklist
  Adding insn 53 to worklist
  Adding insn 52 to worklist
  Adding insn 51 to worklist
processing block 6 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
  Adding insn 48 to worklist
  Adding insn 45 to worklist
  Adding insn 44 to worklist
  Adding insn 43 to worklist
processing block 5 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
  Adding insn 40 to worklist
  Adding insn 37 to worklist
  Adding insn 36 to worklist
  Adding insn 35 to worklist
processing block 4 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
  Adding insn 32 to worklist
  Adding insn 29 to worklist
  Adding insn 28 to worklist
  Adding insn 27 to worklist
processing block 3 lr out =  0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
  Adding insn 24 to worklist
  Adding insn 21 to worklist
  Adding insn 20 to worklist
  Adding insn 19 to worklist
processing block 2 lr out =  1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
  Adding insn 16 to worklist
  Adding insn 13 to worklist
  Adding insn 12 to worklist
  Adding insn 11 to worklist
  Adding insn 2 to worklist
  Adding insn 190 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 23 count 16 (    1)
;;   ======================================================
;;   -- basic block 2 from 189 to 17 -- after reload
;;   ======================================================

;;	  0--> b  0: i 189 [--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i   2 bx=di                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 190 {sp=sp-0x10;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  2--> b  0: i  11 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i   8 {[sp+0x8]=unspec[0x28] 79;ax=0;clobber flags;}:athlon-vector,athlon-ieu,athlon-ieu
;;	  5--> b  0: i  12 ax=[si]                                 :athlon-direct,athlon-load
;;	  8--> b  0: i  13 r8=[ax+0x20]                            :athlon-direct,athlon-load
;;	  8--> b  0: i  16 flags=cmp(r8,[const(unspec[`_ZN7leveldb10EnvWrapper15NewWritableFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPPNS_12WritableFileE'] 2)]):athlon-direct,athlon-load,athlon-ieu
;;	 12--> b  0: i  17 pc={(flags!=0)?L148:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 12
;;   new head = 189
;;   new tail = 17

;;   ======================================================
;;   -- basic block 3 from 19 to 25 -- after reload
;;   ======================================================

;;	  0--> b  0: i  19 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  20 ax=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  21 ax=[ax+0x20]                            :athlon-direct,athlon-load
;;	  9--> b  0: i  24 flags=cmp(ax,r8)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i  25 pc={(flags!=0)?L139:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 19
;;   new tail = 25

;;   ======================================================
;;   -- basic block 4 from 27 to 33 -- after reload
;;   ======================================================

;;	  0--> b  0: i  27 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  28 di=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  29 r8=[di+0x20]                            :athlon-direct,athlon-load
;;	  9--> b  0: i  32 flags=cmp(r8,ax)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i  33 pc={(flags!=0)?L148:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 27
;;   new tail = 33

;;   ======================================================
;;   -- basic block 5 from 35 to 41 -- after reload
;;   ======================================================

;;	  0--> b  0: i  35 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  36 ax=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  37 ax=[ax+0x20]                            :athlon-direct,athlon-load
;;	  9--> b  0: i  40 flags=cmp(ax,r8)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i  41 pc={(flags!=0)?L139:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 35
;;   new tail = 41

;;   ======================================================
;;   -- basic block 6 from 43 to 49 -- after reload
;;   ======================================================

;;	  0--> b  0: i  43 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  44 di=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  45 r8=[di+0x20]                            :athlon-direct,athlon-load
;;	  9--> b  0: i  48 flags=cmp(r8,ax)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i  49 pc={(flags!=0)?L148:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 43
;;   new tail = 49

;;   ======================================================
;;   -- basic block 7 from 51 to 57 -- after reload
;;   ======================================================

;;	  0--> b  0: i  51 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  52 ax=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  53 ax=[ax+0x20]                            :athlon-direct,athlon-load
;;	  9--> b  0: i  56 flags=cmp(ax,r8)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i  57 pc={(flags!=0)?L139:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 51
;;   new tail = 57

;;   ======================================================
;;   -- basic block 8 from 59 to 65 -- after reload
;;   ======================================================

;;	  0--> b  0: i  59 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  60 di=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  61 r8=[di+0x20]                            :athlon-direct,athlon-load
;;	  9--> b  0: i  64 flags=cmp(r8,ax)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i  65 pc={(flags!=0)?L148:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 59
;;   new tail = 65

;;   ======================================================
;;   -- basic block 9 from 67 to 73 -- after reload
;;   ======================================================

;;	  0--> b  0: i  67 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  68 ax=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  69 ax=[ax+0x20]                            :athlon-direct,athlon-load
;;	  9--> b  0: i  72 flags=cmp(ax,r8)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i  73 pc={(flags!=0)?L139:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 67
;;   new tail = 73

;;   ======================================================
;;   -- basic block 10 from 75 to 221 -- after reload
;;   ======================================================

;;	  0--> b  0: i  75 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  0--> b  0: i  81 di=bx                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i  76 ax=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  82 call [[ax+0x20]]                        :athlon-vector,athlon-ieu
;;	  7--> b  0: i 221 pc=L159                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 75
;;   new tail = 221

;;   ======================================================
;;   -- basic block 11 from 144 to 145 -- after reload
;;   ======================================================

;;	  0--> b  0: i 144 di=bx                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 145 call [ax]                               :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 144
;;   new tail = 145

;;   ======================================================
;;   -- basic block 12 from 161 to 164 -- after reload
;;   ======================================================

;;	  0--> b  0: i 161 ax=bx                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 163 {flags=unspec[[sp+0x8],0x28] 80;clobber bx;}:athlon-vector,athlon-ieu,athlon-ieu
;;	  3--> b  0: i 164 pc={(flags!=0)?L223:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 161
;;   new tail = 164

;;   ======================================================
;;   -- basic block 13 from 168 to 197 -- after reload
;;   ======================================================

;;	  0--> b  0: i 195 {sp=sp+0x10;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i 168 use ax                                  :nothing
;;	  1--> b  0: i 196 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i 197 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 226
;;   new tail = 197

;;   ======================================================
;;   -- basic block 14 from 153 to 224 -- after reload
;;   ======================================================

;;	  0--> b  0: i 153 di=bx                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 154 call [r8]                               :athlon-vector,athlon-ieu
;;	  2--> b  0: i 224 pc=L159                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 153
;;   new tail = 224

;;   ======================================================
;;   -- basic block 15 from 165 to 165 -- after reload
;;   ======================================================

;;	  0--> b  0: i 165 call [`__stack_chk_fail']               :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 165
;;   new tail = 165



starting the processing of deferred insns
ending the processing of deferred insns


virtual leveldb::Status leveldb::EnvWrapper::NewWritableFile(const string&, leveldb::WritableFile**)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 3 [bx] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={17d,16u} r1={5d,3u} r2={5d,3u} r3={4d,6u} r4={14d,21u,8e} r5={11d,7u} r7={5d,27u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={16d,9u} r18={4d} r19={4d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={9d,9u} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 464{355d,101u,8e} in 62{58 regular + 4 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 3 [bx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 17 [flags] 37 [r8]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 7 [sp] 17 [flags] 37 [r8]
;; live  kill	 17 [flags]
(note 9 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 6 9 14 2 NOTE_INSN_FUNCTION_BEG)
(note 14 6 189 2 NOTE_INSN_DELETED)
(insn/f:TI 189 14 2 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) ./include/leveldb/env.h:289 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn 2 189 190 2 (set (reg/f:DI 3 bx [orig:122 <retval> ] [122])
        (reg:DI 5 di [ .result_ptr ])) ./include/leveldb/env.h:289 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 5 di [ .result_ptr ])
        (nil)))
(insn/f:TI 190 2 191 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -16 [0xfffffffffffffff0])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) ./include/leveldb/env.h:289 970 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -16 [0xfffffffffffffff0])))
            (nil))))
(note 191 190 11 2 NOTE_INSN_PROLOGUE_END)
(insn 11 191 8 2 (set (reg/f:DI 4 si [orig:87 D.51337 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:123 this ] [123])
                (const_int 8 [0x8])) [3 this_2(D)->target_+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 8 11 12 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                        (const_int 8 [0x8])) [3 D.51341+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [155])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) ./include/leveldb/env.h:289 986 {stack_tls_protect_set_di}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:DI 0 ax [155])
            (nil))))
(insn:TI 12 8 13 2 (set (reg/f:DI 0 ax [orig:127 _3->_vptr.Env ] [127])
        (mem/f:DI (reg/f:DI 4 si [orig:87 D.51337 ] [87]) [3 _3->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:87 D.51337 ] [87]) [3 _3->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 13 12 16 2 (set (reg/f:DI 37 r8 [orig:89 D.51339 ] [89])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:127 _3->_vptr.Env ] [127])
                (const_int 32 [0x20])) [3 MEM[(int (*__vtbl_ptr_type) () *)_4 + 32B]+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:127 _3->_vptr.Env ] [127])
        (nil)))
(insn 16 13 17 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 37 r8 [orig:89 D.51339 ] [89])
            (mem/u/c:DI (const:DI (unspec:DI [
                            (symbol_ref/i:DI ("_ZN7leveldb10EnvWrapper15NewWritableFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPPNS_12WritableFileE") [flags 0x1]  <function_decl 0x7f0d1234cca8 NewWritableFile>)
                        ] UNSPEC_GOTPCREL)) [18  S8 A8]))) 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 17 16 18 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 148)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2000 (nil)))
 -> 148)
;;  succ:       3 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              14 [20.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

;; basic block 3, loop depth 0, count 0, freq 8000, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
(note 18 17 19 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 19 18 20 3 (set (reg/f:DI 4 si [orig:91 D.51337 ] [91])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:87 D.51337 ] [87])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_3].target_+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 20 19 21 3 (set (reg/f:DI 0 ax [orig:130 _12->_vptr.Env ] [130])
        (mem/f:DI (reg/f:DI 4 si [orig:91 D.51337 ] [91]) [3 _12->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:91 D.51337 ] [91]) [3 _12->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 21 20 24 3 (set (reg/f:DI 0 ax [orig:93 D.51339 ] [93])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:130 _12->_vptr.Env ] [130])
                (const_int 32 [0x20])) [3 MEM[(int (*__vtbl_ptr_type) () *)_13 + 32B]+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 24 21 25 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:93 D.51339 ] [93])
            (reg/f:DI 37 r8 [orig:89 D.51339 ] [89]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:89 D.51339 ] [89])
        (nil)))
(jump_insn:TI 25 24 26 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 139)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2000 (nil)))
 -> 139)
;;  succ:       4 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              11 [20.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 6400, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 4 [si] 5 [di] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 4 [si] 5 [di] 17 [flags] 37 [r8]
;; live  kill	
(note 26 25 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn:TI 27 26 28 4 (set (reg/f:DI 4 si [orig:95 D.51337 ] [95])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:91 D.51337 ] [91])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_12].target_+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 28 27 29 4 (set (reg/f:DI 5 di [orig:133 _17->_vptr.Env ] [133])
        (mem/f:DI (reg/f:DI 4 si [orig:95 D.51337 ] [95]) [3 _17->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:95 D.51337 ] [95]) [3 _17->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 29 28 32 4 (set (reg/f:DI 37 r8 [orig:97 D.51339 ] [97])
        (mem/f:DI (plus:DI (reg/f:DI 5 di [orig:133 _17->_vptr.Env ] [133])
                (const_int 32 [0x20])) [3 MEM[(int (*__vtbl_ptr_type) () *)_18 + 32B]+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 5 di [orig:133 _17->_vptr.Env ] [133])
        (nil)))
(insn:TI 32 29 33 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 37 r8 [orig:97 D.51339 ] [97])
            (reg/f:DI 0 ax [orig:93 D.51339 ] [93]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:93 D.51339 ] [93])
        (nil)))
(jump_insn:TI 33 32 34 4 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 148)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2000 (nil)))
 -> 148)
;;  succ:       5 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              14 [20.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

;; basic block 5, loop depth 0, count 0, freq 5120, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       4 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
(note 34 33 35 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn:TI 35 34 36 5 (set (reg/f:DI 4 si [orig:99 D.51337 ] [99])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:95 D.51337 ] [95])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_17].target_+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 36 35 37 5 (set (reg/f:DI 0 ax [orig:136 _22->_vptr.Env ] [136])
        (mem/f:DI (reg/f:DI 4 si [orig:99 D.51337 ] [99]) [3 _22->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:99 D.51337 ] [99]) [3 _22->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 37 36 40 5 (set (reg/f:DI 0 ax [orig:101 D.51339 ] [101])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:136 _22->_vptr.Env ] [136])
                (const_int 32 [0x20])) [3 MEM[(int (*__vtbl_ptr_type) () *)_23 + 32B]+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 40 37 41 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:101 D.51339 ] [101])
            (reg/f:DI 37 r8 [orig:97 D.51339 ] [97]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:97 D.51339 ] [97])
        (nil)))
(jump_insn:TI 41 40 42 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 139)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2000 (nil)))
 -> 139)
;;  succ:       6 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              11 [20.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 4096, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       5 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 4 [si] 5 [di] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 4 [si] 5 [di] 17 [flags] 37 [r8]
;; live  kill	
(note 42 41 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn:TI 43 42 44 6 (set (reg/f:DI 4 si [orig:103 D.51337 ] [103])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:99 D.51337 ] [99])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_22].target_+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 44 43 45 6 (set (reg/f:DI 5 di [orig:139 _27->_vptr.Env ] [139])
        (mem/f:DI (reg/f:DI 4 si [orig:103 D.51337 ] [103]) [3 _27->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:103 D.51337 ] [103]) [3 _27->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 45 44 48 6 (set (reg/f:DI 37 r8 [orig:105 D.51339 ] [105])
        (mem/f:DI (plus:DI (reg/f:DI 5 di [orig:139 _27->_vptr.Env ] [139])
                (const_int 32 [0x20])) [3 MEM[(int (*__vtbl_ptr_type) () *)_28 + 32B]+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 5 di [orig:139 _27->_vptr.Env ] [139])
        (nil)))
(insn:TI 48 45 49 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 37 r8 [orig:105 D.51339 ] [105])
            (reg/f:DI 0 ax [orig:101 D.51339 ] [101]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:101 D.51339 ] [101])
        (nil)))
(jump_insn:TI 49 48 50 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 148)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1990 (nil)))
 -> 148)
;;  succ:       7 [80.1%]  (FALLTHRU,CAN_FALLTHRU)
;;              14 [19.9%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

;; basic block 7, loop depth 0, count 0, freq 3281, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       6 [80.1%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
(note 50 49 51 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn:TI 51 50 52 7 (set (reg/f:DI 4 si [orig:107 D.51337 ] [107])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:103 D.51337 ] [103])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_27].target_+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 52 51 53 7 (set (reg/f:DI 0 ax [orig:142 _32->_vptr.Env ] [142])
        (mem/f:DI (reg/f:DI 4 si [orig:107 D.51337 ] [107]) [3 _32->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:107 D.51337 ] [107]) [3 _32->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 53 52 56 7 (set (reg/f:DI 0 ax [orig:109 D.51339 ] [109])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:142 _32->_vptr.Env ] [142])
                (const_int 32 [0x20])) [3 MEM[(int (*__vtbl_ptr_type) () *)_33 + 32B]+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 56 53 57 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:109 D.51339 ] [109])
            (reg/f:DI 37 r8 [orig:105 D.51339 ] [105]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:105 D.51339 ] [105])
        (nil)))
(jump_insn:TI 57 56 58 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 139)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1990 (nil)))
 -> 139)
;;  succ:       8 [80.1%]  (FALLTHRU,CAN_FALLTHRU)
;;              11 [19.9%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]

;; basic block 8, loop depth 0, count 0, freq 2628, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       7 [80.1%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 4 [si] 5 [di] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 4 [si] 5 [di] 17 [flags] 37 [r8]
;; live  kill	
(note 58 57 59 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn:TI 59 58 60 8 (set (reg/f:DI 4 si [orig:111 D.51337 ] [111])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:107 D.51337 ] [107])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_32].target_+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 60 59 61 8 (set (reg/f:DI 5 di [orig:145 _37->_vptr.Env ] [145])
        (mem/f:DI (reg/f:DI 4 si [orig:111 D.51337 ] [111]) [3 _37->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:111 D.51337 ] [111]) [3 _37->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 61 60 64 8 (set (reg/f:DI 37 r8 [orig:113 D.51339 ] [113])
        (mem/f:DI (plus:DI (reg/f:DI 5 di [orig:145 _37->_vptr.Env ] [145])
                (const_int 32 [0x20])) [3 MEM[(int (*__vtbl_ptr_type) () *)_38 + 32B]+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 5 di [orig:145 _37->_vptr.Env ] [145])
        (nil)))
(insn:TI 64 61 65 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 37 r8 [orig:113 D.51339 ] [113])
            (reg/f:DI 0 ax [orig:109 D.51339 ] [109]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:109 D.51339 ] [109])
        (nil)))
(jump_insn:TI 65 64 66 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 148)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2000 (nil)))
 -> 148)
;;  succ:       9 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              14 [20.0%]  (CAN_FALLTHRU)
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]

;; basic block 9, loop depth 0, count 0, freq 2102, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       8 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
(note 66 65 67 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn:TI 67 66 68 9 (set (reg/f:DI 4 si [orig:115 D.51337 ] [115])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:111 D.51337 ] [111])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_37].target_+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 68 67 69 9 (set (reg/f:DI 0 ax [orig:148 _42->_vptr.Env ] [148])
        (mem/f:DI (reg/f:DI 4 si [orig:115 D.51337 ] [115]) [3 _42->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:115 D.51337 ] [115]) [3 _42->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 69 68 72 9 (set (reg/f:DI 0 ax [orig:117 D.51339 ] [117])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:148 _42->_vptr.Env ] [148])
                (const_int 32 [0x20])) [3 MEM[(int (*__vtbl_ptr_type) () *)_43 + 32B]+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 72 69 73 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:117 D.51339 ] [117])
            (reg/f:DI 37 r8 [orig:113 D.51339 ] [113]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:113 D.51339 ] [113])
        (nil)))
(jump_insn:TI 73 72 74 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 139)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1980 (nil)))
 -> 139)
;;  succ:       10 [80.2%]  (FALLTHRU,CAN_FALLTHRU)
;;              11 [19.8%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]

;; basic block 10, loop depth 0, count 0, freq 1686, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       9 [80.2%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	
(note 74 73 77 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(note 77 74 75 10 NOTE_INSN_DELETED)
(insn:TI 75 77 81 10 (set (reg/f:DI 4 si [orig:119 D.51337 ] [119])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:115 D.51337 ] [115])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_42].target_+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn 81 75 76 10 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:122 <retval> ] [122])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 76 81 82 10 (set (reg/f:DI 0 ax [orig:151 _47->_vptr.Env ] [151])
        (mem/f:DI (reg/f:DI 4 si [orig:119 D.51337 ] [119]) [3 _47->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(call_insn:TI 82 76 221 10 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:151 _47->_vptr.Env ] [151])
                    (const_int 32 [0x20])) [3 MEM[(int (*__vtbl_ptr_type) () *)_48 + 32B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_49;(struct Env)_47->4) S1 A8])
        (const_int 0 [0])) ./include/leveldb/env.h:290 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:151 _47->_vptr.Env ] [151])
                        (expr_list:REG_CALL_DECL (nil)
                            (nil)))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(jump_insn:TI 221 82 222 10 (set (pc)
        (label_ref 159)) 654 {jump}
     (nil)
 -> 159)
;;  succ:       12 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 222 221 139)
;; basic block 11, loop depth 0, count 0, freq 3693, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [20.0%]  (CAN_FALLTHRU)
;;              9 [19.8%]  (CAN_FALLTHRU)
;;              5 [20.0%]  (CAN_FALLTHRU)
;;              7 [19.9%]  (CAN_FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; lr  use 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 139 222 140 11 17 "" [4 uses])
(note 140 139 144 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn:TI 144 140 145 11 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:122 <retval> ] [122])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(call_insn:TI 145 144 159 11 (call (mem:QI (reg/f:DI 0 ax [orig:93 D.51339 ] [93]) [0  S1 A8])
        (const_int 0 [0])) ./include/leveldb/env.h:290 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:93 D.51339 ] [93])
                        (expr_list:REG_CALL_DECL (nil)
                            (nil)))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       12 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 12, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [100.0%]  (CAN_FALLTHRU)
;;              11 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              14 [100.0%]  (CAN_FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 3 [bx]
(code_label 159 145 169 12 15 "" [2 uses])
(note 169 159 161 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn:TI 161 169 163 12 (set (reg/i:DI 0 ax)
        (reg/f:DI 3 bx [orig:122 <retval> ] [122])) ./include/leveldb/env.h:291 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 3 bx [orig:122 <retval> ] [122])
        (nil)))
(insn:TI 163 161 164 12 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                                (const_int 8 [0x8])) [3 D.51341+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 3 bx [156]))
        ]) ./include/leveldb/env.h:291 990 {stack_tls_protect_test_di}
     (expr_list:REG_UNUSED (reg:DI 3 bx [156])
        (nil)))
(jump_insn:TI 164 163 171 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 223)
            (pc))) ./include/leveldb/env.h:291 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 223)
;;  succ:       13 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              15 [0.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 13, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, RTL)
;;  pred:       12 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 7 [sp] 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 7 [sp]
;; live  kill	 17 [flags]
(note 171 164 226 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(note 226 171 195 13 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 195 226 168 13 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) ./include/leveldb/env.h:291 970 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (nil))))
(insn 168 195 196 13 (use (reg/i:DI 0 ax)) ./include/leveldb/env.h:291 -1
     (nil))
(insn/f:TI 196 168 197 13 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) ./include/leveldb/env.h:291 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 197 196 198 13 (simple_return) ./include/leveldb/env.h:291 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 7 [sp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

(barrier 198 197 148)
;; basic block 14, loop depth 0, count 0, freq 4621, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [20.0%]  (CAN_FALLTHRU)
;;              4 [20.0%]  (CAN_FALLTHRU)
;;              6 [19.9%]  (CAN_FALLTHRU)
;;              8 [20.0%]  (CAN_FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 7 [sp] 37 [r8]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 148 198 149 14 16 "" [4 uses])
(note 149 148 153 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn:TI 153 149 154 14 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:122 <retval> ] [122])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(call_insn:TI 154 153 224 14 (call (mem:QI (reg/f:DI 37 r8 [orig:89 D.51339 ] [89]) [0  S1 A8])
        (const_int 0 [0])) ./include/leveldb/env.h:290 660 {*call}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:89 D.51339 ] [89])
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_DEAD (reg:DI 2 cx)
                    (expr_list:REG_DEAD (reg:DI 1 dx)
                        (expr_list:REG_CALL_DECL (nil)
                            (nil)))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(jump_insn:TI 224 154 225 14 (set (pc)
        (label_ref 159)) ./include/leveldb/env.h:290 654 {jump}
     (nil)
 -> 159)
;;  succ:       12 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 225 224 223)
;; basic block 15, loop depth 0, count 0, freq 4
;;  prev block 14, next block 1, flags: (REACHABLE, RTL)
;;  pred:       12 [0.0%]  (CAN_FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 223 225 170 15 27 "" [1 uses])
(note 170 223 165 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 165 170 166 15 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f0d119c66c0 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) ./include/leveldb/env.h:291 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f0d119c66c0 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 166 165 188)
(note 188 166 0 NOTE_INSN_DELETED)

;; Function leveldb::Status leveldb::BuildTable(const string&, leveldb::Env*, const leveldb::Options&, leveldb::TableCache*, leveldb::Iterator*, leveldb::FileMetaData*) (_ZN7leveldb10BuildTableERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPNS_3EnvERKNS_7OptionsEPNS_10TableCacheEPNS_8IteratorEPNS_12FileMetaDataE, funcdef_no=2151, decl_uid=23608, cgraph_uid=775, symbol_order=787)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 157 n_edges 255 count 163 (    1)


leveldb::Status leveldb::BuildTable(const string&, leveldb::Env*, const leveldb::Options&, leveldb::TableCache*, leveldb::Iterator*, leveldb::FileMetaData*)

Dataflow summary:
def_info->table_size = 5970, use_info->table_size = 0
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={123d,90u} r1={96d,26u} r2={74d,17u} r3={12d,19u,8e} r4={94d,57u,16e} r5={130d,100u} r6={3d,23u} r7={15d,320u} r8={61d} r9={61d} r10={61d} r11={61d} r12={61d} r13={61d} r14={61d} r15={61d} r16={9u} r17={135d,65u} r18={61d} r19={61d} r20={22e} r21={62d} r22={62d} r23={62d} r24={62d} r25={62d} r26={62d} r27={62d} r28={62d} r29={61d} r30={61d} r31={61d} r32={61d} r33={61d} r34={61d} r35={61d} r36={61d} r37={69d,13u} r38={62d,3u} r39={61d} r40={61d} r41={3d,12u,5e} r42={3d,8u,2e} r43={8d,8u} r44={3d,13u} r45={61d} r46={61d} r47={61d} r48={61d} r49={61d} r50={61d} r51={61d} r52={61d} r53={61d} r54={61d} r55={61d} r56={61d} r57={61d} r58={61d} r59={61d} r60={61d} r61={61d} r62={61d} r63={61d} r64={61d} r65={61d} r66={61d} r67={61d} r68={61d} r69={61d} r70={61d} r71={61d} r72={61d} r73={61d} r74={61d} r75={61d} r76={61d} r77={61d} r78={61d} r79={61d} r80={61d} 
;;    total ref usage 5578{4742d,783u,53e} in 465{404 regular + 61 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(21){ }d-1(22){ }d-1(23){ }d-1(24){ }d-1(25){ }d-1(26){ }d-1(27){ }d-1(28){ }d-1(37){ }d-1(38){ }d-1(41){ }d-1(42){ }d-1(43){ }d-1(44){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	 16 [argp]
;; lr  use 	
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	
;; lr  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 0 )->[2]->( 156(EH) 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

( 2 )->[3]->( 156(EH) 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp] 41 [r12] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 1 [dx] 4 [si] 5 [di] 44 [r15]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 3 )->[4]->( 155(EH) 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 4 )->[5]->( 60 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags] 43 [r14]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 17 [flags] 43 [r14]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 5 )->[6]->( 7 84 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp] 42 [r13]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 6 )->[7]->( 8 93 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 42 [r13]
;; lr  def 	 1 [dx] 4 [si] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx] 4 [si] 17 [flags] 37 [r8]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]

( 7 )->[8]->( 9 88 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 8 )->[9]->( 10 93 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 1 [dx] 4 [si] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx] 4 [si] 17 [flags] 37 [r8]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]

( 9 )->[10]->( 11 88 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 10 )->[11]->( 12 93 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 1 [dx] 4 [si] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx] 4 [si] 17 [flags] 37 [r8]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]

( 11 )->[12]->( 13 88 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 12 )->[13]->( 14 93 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 1 [dx] 4 [si] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx] 4 [si] 17 [flags] 37 [r8]
;; live  kill	
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]

( 13 )->[14]->( 15 88 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 14 )->[15]->( 16 155(EH) )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 4 [si] 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 43 [r14] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 43 [r14]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 15 85 89 94 )->[16]->( 17 23 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 16 )->[17]->( 18 19 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 17 )->[18]->( 19 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 17 18 )->[19]->( 20 95 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 19 )->[20]->( 137(EH) 21 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 20 )->[21]->( 22 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 21 95 )->[22]->( 23 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 22 16 )->[23]->( 24 25 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 23 )->[24]->( 25 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 23 24 )->[25]->( 26 30 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 25 91 86 92 )->[26]->( 27 28 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 5 [di] 6 [bp] 7 [sp]
;; live  out 	 5 [di] 6 [bp] 7 [sp]

( 26 )->[27]->( 28 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

( 26 27 )->[28]->( 29 136 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 17 [flags]
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 2 [cx]
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

( 28 )->[29]->( 1 )
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 25 )->[30]->( 155(EH) 31 )
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 30 )->[31]->( 150(EH) 32 )
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 1 [dx] 4 [si] 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 31 )->[32]->( 155(EH) 33 )
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 5 [di]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 32 )->[33]->( 34 155(EH) )
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 33 )->[34]->( 40 )
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 41 [r12]
;; lr  def 	 0 [ax]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 41 )->[35]->( 155(EH) 36 )
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 5 [di]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 35 )->[36]->( 37 155(EH) )
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 36 )->[37]->( 155(EH) 38 )
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 5 [di]
;; live  kill	
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 37 )->[38]->( 155(EH) 39 )
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 1 [dx] 4 [si] 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 38 )->[39]->( 155(EH) 40 )
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 39 34 )->[40]->( 155(EH) 41 )
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 40 )->[41]->( 35 42 )
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 41 )->[42]->( 101 43 )
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 42 )->[43]->( 155(EH) 44 )
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 111 43 113 )->[44]->( 114 45 )
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 44 133 124 134 )->[45]->( 46 47 )
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 45 )->[46]->( 47 )
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 45 46 )->[47]->( 48 60 )
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 47 )->[48]->( 155(EH) 49 )
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 48 )->[49]->( 155(EH) 50 )
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 49 )->[50]->( 51 57 )
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 50 )->[51]->( 52 53 )
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 51 )->[52]->( 53 )
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 51 52 )->[53]->( 54 56 )
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 53 )->[54]->( 146(EH) 55 )
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 54 )->[55]->( 56 )
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 53 55 )->[56]->( 57 )
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 50 56 )->[57]->( 58 59 )
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 57 )->[58]->( 59 )
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 58 57 )->[59]->( 60 )
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 47 59 5 )->[60]->( 155(EH) 61 )
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 60 )->[61]->( 62 72 )
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 61 )->[62]->( 155(EH) 63 )
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 62 )->[63]->( 64 70 )
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 63 )->[64]->( 65 66 )
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 64 )->[65]->( 66 )
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 64 65 )->[66]->( 67 96 )
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 66 )->[67]->( 148(EH) 68 )
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 67 )->[68]->( 69 )
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di]
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 68 96 )->[69]->( 70 )
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 69 63 )->[70]->( 71 72 )
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 70 )->[71]->( 72 )
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 70 71 61 )->[72]->( 86 73 )
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 72 87 )->[73]->( 74 99 )
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp] 42 [r13]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 42 [r13] 44 [r15]

( 73 )->[74]->( 75 90 )
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 42 [r13]
;; lr  def 	 1 [dx] 2 [cx] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx] 2 [cx] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 2 [cx] 4 [si] 6 [bp] 7 [sp] 44 [r15]

( 74 )->[75]->( 76 97 )
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 2 [cx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 2 [cx] 4 [si] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 0 [ax] 4 [si] 6 [bp] 7 [sp] 44 [r15]

( 75 )->[76]->( 77 90 )
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 1 [dx] 2 [cx] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 4 [si] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 1 [dx] 2 [cx] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 2 [cx] 4 [si] 6 [bp] 7 [sp] 44 [r15]

( 76 )->[77]->( 78 97 )
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 2 [cx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 2 [cx] 4 [si] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 0 [ax] 4 [si] 6 [bp] 7 [sp] 44 [r15]

( 77 )->[78]->( 79 90 )
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 1 [dx] 2 [cx] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 4 [si] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 1 [dx] 2 [cx] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 2 [cx] 4 [si] 6 [bp] 7 [sp] 44 [r15]

( 78 )->[79]->( 80 97 )
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 2 [cx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 2 [cx] 4 [si] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 0 [ax] 4 [si] 6 [bp] 7 [sp] 44 [r15]

( 79 )->[80]->( 81 90 )
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 1 [dx] 2 [cx] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 4 [si] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 1 [dx] 2 [cx] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 2 [cx] 4 [si] 6 [bp] 7 [sp] 44 [r15]

( 80 )->[81]->( 82 97 )
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 2 [cx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 2 [cx] 4 [si] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 0 [ax] 4 [si] 6 [bp] 7 [sp] 44 [r15]

( 81 )->[82]->( 83 155(EH) )
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 4 [si] 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 4 [si] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 44 [r15]

( 82 )->[83]->( 91 )
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp] 44 [r15]
;; live  out 	

( 6 )->[84]->( 155(EH) 85 )
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 42 [r13] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 43 [r14] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx] 2 [cx] 4 [si] 5 [di] 43 [r14]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 84 )->[85]->( 16 )
;; bb 85 artificial_defs: { }
;; bb 85 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	

( 72 )->[86]->( 26 87 )
;; bb 86 artificial_defs: { }
;; bb 86 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp] 41 [r12]
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 42 [r13] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 42 [r13] 44 [r15]

( 86 )->[87]->( 73 )
;; bb 87 artificial_defs: { }
;; bb 87 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 42 [r13] 44 [r15]
;; live  out 	

( 8 10 14 12 )->[88]->( 155(EH) 89 )
;; bb 88 artificial_defs: { }
;; bb 88 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 4 [si] 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 43 [r14] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx] 2 [cx] 5 [di] 43 [r14]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 88 )->[89]->( 16 )
;; bb 89 artificial_defs: { }
;; bb 89 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	

( 74 80 78 76 )->[90]->( 155(EH) 91 )
;; bb 90 artificial_defs: { }
;; bb 90 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 2 [cx] 4 [si] 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 2 [cx] 4 [si] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 1 [dx] 5 [di]
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 44 [r15]

( 98 83 90 100 )->[91]->( 92 26 )
;; bb 91 artificial_defs: { }
;; bb 91 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 5 [di] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 5 [di] 6 [bp] 7 [sp] 44 [r15]

( 91 )->[92]->( 26 )
;; bb 92 artificial_defs: { }
;; bb 92 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 44 [r15]

( 7 13 11 9 )->[93]->( 155(EH) 94 )
;; bb 93 artificial_defs: { }
;; bb 93 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 4 [si] 7 [sp] 37 [r8] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 43 [r14] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx] 2 [cx] 5 [di] 43 [r14]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 93 )->[94]->( 16 )
;; bb 94 artificial_defs: { }
;; bb 94 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	

( 19 )->[95]->( 22 )
;; bb 95 artificial_defs: { }
;; bb 95 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 66 )->[96]->( 69 )
;; bb 96 artificial_defs: { }
;; bb 96 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

( 75 77 81 79 )->[97]->( 155(EH) 98 )
;; bb 97 artificial_defs: { }
;; bb 97 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 0 [ax] 4 [si] 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 4 [si] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 1 [dx] 5 [di]
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 44 [r15]

( 97 )->[98]->( 91 )
;; bb 98 artificial_defs: { }
;; bb 98 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp] 44 [r15]
;; live  out 	

( 73 )->[99]->( 155(EH) 100 )
;; bb 99 artificial_defs: { }
;; bb 99 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 42 [r13] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx] 4 [si] 5 [di]
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 44 [r15]

( 99 )->[100]->( 91 )
;; bb 100 artificial_defs: { }
;; bb 100 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 6 [bp] 7 [sp] 44 [r15]
;; live  out 	

( 42 )->[101]->( 155(EH) 102 )
;; bb 101 artificial_defs: { }
;; bb 101 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 4 [si] 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 101 )->[102]->( 103 109 )
;; bb 102 artificial_defs: { }
;; bb 102 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 102 )->[103]->( 104 105 )
;; bb 103 artificial_defs: { }
;; bb 103 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 103 )->[104]->( 105 )
;; bb 104 artificial_defs: { }
;; bb 104 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 103 104 )->[105]->( 106 135 )
;; bb 105 artificial_defs: { }
;; bb 105 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 105 )->[106]->( 153(EH) 107 )
;; bb 106 artificial_defs: { }
;; bb 106 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 106 )->[107]->( 108 )
;; bb 107 artificial_defs: { }
;; bb 107 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 107 135 )->[108]->( 109 )
;; bb 108 artificial_defs: { }
;; bb 108 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 108 102 )->[109]->( 110 111 )
;; bb 109 artificial_defs: { }
;; bb 109 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 109 )->[110]->( 111 )
;; bb 110 artificial_defs: { }
;; bb 110 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 109 110 )->[111]->( 112 44 )
;; bb 111 artificial_defs: { }
;; bb 111 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 111 )->[112]->( 155(EH) 113 )
;; bb 112 artificial_defs: { }
;; bb 112 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 112 )->[113]->( 44 )
;; bb 113 artificial_defs: { }
;; bb 113 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 41 [r12]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 44 )->[114]->( 155(EH) 115 )
;; bb 114 artificial_defs: { }
;; bb 114 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 114 )->[115]->( 116 122 )
;; bb 115 artificial_defs: { }
;; bb 115 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 115 )->[116]->( 117 118 )
;; bb 116 artificial_defs: { }
;; bb 116 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 116 )->[117]->( 118 )
;; bb 117 artificial_defs: { }
;; bb 117 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 116 117 )->[118]->( 119 121 )
;; bb 118 artificial_defs: { }
;; bb 118 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 118 )->[119]->( 144(EH) 120 )
;; bb 119 artificial_defs: { }
;; bb 119 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 119 )->[120]->( 121 )
;; bb 120 artificial_defs: { }
;; bb 120 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 118 120 )->[121]->( 122 )
;; bb 121 artificial_defs: { }
;; bb 121 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 121 115 )->[122]->( 123 124 )
;; bb 122 artificial_defs: { }
;; bb 122 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 122 )->[123]->( 124 )
;; bb 123 artificial_defs: { }
;; bb 123 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 122 123 )->[124]->( 125 45 )
;; bb 124 artificial_defs: { }
;; bb 124 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 124 )->[125]->( 155(EH) 126 )
;; bb 125 artificial_defs: { }
;; bb 125 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 125 )->[126]->( 127 133 )
;; bb 126 artificial_defs: { }
;; bb 126 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 126 )->[127]->( 128 129 )
;; bb 127 artificial_defs: { }
;; bb 127 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 127 )->[128]->( 129 )
;; bb 128 artificial_defs: { }
;; bb 128 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 127 128 )->[129]->( 130 132 )
;; bb 129 artificial_defs: { }
;; bb 129 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 129 )->[130]->( 151(EH) 131 )
;; bb 130 artificial_defs: { }
;; bb 130 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 130 )->[131]->( 132 )
;; bb 131 artificial_defs: { }
;; bb 131 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 129 131 )->[132]->( 133 )
;; bb 132 artificial_defs: { }
;; bb 132 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 132 126 )->[133]->( 134 45 )
;; bb 133 artificial_defs: { }
;; bb 133 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 133 )->[134]->( 45 )
;; bb 134 artificial_defs: { }
;; bb 134 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 105 )->[135]->( 108 )
;; bb 135 artificial_defs: { }
;; bb 135 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

( 28 )->[136]->( )
;; bb 136 artificial_defs: { }
;; bb 136 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 20(EH) )->[137]->( 138 139 )
;; bb 137 artificial_defs: { d27(0){ }d161(1){ }}
;; bb 137 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]

( 148 146 153 137 144 151 )->[138]->( 139 )
;; bb 138 artificial_defs: { }
;; bb 138 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]

( 147 154 150 137 138 152 149 145 155 )->[139]->( 140 141 )
;; bb 139 artificial_defs: { }
;; bb 139 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]

( 139 )->[140]->( 141 )
;; bb 140 artificial_defs: { }
;; bb 140 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

( 140 139 156 )->[141]->( 142 143 )
;; bb 141 artificial_defs: { }
;; bb 141 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

( 141 )->[142]->( 143 )
;; bb 142 artificial_defs: { }
;; bb 142 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

( 141 142 )->[143]->( )
;; bb 143 artificial_defs: { }
;; bb 143 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

( 119(EH) )->[144]->( 138 145 )
;; bb 144 artificial_defs: { d21(0){ }d155(1){ }}
;; bb 144 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]

( 144 )->[145]->( 139 )
;; bb 145 artificial_defs: { }
;; bb 145 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	

( 54(EH) )->[146]->( 138 147 )
;; bb 146 artificial_defs: { d17(0){ }d151(1){ }}
;; bb 146 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]

( 146 )->[147]->( 139 )
;; bb 147 artificial_defs: { }
;; bb 147 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	

( 67(EH) )->[148]->( 138 149 )
;; bb 148 artificial_defs: { d15(0){ }d149(1){ }}
;; bb 148 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]

( 148 )->[149]->( 139 )
;; bb 149 artificial_defs: { }
;; bb 149 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	

( 31(EH) )->[150]->( 139 )
;; bb 150 artificial_defs: { d24(0){ }d158(1){ }}
;; bb 150 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]

( 130(EH) )->[151]->( 138 152 )
;; bb 151 artificial_defs: { d19(0){ }d153(1){ }}
;; bb 151 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]

( 151 )->[152]->( 139 )
;; bb 152 artificial_defs: { }
;; bb 152 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	

( 106(EH) )->[153]->( 138 154 )
;; bb 153 artificial_defs: { d23(0){ }d157(1){ }}
;; bb 153 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  kill	
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]

( 153 )->[154]->( 139 )
;; bb 154 artificial_defs: { }
;; bb 154 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	
;; live  gen 	
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	

( 4(EH) 15(EH) 99(EH) 90(EH) 97(EH) 60(EH) 62(EH) 82(EH) 88(EH) 93(EH) 84(EH) 30(EH) 32(EH) 33(EH) 40(EH) 35(EH) 36(EH) 37(EH) 38(EH) 39(EH) 101(EH) 112(EH) 43(EH) 114(EH) 125(EH) 48(EH) 49(EH) )->[155]->( 139 )
;; bb 155 artificial_defs: { d13(0){ }d147(1){ }}
;; bb 155 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx]
;; live  in  	 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]

( 2(EH) 3(EH) )->[156]->( 141 )
;; bb 156 artificial_defs: { d11(0){ }d145(1){ }}
;; bb 156 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx]
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx]
;; live  kill	
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

( 29 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(3){ }u-1(6){ }u-1(7){ }u-1(41){ }u-1(42){ }u-1(43){ }u-1(44){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 23 to worklist
  Adding insn 19 to worklist
  Adding insn 18 to worklist
  Adding insn 11 to worklist
  Adding insn 6 to worklist
  Adding insn 5 to worklist
  Adding insn 1464 to worklist
  Adding insn 1463 to worklist
  Adding insn 1462 to worklist
  Adding insn 1461 to worklist
  Adding insn 1460 to worklist
  Adding insn 1459 to worklist
  Adding insn 30 to worklist
  Adding insn 35 to worklist
  Adding insn 39 to worklist
  Adding insn 46 to worklist
  Adding insn 54 to worklist
  Adding insn 62 to worklist
  Adding insn 70 to worklist
  Adding insn 78 to worklist
  Adding insn 86 to worklist
  Adding insn 94 to worklist
  Adding insn 102 to worklist
  Adding insn 110 to worklist
  Adding insn 122 to worklist
  Adding insn 127 to worklist
  Adding insn 243 to worklist
  Adding insn 246 to worklist
  Adding insn 251 to worklist
  Adding insn 254 to worklist
  Adding insn 260 to worklist
  Adding insn 264 to worklist
  Adding insn 267 to worklist
  Adding insn 271 to worklist
  Adding insn 823 to worklist
  Adding insn 826 to worklist
  Adding insn 994 to worklist
  Adding insn 993 to worklist
  Adding insn 1477 to worklist
  Adding insn 998 to worklist
  Adding insn 274 to worklist
  Adding insn 282 to worklist
  Adding insn 1417 to worklist
  Adding insn 287 to worklist
  Adding insn 297 to worklist
  Adding insn 1630 to worklist
  Adding insn 1414 to worklist
  Adding insn 1413 to worklist
  Adding insn 1412 to worklist
  Adding insn 312 to worklist
  Adding insn 326 to worklist
  Adding insn 1443 to worklist
  Adding insn 1442 to worklist
  Adding insn 331 to worklist
  Adding insn 341 to worklist
  Adding insn 1441 to worklist
  Adding insn 1440 to worklist
  Adding insn 346 to worklist
  Adding insn 303 to worklist
  Adding insn 307 to worklist
  Adding insn 353 to worklist
  Adding insn 404 to worklist
  Adding insn 412 to worklist
  Adding insn 410 to worklist
  Adding insn 408 to worklist
  Adding insn 504 to worklist
  Adding insn 509 to worklist
  Adding insn 514 to worklist
  Adding insn 512 to worklist
  Adding insn 527 to worklist
  Adding insn 520 to worklist
  Adding insn 519 to worklist
  Adding insn 518 to worklist
  Adding insn 535 to worklist
  Adding insn 1420 to worklist
  Adding insn 539 to worklist
  Adding insn 542 to worklist
  Adding insn 545 to worklist
  Adding insn 550 to worklist
  Adding insn 553 to worklist
  Adding insn 557 to worklist
  Adding insn 966 to worklist
  Adding insn 562 to worklist
  Adding insn 567 to worklist
  Adding insn 583 to worklist
  Adding insn 587 to worklist
  Adding insn 596 to worklist
  Adding insn 590 to worklist
  Adding insn 601 to worklist
  Adding insn 604 to worklist
  Adding insn 607 to worklist
  Adding insn 612 to worklist
  Adding insn 615 to worklist
  Adding insn 621 to worklist
  Adding insn 625 to worklist
  Adding insn 628 to worklist
  Adding insn 633 to worklist
  Adding insn 984 to worklist
  Adding insn 647 to worklist
  Adding insn 655 to worklist
  Adding insn 663 to worklist
  Adding insn 671 to worklist
  Adding insn 679 to worklist
  Adding insn 687 to worklist
  Adding insn 695 to worklist
  Adding insn 703 to worklist
  Adding insn 713 to worklist
  Adding insn 1638 to worklist
  Adding insn 237 to worklist
  Adding insn 1641 to worklist
  Adding insn 636 to worklist
  Adding insn 1644 to worklist
  Adding insn 213 to worklist
  Adding insn 1647 to worklist
  Adding insn 799 to worklist
  Adding insn 717 to worklist
  Adding insn 1649 to worklist
  Adding insn 814 to worklist
  Adding insn 225 to worklist
  Adding insn 1652 to worklist
  Adding insn 1654 to worklist
  Adding insn 1656 to worklist
  Adding insn 789 to worklist
  Adding insn 1659 to worklist
  Adding insn 808 to worklist
  Adding insn 1662 to worklist
  Adding insn 358 to worklist
  Adding insn 363 to worklist
  Adding insn 366 to worklist
  Adding insn 369 to worklist
  Adding insn 374 to worklist
  Adding insn 377 to worklist
  Adding insn 383 to worklist
  Adding insn 387 to worklist
  Adding insn 390 to worklist
  Adding insn 953 to worklist
  Adding insn 395 to worklist
  Adding insn 1664 to worklist
  Adding insn 398 to worklist
  Adding insn 424 to worklist
  Adding insn 428 to worklist
  Adding insn 431 to worklist
  Adding insn 434 to worklist
  Adding insn 439 to worklist
  Adding insn 442 to worklist
  Adding insn 446 to worklist
  Adding insn 451 to worklist
  Adding insn 454 to worklist
  Adding insn 459 to worklist
  Adding insn 467 to worklist
  Adding insn 471 to worklist
  Adding insn 474 to worklist
  Adding insn 477 to worklist
  Adding insn 482 to worklist
  Adding insn 485 to worklist
  Adding insn 489 to worklist
  Adding insn 494 to worklist
  Adding insn 1666 to worklist
  Adding insn 497 to worklist
  Adding insn 1668 to worklist
  Adding insn 995 to worklist
  Adding insn 835 to worklist
  Adding insn 916 to worklist
  Adding insn 927 to worklist
  Adding insn 930 to worklist
  Adding insn 939 to worklist
  Adding insn 942 to worklist
  Adding insn 947 to worklist
  Adding insn 871 to worklist
  Adding insn 1671 to worklist
  Adding insn 899 to worklist
  Adding insn 1674 to worklist
  Adding insn 913 to worklist
  Adding insn 1677 to worklist
  Adding insn 1679 to worklist
  Adding insn 848 to worklist
  Adding insn 885 to worklist
  Adding insn 1682 to worklist
  Adding insn 857 to worklist
  Adding insn 1685 to worklist
  Adding insn 1687 to worklist
  Adding insn 1689 to worklist
Finished finding needed instructions:
processing block 143 lr out =  7 [sp]
  Adding insn 946 to worklist
processing block 142 lr out =  3 [bx] 7 [sp]
processing block 141 lr out =  3 [bx] 5 [di] 7 [sp]
  Adding insn 938 to worklist
  Adding insn 937 to worklist
processing block 156 lr out =  3 [bx] 6 [bp] 7 [sp]
  Adding insn 1048 to worklist
processing block 140 lr out =  3 [bx] 6 [bp] 7 [sp]
processing block 139 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp]
  Adding insn 926 to worklist
  Adding insn 1422 to worklist
  Adding insn 923 to worklist
processing block 155 lr out =  3 [bx] 6 [bp] 7 [sp] 44 [r15]
  Adding insn 1054 to worklist
processing block 138 lr out =  3 [bx] 6 [bp] 7 [sp] 44 [r15]
processing block 149 lr out =  3 [bx] 6 [bp] 7 [sp] 44 [r15]
processing block 148 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]
  Adding insn 912 to worklist
  Adding insn 911 to worklist
  Adding insn 1084 to worklist
processing block 29 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 1476 to worklist
  Adding insn 1475 to worklist
  Adding insn 1474 to worklist
  Adding insn 1473 to worklist
  Adding insn 1472 to worklist
  Adding insn 1471 to worklist
  Adding insn 1470 to worklist
processing block 136 lr out =  7 [sp]
processing block 28 lr out =  0 [ax] 7 [sp]
  Adding insn 991 to worklist
processing block 27 lr out =  6 [bp] 7 [sp]
processing block 26 lr out =  5 [di] 6 [bp] 7 [sp]
  Adding insn 822 to worklist
  Adding insn 1423 to worklist
  Adding insn 819 to worklist
processing block 92 lr out =  6 [bp] 7 [sp] 44 [r15]
processing block 91 lr out =  5 [di] 6 [bp] 7 [sp] 44 [r15]
  Adding insn 716 to worklist
  Adding insn 715 to worklist
processing block 83 lr out =  6 [bp] 7 [sp] 44 [r15]
processing block 82 lr out =  6 [bp] 7 [sp] 16 [argp] 44 [r15]
  Adding insn 710 to worklist
  Adding insn 708 to worklist
  Adding insn 1433 to worklist
  Adding insn 705 to worklist
processing block 98 lr out =  6 [bp] 7 [sp] 44 [r15]
processing block 97 lr out =  6 [bp] 7 [sp] 16 [argp] 44 [r15]
  Adding insn 786 to worklist
  Adding insn 1426 to worklist
processing block 81 lr out =  0 [ax] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
  Adding insn 702 to worklist
  Adding insn 699 to worklist
  Adding insn 698 to worklist
  Adding insn 697 to worklist
processing block 90 lr out =  6 [bp] 7 [sp] 16 [argp] 44 [r15]
  Adding insn 796 to worklist
  Adding insn 1425 to worklist
processing block 80 lr out =  2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
  Adding insn 694 to worklist
  Adding insn 691 to worklist
  Adding insn 690 to worklist
  Adding insn 689 to worklist
processing block 79 lr out =  0 [ax] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
  Adding insn 686 to worklist
  Adding insn 683 to worklist
  Adding insn 682 to worklist
  Adding insn 681 to worklist
processing block 78 lr out =  2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
  Adding insn 678 to worklist
  Adding insn 675 to worklist
  Adding insn 674 to worklist
  Adding insn 673 to worklist
processing block 77 lr out =  0 [ax] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
  Adding insn 670 to worklist
  Adding insn 667 to worklist
  Adding insn 666 to worklist
  Adding insn 665 to worklist
processing block 76 lr out =  2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
  Adding insn 662 to worklist
  Adding insn 659 to worklist
  Adding insn 658 to worklist
  Adding insn 657 to worklist
processing block 75 lr out =  0 [ax] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
  Adding insn 654 to worklist
  Adding insn 651 to worklist
  Adding insn 650 to worklist
  Adding insn 649 to worklist
processing block 74 lr out =  2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
  Adding insn 646 to worklist
  Adding insn 643 to worklist
  Adding insn 642 to worklist
  Adding insn 641 to worklist
processing block 100 lr out =  6 [bp] 7 [sp] 44 [r15]
processing block 99 lr out =  6 [bp] 7 [sp] 16 [argp] 44 [r15]
  Adding insn 806 to worklist
  Adding insn 805 to worklist
  Adding insn 1424 to worklist
processing block 73 lr out =  0 [ax] 6 [bp] 7 [sp] 16 [argp] 42 [r13] 44 [r15]
  Adding insn 983 to worklist
  Adding insn 979 to worklist
  Adding insn 978 to worklist
processing block 87 lr out =  6 [bp] 7 [sp] 16 [argp] 42 [r13] 44 [r15]
processing block 86 lr out =  6 [bp] 7 [sp] 16 [argp] 42 [r13] 44 [r15]
  Adding insn 635 to worklist
processing block 72 lr out =  6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 632 to worklist
processing block 71 lr out =  6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
processing block 70 lr out =  5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 624 to worklist
processing block 69 lr out =  5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
processing block 68 lr out =  0 [ax] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 618 to worklist
processing block 67 lr out =  0 [ax] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
processing block 96 lr out =  0 [ax] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 1622 to worklist
processing block 66 lr out =  5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 611 to worklist
processing block 65 lr out =  5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 608 to worklist
  Adding insn 606 to worklist
processing block 64 lr out =  0 [ax] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 603 to worklist
processing block 63 lr out =  0 [ax] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 600 to worklist
  Adding insn 599 to worklist
  Adding insn 598 to worklist
processing block 62 lr out =  6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 594 to worklist
  Adding insn 592 to worklist
  Adding insn 1434 to worklist
processing block 61 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 586 to worklist
  Adding insn 585 to worklist
processing block 60 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 582 to worklist
  Adding insn 581 to worklist
  Adding insn 579 to worklist
processing block 137 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]
  Adding insn 834 to worklist
  Adding insn 833 to worklist
  Adding insn 1060 to worklist
processing block 150 lr out =  3 [bx] 6 [bp] 7 [sp] 44 [r15]
  Adding insn 847 to worklist
  Adding insn 1064 to worklist
processing block 39 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 345 to worklist
  Adding insn 343 to worklist
processing block 38 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 340 to worklist
  Adding insn 339 to worklist
  Adding insn 338 to worklist
processing block 37 lr out =  0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 330 to worklist
  Adding insn 328 to worklist
processing block 36 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 325 to worklist
  Adding insn 1625 to worklist
  Adding insn 322 to worklist
  Adding insn 321 to worklist
  Adding insn 319 to worklist
processing block 35 lr out =  0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 311 to worklist
  Adding insn 309 to worklist
processing block 154 lr out =  3 [bx] 6 [bp] 7 [sp] 44 [r15]
processing block 153 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]
  Adding insn 856 to worklist
  Adding insn 855 to worklist
  Adding insn 1068 to worklist
processing block 145 lr out =  3 [bx] 6 [bp] 7 [sp] 44 [r15]
processing block 144 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]
  Adding insn 870 to worklist
  Adding insn 869 to worklist
  Adding insn 1072 to worklist
processing block 152 lr out =  3 [bx] 6 [bp] 7 [sp] 44 [r15]
processing block 151 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]
  Adding insn 884 to worklist
  Adding insn 883 to worklist
  Adding insn 1076 to worklist
processing block 147 lr out =  3 [bx] 6 [bp] 7 [sp] 44 [r15]
processing block 146 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]
  Adding insn 898 to worklist
  Adding insn 897 to worklist
  Adding insn 1080 to worklist
processing block 59 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 564 to worklist
  Adding insn 1421 to worklist
processing block 58 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 57 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 965 to worklist
processing block 56 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 55 lr out =  0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 1172 to worklist
processing block 54 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 53 lr out =  0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 549 to worklist
  Adding insn 1185 to worklist
  Adding insn 548 to worklist
processing block 52 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 51 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 541 to worklist
processing block 50 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 538 to worklist
  Adding insn 537 to worklist
processing block 49 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 531 to worklist
  Adding insn 1435 to worklist
  Adding insn 528 to worklist
processing block 48 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 526 to worklist
  Adding insn 1623 to worklist
  Adding insn 1436 to worklist
  Adding insn 517 to worklist
  Adding insn 516 to worklist
processing block 47 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 513 to worklist
processing block 46 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 506 to worklist
processing block 45 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 503 to worklist
  Adding insn 502 to worklist
processing block 134 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 133 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 493 to worklist
processing block 132 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 131 lr out =  0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 1170 to worklist
processing block 130 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 129 lr out =  0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 481 to worklist
  Adding insn 1184 to worklist
  Adding insn 480 to worklist
processing block 128 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 127 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 473 to worklist
processing block 126 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 470 to worklist
  Adding insn 469 to worklist
processing block 125 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 463 to worklist
  Adding insn 1437 to worklist
  Adding insn 461 to worklist
processing block 124 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 458 to worklist
processing block 123 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 122 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 450 to worklist
processing block 121 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 120 lr out =  0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 1168 to worklist
processing block 119 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 118 lr out =  0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 438 to worklist
  Adding insn 1173 to worklist
  Adding insn 437 to worklist
processing block 117 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 116 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 430 to worklist
processing block 115 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 427 to worklist
  Adding insn 426 to worklist
processing block 114 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 420 to worklist
  Adding insn 1438 to worklist
  Adding insn 418 to worklist
processing block 44 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 411 to worklist
  Adding insn 409 to worklist
  Adding insn 407 to worklist
processing block 113 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 112 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 394 to worklist
processing block 111 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 952 to worklist
processing block 110 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 109 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 386 to worklist
processing block 108 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 107 lr out =  0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 380 to worklist
processing block 106 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 135 lr out =  0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 1624 to worklist
processing block 105 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 373 to worklist
processing block 104 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 370 to worklist
  Adding insn 368 to worklist
processing block 103 lr out =  0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 365 to worklist
processing block 102 lr out =  0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 362 to worklist
  Adding insn 361 to worklist
  Adding insn 360 to worklist
processing block 101 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 356 to worklist
  Adding insn 1439 to worklist
processing block 43 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 403 to worklist
processing block 42 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 352 to worklist
processing block 41 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 306 to worklist
processing block 40 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 302 to worklist
  Adding insn 300 to worklist
processing block 34 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 1446 to worklist
  Adding insn 1445 to worklist
  Adding insn 1444 to worklist
processing block 33 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 1626 to worklist
  Adding insn 293 to worklist
  Adding insn 1447 to worklist
  Adding insn 290 to worklist
  Adding insn 1088 to worklist
processing block 32 lr out =  0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 286 to worklist
  Adding insn 284 to worklist
processing block 31 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 281 to worklist
  Adding insn 280 to worklist
  Adding insn 279 to worklist
processing block 30 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 273 to worklist
processing block 25 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 270 to worklist
processing block 24 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 23 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 263 to worklist
processing block 22 lr out =  3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 21 lr out =  0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 257 to worklist
processing block 20 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 253 to worklist
processing block 95 lr out =  0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 1627 to worklist
processing block 19 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 250 to worklist
processing block 18 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 247 to worklist
processing block 17 lr out =  0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 242 to worklist
processing block 16 lr out =  0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 126 to worklist
  Adding insn 125 to worklist
  Adding insn 124 to worklist
processing block 15 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 119 to worklist
  Adding insn 118 to worklist
  Adding insn 116 to worklist
  Adding insn 1457 to worklist
  Adding insn 113 to worklist
  Adding insn 112 to worklist
processing block 89 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 88 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 210 to worklist
  Adding insn 209 to worklist
  Adding insn 1450 to worklist
  Adding insn 206 to worklist
processing block 14 lr out =  0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 109 to worklist
  Adding insn 106 to worklist
  Adding insn 105 to worklist
  Adding insn 104 to worklist
processing block 94 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 93 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 222 to worklist
  Adding insn 221 to worklist
  Adding insn 1449 to worklist
  Adding insn 218 to worklist
processing block 13 lr out =  3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 101 to worklist
  Adding insn 98 to worklist
  Adding insn 97 to worklist
  Adding insn 96 to worklist
processing block 12 lr out =  0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 93 to worklist
  Adding insn 90 to worklist
  Adding insn 89 to worklist
  Adding insn 88 to worklist
processing block 11 lr out =  3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 85 to worklist
  Adding insn 82 to worklist
  Adding insn 81 to worklist
  Adding insn 80 to worklist
processing block 10 lr out =  0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 77 to worklist
  Adding insn 74 to worklist
  Adding insn 73 to worklist
  Adding insn 72 to worklist
processing block 9 lr out =  3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 69 to worklist
  Adding insn 66 to worklist
  Adding insn 65 to worklist
  Adding insn 64 to worklist
processing block 8 lr out =  0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 61 to worklist
  Adding insn 58 to worklist
  Adding insn 57 to worklist
  Adding insn 56 to worklist
processing block 7 lr out =  3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 53 to worklist
  Adding insn 50 to worklist
  Adding insn 49 to worklist
  Adding insn 48 to worklist
processing block 85 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
processing block 84 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 235 to worklist
  Adding insn 234 to worklist
  Adding insn 233 to worklist
  Adding insn 1448 to worklist
  Adding insn 230 to worklist
processing block 6 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 45 to worklist
  Adding insn 42 to worklist
  Adding insn 41 to worklist
processing block 5 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
  Adding insn 38 to worklist
  Adding insn 1166 to worklist
processing block 4 lr out =  0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 34 to worklist
  Adding insn 32 to worklist
processing block 3 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
  Adding insn 29 to worklist
  Adding insn 28 to worklist
  Adding insn 26 to worklist
  Adding insn 1458 to worklist
processing block 2 lr out =  3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14]
  Adding insn 22 to worklist
  Adding insn 20 to worklist
  Adding insn 8 to worklist
  Adding insn 7 to worklist
  Adding insn 4 to worklist
  Adding insn 3 to worklist
  Adding insn 2 to worklist
  Adding insn 1465 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 157 n_edges 255 count 166 (  1.1)
;;   ======================================================
;;   -- basic block 2 from 1459 to 23 -- after reload
;;   ======================================================

;;	  0--> b  0: i1459 [--sp]=r15                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i1460 [--sp]=r14                              :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i   3 r14=si                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i1461 [--sp]=r13                              :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i1462 [--sp]=r12                              :athlon-direct,athlon-agu,athlon-store
;;	  1--> b  0: i   4 r13=dx                                  :athlon-direct,athlon-ieu
;;	  2--> b  0: i1463 [--sp]=bp                               :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i1464 [--sp]=bx                               :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i   2 bp=di                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i   7 bx=r9                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i1465 {sp=sp-0xe8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  4--> b  0: i  18 [di]=0                                  :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i  22 di=r9                                   :athlon-direct,athlon-ieu
;;	  5--> b  0: i   8 r12=[sp+0x120]                          :athlon-direct,athlon-load
;;	  5--> b  0: i   5 [sp+0x10]=cx                            :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i  11 {[sp+0xd8]=unspec[0x28] 79;ax=0;clobber flags;}:athlon-vector,athlon-ieu,athlon-ieu
;;	  7--> b  0: i  20 ax=[r9]                                 :athlon-direct,athlon-load
;;	  7--> b  0: i   6 [sp+0x28]=r8                            :athlon-direct,athlon-agu,athlon-store
;;	  8--> b  0: i  19 [r12+0x10]=0                            :athlon-direct,athlon-agu,athlon-store
;;	 10--> b  0: i  23 call [[ax+0x18]]                        :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 1459
;;   new tail = 23

;;   ======================================================
;;   -- basic block 3 from 1458 to 30 -- after reload
;;   ======================================================

;;	  0--> b  0: i1458 r15=sp+0xb0                             :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i  26 dx=[r12+0x8]                            :athlon-direct,athlon-load
;;	  0--> b  0: i  28 si=r14                                  :athlon-direct,athlon-ieu
;;	  2--> b  0: i  29 di=r15                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i  30 call [`_ZN7leveldb13TableFileNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm']:athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 1458
;;   new tail = 30

;;   ======================================================
;;   -- basic block 4 from 32 to 35 -- after reload
;;   ======================================================

;;	  0--> b  0: i  32 ax=[bx]                                 :athlon-direct,athlon-load
;;	  0--> b  0: i  34 di=bx                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i  35 ax=call [[ax+0x10]]                     :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 32
;;   new tail = 35

;;   ======================================================
;;   -- basic block 5 from 1166 to 39 -- after reload
;;   ======================================================

;;	  0--> b  0: i  38 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  0--> b  0: i1166 r14=sp+0x80                             :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i  39 pc={(flags==0)?L576:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 38
;;   new tail = 39

;;   ======================================================
;;   -- basic block 6 from 41 to 46 -- after reload
;;   ======================================================

;;	  0--> b  0: i  41 ax=[r13]                                :athlon-direct,athlon-load
;;	  3--> b  0: i  42 ax=[ax+0x20]                            :athlon-direct,athlon-load
;;	  3--> b  0: i  45 flags=cmp(ax,[const(unspec[`_ZN7leveldb10EnvWrapper15NewWritableFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPPNS_12WritableFileE'] 2)]):athlon-direct,athlon-load,athlon-ieu
;;	  7--> b  0: i  46 pc={(flags!=0)?L228:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 41
;;   new tail = 46

;;   ======================================================
;;   -- basic block 7 from 48 to 54 -- after reload
;;   ======================================================

;;	  0--> b  0: i  48 si=[r13+0x8]                            :athlon-direct,athlon-load
;;	  3--> b  0: i  49 dx=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  50 r8=[dx+0x20]                            :athlon-direct,athlon-load
;;	  9--> b  0: i  53 flags=cmp(r8,ax)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i  54 pc={(flags!=0)?L216:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 48
;;   new tail = 54

;;   ======================================================
;;   -- basic block 8 from 56 to 62 -- after reload
;;   ======================================================

;;	  0--> b  0: i  56 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  57 ax=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  58 ax=[ax+0x20]                            :athlon-direct,athlon-load
;;	  9--> b  0: i  61 flags=cmp(ax,r8)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i  62 pc={(flags!=0)?L204:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 56
;;   new tail = 62

;;   ======================================================
;;   -- basic block 9 from 64 to 70 -- after reload
;;   ======================================================

;;	  0--> b  0: i  64 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  65 dx=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  66 r8=[dx+0x20]                            :athlon-direct,athlon-load
;;	  9--> b  0: i  69 flags=cmp(r8,ax)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i  70 pc={(flags!=0)?L216:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 64
;;   new tail = 70

;;   ======================================================
;;   -- basic block 10 from 72 to 78 -- after reload
;;   ======================================================

;;	  0--> b  0: i  72 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  73 ax=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  74 ax=[ax+0x20]                            :athlon-direct,athlon-load
;;	  9--> b  0: i  77 flags=cmp(ax,r8)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i  78 pc={(flags!=0)?L204:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 72
;;   new tail = 78

;;   ======================================================
;;   -- basic block 11 from 80 to 86 -- after reload
;;   ======================================================

;;	  0--> b  0: i  80 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  81 dx=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  82 r8=[dx+0x20]                            :athlon-direct,athlon-load
;;	  9--> b  0: i  85 flags=cmp(r8,ax)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i  86 pc={(flags!=0)?L216:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 80
;;   new tail = 86

;;   ======================================================
;;   -- basic block 12 from 88 to 94 -- after reload
;;   ======================================================

;;	  0--> b  0: i  88 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  89 ax=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  90 ax=[ax+0x20]                            :athlon-direct,athlon-load
;;	  9--> b  0: i  93 flags=cmp(ax,r8)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i  94 pc={(flags!=0)?L204:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 88
;;   new tail = 94

;;   ======================================================
;;   -- basic block 13 from 96 to 102 -- after reload
;;   ======================================================

;;	  0--> b  0: i  96 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i  97 dx=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i  98 r8=[dx+0x20]                            :athlon-direct,athlon-load
;;	  9--> b  0: i 101 flags=cmp(r8,ax)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i 102 pc={(flags!=0)?L216:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 96
;;   new tail = 102

;;   ======================================================
;;   -- basic block 14 from 104 to 110 -- after reload
;;   ======================================================

;;	  0--> b  0: i 104 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i 105 ax=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i 106 ax=[ax+0x20]                            :athlon-direct,athlon-load
;;	  9--> b  0: i 109 flags=cmp(ax,r8)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i 110 pc={(flags!=0)?L204:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 104
;;   new tail = 110

;;   ======================================================
;;   -- basic block 15 from 112 to 122 -- after reload
;;   ======================================================

;;	  0--> b  0: i 112 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  0--> b  0: i1457 r14=sp+0x80                             :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 113 di=sp+0x30                              :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i 119 dx=r15                                  :athlon-direct,athlon-ieu
;;	  2--> b  0: i 118 cx=r14                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i 116 ax=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i 122 call [[ax+0x20]]                        :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 112
;;   new tail = 122

;;   ======================================================
;;   -- basic block 16 from 124 to 127 -- after reload
;;   ======================================================

;;	  0--> b  0: i 124 di=[bp]                                 :athlon-direct,athlon-load
;;	  0--> b  0: i 125 ax=[sp+0x30]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 126 flags=cmp(di,ax)                        :athlon-direct,athlon-ieu
;;	  4--> b  0: i 127 pc={(flags==0)?L261:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 124
;;   new tail = 127

;;   ======================================================
;;   -- basic block 17 from 242 to 243 -- after reload
;;   ======================================================

;;	  0--> b  0: i 242 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 243 pc={(flags==0)?L248:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 242
;;   new tail = 243

;;   ======================================================
;;   -- basic block 18 from 246 to 247 -- after reload
;;   ======================================================

;;	  0--> b  0: i 246 call [`_ZdaPv']                         :athlon-vector,athlon-ieu
;;	  1--> b  0: i 247 ax=[sp+0x30]                            :athlon-direct,athlon-load
;;	Ready list (final):  
;;   total time = 1
;;   new head = 246
;;   new tail = 247

;;   ======================================================
;;   -- basic block 19 from 250 to 251 -- after reload
;;   ======================================================

;;	  0--> b  0: i 250 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 251 pc={(flags==0)?L1003:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 250
;;   new tail = 251

;;   ======================================================
;;   -- basic block 20 from 253 to 254 -- after reload
;;   ======================================================

;;	  0--> b  0: i 253 di=ax                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 254 ax=call [`_ZN7leveldb6Status9CopyStateEPKc']:athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 253
;;   new tail = 254

;;   ======================================================
;;   -- basic block 21 from 257 to 257 -- after reload
;;   ======================================================

;;	  0--> b  0: i 257 di=[sp+0x30]                            :athlon-direct,athlon-load
;;	Ready list (final):  
;;   total time = 0
;;   new head = 257
;;   new tail = 257

;;   ======================================================
;;   -- basic block 22 from 260 to 260 -- after reload
;;   ======================================================

;;	  0--> b  0: i 260 [bp]=ax                                 :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 0
;;   new head = 260
;;   new tail = 260

;;   ======================================================
;;   -- basic block 23 from 263 to 264 -- after reload
;;   ======================================================

;;	  0--> b  0: i 263 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 264 pc={(flags==0)?L268:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 263
;;   new tail = 264

;;   ======================================================
;;   -- basic block 24 from 267 to 267 -- after reload
;;   ======================================================

;;	  0--> b  0: i 267 call [`_ZdaPv']                         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 267
;;   new tail = 267

;;   ======================================================
;;   -- basic block 25 from 270 to 271 -- after reload
;;   ======================================================

;;	  0--> b  0: i 270 flags=cmp([bp],0)                       :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 271 pc={(flags==0)?L1628:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 270
;;   new tail = 271

;;   ======================================================
;;   -- basic block 26 from 819 to 823 -- after reload
;;   ======================================================

;;	  0--> b  0: i 819 di=[sp+0xb0]                            :athlon-direct,athlon-load
;;	  0--> b  0: i1423 ax=r15+0x10                             :athlon-direct,athlon-agu,nothing
;;	  3--> b  0: i 822 flags=cmp(di,ax)                        :athlon-direct,athlon-ieu
;;	  4--> b  0: i 823 pc={(flags==0)?L989:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 819
;;   new tail = 823

;;   ======================================================
;;   -- basic block 27 from 826 to 826 -- after reload
;;   ======================================================

;;	  0--> b  0: i 826 call [`_ZdlPv']                         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 826
;;   new tail = 826

;;   ======================================================
;;   -- basic block 28 from 991 to 994 -- after reload
;;   ======================================================

;;	  0--> b  0: i 993 {flags=unspec[[sp+0xd8],0x28] 80;clobber cx;}:athlon-vector,athlon-ieu,athlon-ieu
;;	  1--> b  0: i 991 ax=bp                                   :athlon-direct,athlon-ieu
;;	  2--> b  0: i 994 pc={(flags!=0)?L1629:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 2
;;   new head = 993
;;   new tail = 994

;;   ======================================================
;;   -- basic block 29 from 998 to 1477 -- after reload
;;   ======================================================

;;	  0--> b  0: i1470 {sp=sp+0xe8;clobber flags;clobber [scratch];}:athlon-direct,athlon-ieu
;;	  0--> b  0: i 998 use ax                                  :nothing
;;	  1--> b  0: i1471 bx=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  2--> b  0: i1472 bp=[sp++]                               :athlon-vector,athlon-load,athlon-ieu
;;	  3--> b  0: i1473 r12=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  4--> b  0: i1474 r13=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  5--> b  0: i1475 r14=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  6--> b  0: i1476 r15=[sp++]                              :athlon-vector,athlon-load,athlon-ieu
;;	  7--> b  0: i1477 simple_return                           :athlon-vector,athlon-ieu,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 1691
;;   new tail = 1477

;;   ======================================================
;;   -- basic block 30 from 273 to 274 -- after reload
;;   ======================================================

;;	  0--> b  0: i 273 di=0x8                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i 274 ax=call [`_Znwm']                       :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 273
;;   new tail = 274

;;   ======================================================
;;   -- basic block 31 from 1417 to 282 -- after reload
;;   ======================================================

;;	  0--> b  0: i 279 dx=[sp+0x80]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 280 si=[sp+0x10]                            :athlon-direct,athlon-load
;;	  0--> b  0: i 281 di=ax                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i1417 [sp+0x8]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	  3--> b  0: i 282 call [`_ZN7leveldb12TableBuilderC1ERKNS_7OptionsEPNS_12WritableFileE']:athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 279
;;   new tail = 282

;;   ======================================================
;;   -- basic block 32 from 284 to 287 -- after reload
;;   ======================================================

;;	  0--> b  0: i 284 ax=[bx]                                 :athlon-direct,athlon-load
;;	  0--> b  0: i 286 di=bx                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i 287 ax=call [[ax+0x40]]                     :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 284
;;   new tail = 287

;;   ======================================================
;;   -- basic block 33 from 1088 to 297 -- after reload
;;   ======================================================

;;	  0--> b  0: i1088 r8=dx                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i 290 dx=[r12+0x20]                           :athlon-direct,athlon-load
;;	  0--> b  0: i1447 di=r12+0x18                             :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i 293 cx=ax                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i1626 {si=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i 297 ax=call [`_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm']:athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 1088
;;   new tail = 297

;;   ======================================================
;;   -- basic block 34 from 1444 to 1630 -- after reload
;;   ======================================================

;;	  0--> b  0: i1444 ax=r12+0x38                             :athlon-direct,athlon-agu,nothing
;;	  2--> b  0: i1412 [sp+0x10]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i1445 ax=sp+0xa0                              :athlon-direct,athlon-agu,nothing
;;	  4--> b  0: i1413 [sp+0x18]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i1446 ax=sp+0x90                              :athlon-direct,athlon-agu,nothing
;;	  6--> b  0: i1414 [sp+0x20]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  6--> b  0: i1630 pc=L347                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 1444
;;   new tail = 1630

;;   ======================================================
;;   -- basic block 35 from 309 to 312 -- after reload
;;   ======================================================

;;	  0--> b  0: i 309 ax=[bx]                                 :athlon-direct,athlon-load
;;	  0--> b  0: i 311 di=bx                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i 312 ax=call [[ax+0x40]]                     :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 309
;;   new tail = 312

;;   ======================================================
;;   -- basic block 36 from 1442 to 326 -- after reload
;;   ======================================================

;;	  0--> b  0: i1443 [sp+0x98]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i1442 [sp+0x90]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i1625 {si=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 319 dx=[r12+0x40]                           :athlon-direct,athlon-load
;;	  1--> b  0: i 321 r8=[sp+0x98]                            :athlon-direct,athlon-load
;;	  2--> b  0: i 322 cx=[sp+0x90]                            :athlon-direct,athlon-load
;;	  2--> b  0: i 325 di=[sp+0x10]                            :athlon-direct,athlon-load
;;	  5--> b  0: i 326 ax=call [`_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm']:athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 5
;;   new head = 1443
;;   new tail = 326

;;   ======================================================
;;   -- basic block 37 from 328 to 331 -- after reload
;;   ======================================================

;;	  0--> b  0: i 328 ax=[bx]                                 :athlon-direct,athlon-load
;;	  0--> b  0: i 330 di=bx                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i 331 ax=call [[ax+0x48]]                     :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 328
;;   new tail = 331

;;   ======================================================
;;   -- basic block 38 from 1440 to 341 -- after reload
;;   ======================================================

;;	  0--> b  0: i1441 [sp+0xa8]=dx                            :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i 339 si=[sp+0x20]                            :athlon-direct,athlon-load
;;	  1--> b  0: i 338 dx=[sp+0x18]                            :athlon-direct,athlon-load
;;	  1--> b  0: i 340 di=[sp+0x8]                             :athlon-direct,athlon-load
;;	  2--> b  0: i1440 [sp+0xa0]=ax                            :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 341 call [`_ZN7leveldb12TableBuilder3AddERKNS_5SliceES3_']:athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 1441
;;   new tail = 341

;;   ======================================================
;;   -- basic block 39 from 343 to 346 -- after reload
;;   ======================================================

;;	  0--> b  0: i 343 ax=[bx]                                 :athlon-direct,athlon-load
;;	  0--> b  0: i 345 di=bx                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i 346 call [[ax+0x30]]                        :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 343
;;   new tail = 346

;;   ======================================================
;;   -- basic block 40 from 300 to 303 -- after reload
;;   ======================================================

;;	  0--> b  0: i 300 ax=[bx]                                 :athlon-direct,athlon-load
;;	  0--> b  0: i 302 di=bx                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i 303 ax=call [[ax+0x10]]                     :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 300
;;   new tail = 303

;;   ======================================================
;;   -- basic block 41 from 306 to 307 -- after reload
;;   ======================================================

;;	  0--> b  0: i 306 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 307 pc={(flags!=0)?L1632:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 306
;;   new tail = 307

;;   ======================================================
;;   -- basic block 42 from 352 to 353 -- after reload
;;   ======================================================

;;	  0--> b  0: i 352 flags=cmp([bp],0)                       :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 353 pc={(flags==0)?L1633:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 352
;;   new tail = 353

;;   ======================================================
;;   -- basic block 43 from 403 to 404 -- after reload
;;   ======================================================

;;	  0--> b  0: i 403 di=[sp+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i 404 call [`_ZN7leveldb12TableBuilder7AbandonEv']:athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 403
;;   new tail = 404

;;   ======================================================
;;   -- basic block 44 from 407 to 412 -- after reload
;;   ======================================================

;;	  0--> b  0: i 407 di=[sp+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i 408 call [`_ZN7leveldb12TableBuilderD1Ev']  :athlon-vector,athlon-ieu
;;	  4--> b  0: i 409 di=[sp+0x8]                             :athlon-direct,athlon-load
;;	  7--> b  0: i 410 call [`_ZdlPv']                         :athlon-vector,athlon-ieu
;;	  8--> b  0: i 411 flags=cmp([bp],0)                       :athlon-direct,athlon-load,athlon-ieu
;;	 12--> b  0: i 412 pc={(flags==0)?L1634:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 12
;;   new head = 407
;;   new tail = 412

;;   ======================================================
;;   -- basic block 45 from 502 to 504 -- after reload
;;   ======================================================

;;	  0--> b  0: i 502 di=[sp+0x80]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 503 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i 504 pc={(flags==0)?L510:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 502
;;   new tail = 504

;;   ======================================================
;;   -- basic block 46 from 506 to 509 -- after reload
;;   ======================================================

;;	  0--> b  0: i 506 ax=[di]                                 :athlon-direct,athlon-load
;;	  3--> b  0: i 509 call [[ax+0x8]]                         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 506
;;   new tail = 509

;;   ======================================================
;;   -- basic block 47 from 512 to 514 -- after reload
;;   ======================================================

;;	  0--> b  0: i 513 flags=cmp([bp],0)                       :athlon-direct,athlon-load,athlon-ieu
;;	  0--> b  0: i 512 [sp+0x80]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 514 pc={(flags!=0)?L576:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 513
;;   new tail = 514

;;   ======================================================
;;   -- basic block 48 from 516 to 527 -- after reload
;;   ======================================================

;;	  0--> b  0: i 516 cx=[r12+0x10]                           :athlon-direct,athlon-load
;;	  0--> b  0: i 517 dx=[r12+0x8]                            :athlon-direct,athlon-load
;;	  0--> b  0: i1436 si=sp+0xa0                              :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i 526 di=[sp+0x28]                            :athlon-direct,athlon-load
;;	  1--> b  0: i1623 {r8=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 518 [sp+0xa0]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 519 [sp+0xa1]=0x1                           :athlon-direct,athlon-agu,athlon-store
;;	  2--> b  0: i 520 [sp+0xa8]=0                             :athlon-direct,athlon-agu,athlon-store
;;	  4--> b  0: i 527 ax=call [`_ZN7leveldb10TableCache11NewIteratorERKNS_11ReadOptionsEmmPPNS_5TableE']:athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 516
;;   new tail = 527

;;   ======================================================
;;   -- basic block 49 from 528 to 535 -- after reload
;;   ======================================================

;;	  0--> b  0: i 528 si=ax                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i1420 [sp+0x8]=ax                             :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i 531 ax=[ax]                                 :athlon-direct,athlon-load
;;	  1--> b  0: i1435 di=sp+0x70                              :athlon-direct,athlon-agu,nothing
;;	  3--> b  0: i 535 call [[ax+0x50]]                        :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 528
;;   new tail = 535

;;   ======================================================
;;   -- basic block 50 from 537 to 539 -- after reload
;;   ======================================================

;;	  0--> b  0: i 537 di=[bp]                                 :athlon-direct,athlon-load
;;	  0--> b  0: i 538 flags=cmp(di,[sp+0x70])                 :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 539 pc={(flags==0)?L961:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 537
;;   new tail = 539

;;   ======================================================
;;   -- basic block 51 from 541 to 542 -- after reload
;;   ======================================================

;;	  0--> b  0: i 541 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 542 pc={(flags==0)?L546:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 541
;;   new tail = 542

;;   ======================================================
;;   -- basic block 52 from 545 to 545 -- after reload
;;   ======================================================

;;	  0--> b  0: i 545 call [`_ZdaPv']                         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 545
;;   new tail = 545

;;   ======================================================
;;   -- basic block 53 from 548 to 550 -- after reload
;;   ======================================================

;;	  0--> b  0: i 548 di=[sp+0x70]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 549 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  3--> b  0: i1185 ax=di                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i 550 pc={(flags==0)?L555:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 548
;;   new tail = 550

;;   ======================================================
;;   -- basic block 54 from 553 to 553 -- after reload
;;   ======================================================

;;	  0--> b  0: i 553 ax=call [`_ZN7leveldb6Status9CopyStateEPKc']:athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 553
;;   new tail = 553

;;   ======================================================
;;   -- basic block 55 from 1172 to 1172 -- after reload
;;   ======================================================

;;	  0--> b  0: i1172 di=[sp+0x70]                            :athlon-direct,athlon-load
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1172
;;   new tail = 1172

;;   ======================================================
;;   -- basic block 56 from 557 to 557 -- after reload
;;   ======================================================

;;	  0--> b  0: i 557 [bp]=ax                                 :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 0
;;   new head = 557
;;   new tail = 557

;;   ======================================================
;;   -- basic block 57 from 965 to 966 -- after reload
;;   ======================================================

;;	  0--> b  0: i 965 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 966 pc={(flags==0)?L958:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 965
;;   new tail = 966

;;   ======================================================
;;   -- basic block 58 from 562 to 562 -- after reload
;;   ======================================================

;;	  0--> b  0: i 562 call [`_ZdaPv']                         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 562
;;   new tail = 562

;;   ======================================================
;;   -- basic block 59 from 1421 to 567 -- after reload
;;   ======================================================

;;	  0--> b  0: i1421 di=[sp+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i 564 ax=[di]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i 567 call [[ax+0x8]]                         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 1421
;;   new tail = 567

;;   ======================================================
;;   -- basic block 60 from 579 to 583 -- after reload
;;   ======================================================

;;	  0--> b  0: i 579 ax=[bx]                                 :athlon-direct,athlon-load
;;	  0--> b  0: i 581 si=bx                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i 582 di=r14                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i 583 call [[ax+0x50]]                        :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 579
;;   new tail = 583

;;   ======================================================
;;   -- basic block 61 from 585 to 587 -- after reload
;;   ======================================================

;;	  0--> b  0: i 585 di=[sp+0x80]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 586 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i 587 pc={(flags==0)?L973:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 585
;;   new tail = 587

;;   ======================================================
;;   -- basic block 62 from 590 to 596 -- after reload
;;   ======================================================

;;	  0--> b  0: i 590 call [`_ZdaPv']                         :athlon-vector,athlon-ieu
;;	  1--> b  0: i 592 ax=[bx]                                 :athlon-direct,athlon-load
;;	  1--> b  0: i1434 di=sp+0x90                              :athlon-direct,athlon-agu,nothing
;;	  1--> b  0: i 594 si=bx                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i 596 call [[ax+0x50]]                        :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 590
;;   new tail = 596

;;   ======================================================
;;   -- basic block 63 from 598 to 601 -- after reload
;;   ======================================================

;;	  0--> b  0: i 598 ax=[bp]                                 :athlon-direct,athlon-load
;;	  0--> b  0: i 599 di=[sp+0x90]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 600 flags=cmp(ax,di)                        :athlon-direct,athlon-ieu
;;	  4--> b  0: i 601 pc={(flags==0)?L622:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 598
;;   new tail = 601

;;   ======================================================
;;   -- basic block 64 from 603 to 604 -- after reload
;;   ======================================================

;;	  0--> b  0: i 603 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 604 pc={(flags==0)?L609:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 603
;;   new tail = 604

;;   ======================================================
;;   -- basic block 65 from 606 to 608 -- after reload
;;   ======================================================

;;	  0--> b  0: i 606 di=ax                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 607 call [`_ZdaPv']                         :athlon-vector,athlon-ieu
;;	  2--> b  0: i 608 di=[sp+0x90]                            :athlon-direct,athlon-load
;;	Ready list (final):  
;;   total time = 2
;;   new head = 606
;;   new tail = 608

;;   ======================================================
;;   -- basic block 66 from 611 to 612 -- after reload
;;   ======================================================

;;	  0--> b  0: i 611 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 612 pc={(flags==0)?L1011:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 611
;;   new tail = 612

;;   ======================================================
;;   -- basic block 67 from 615 to 615 -- after reload
;;   ======================================================

;;	  0--> b  0: i 615 ax=call [`_ZN7leveldb6Status9CopyStateEPKc']:athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 615
;;   new tail = 615

;;   ======================================================
;;   -- basic block 68 from 618 to 618 -- after reload
;;   ======================================================

;;	  0--> b  0: i 618 di=[sp+0x90]                            :athlon-direct,athlon-load
;;	Ready list (final):  
;;   total time = 0
;;   new head = 618
;;   new tail = 618

;;   ======================================================
;;   -- basic block 69 from 621 to 621 -- after reload
;;   ======================================================

;;	  0--> b  0: i 621 [bp]=ax                                 :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 0
;;   new head = 621
;;   new tail = 621

;;   ======================================================
;;   -- basic block 70 from 624 to 625 -- after reload
;;   ======================================================

;;	  0--> b  0: i 624 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 625 pc={(flags==0)?L973:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 624
;;   new tail = 625

;;   ======================================================
;;   -- basic block 71 from 628 to 628 -- after reload
;;   ======================================================

;;	  0--> b  0: i 628 call [`_ZdaPv']                         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 628
;;   new tail = 628

;;   ======================================================
;;   -- basic block 72 from 632 to 633 -- after reload
;;   ======================================================

;;	  0--> b  0: i 632 flags=cmp([bp],0)                       :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 633 pc={(flags==0)?L1635:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 632
;;   new tail = 633

;;   ======================================================
;;   -- basic block 73 from 978 to 984 -- after reload
;;   ======================================================

;;	  0--> b  0: i 978 ax=[r13]                                :athlon-direct,athlon-load
;;	  3--> b  0: i 979 ax=[ax+0x38]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 983 flags=cmp(ax,[const(unspec[`_ZN7leveldb10EnvWrapper10DeleteFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE'] 2)]):athlon-direct,athlon-load,athlon-ieu
;;	  7--> b  0: i 984 pc={(flags!=0)?L1636:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 7
;;   new head = 978
;;   new tail = 984

;;   ======================================================
;;   -- basic block 74 from 641 to 647 -- after reload
;;   ======================================================

;;	  0--> b  0: i 641 si=[r13+0x8]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 642 dx=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i 643 cx=[dx+0x38]                            :athlon-direct,athlon-load
;;	  9--> b  0: i 646 flags=cmp(cx,ax)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i 647 pc={(flags!=0)?L792:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 641
;;   new tail = 647

;;   ======================================================
;;   -- basic block 75 from 649 to 655 -- after reload
;;   ======================================================

;;	  0--> b  0: i 649 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i 650 ax=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i 651 ax=[ax+0x38]                            :athlon-direct,athlon-load
;;	  9--> b  0: i 654 flags=cmp(ax,cx)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i 655 pc={(flags!=0)?L782:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 649
;;   new tail = 655

;;   ======================================================
;;   -- basic block 76 from 657 to 663 -- after reload
;;   ======================================================

;;	  0--> b  0: i 657 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i 658 dx=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i 659 cx=[dx+0x38]                            :athlon-direct,athlon-load
;;	  9--> b  0: i 662 flags=cmp(cx,ax)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i 663 pc={(flags!=0)?L792:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 657
;;   new tail = 663

;;   ======================================================
;;   -- basic block 77 from 665 to 671 -- after reload
;;   ======================================================

;;	  0--> b  0: i 665 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i 666 ax=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i 667 ax=[ax+0x38]                            :athlon-direct,athlon-load
;;	  9--> b  0: i 670 flags=cmp(ax,cx)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i 671 pc={(flags!=0)?L782:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 665
;;   new tail = 671

;;   ======================================================
;;   -- basic block 78 from 673 to 679 -- after reload
;;   ======================================================

;;	  0--> b  0: i 673 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i 674 dx=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i 675 cx=[dx+0x38]                            :athlon-direct,athlon-load
;;	  9--> b  0: i 678 flags=cmp(cx,ax)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i 679 pc={(flags!=0)?L792:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 673
;;   new tail = 679

;;   ======================================================
;;   -- basic block 79 from 681 to 687 -- after reload
;;   ======================================================

;;	  0--> b  0: i 681 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i 682 ax=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i 683 ax=[ax+0x38]                            :athlon-direct,athlon-load
;;	  9--> b  0: i 686 flags=cmp(ax,cx)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i 687 pc={(flags!=0)?L782:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 681
;;   new tail = 687

;;   ======================================================
;;   -- basic block 80 from 689 to 695 -- after reload
;;   ======================================================

;;	  0--> b  0: i 689 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i 690 dx=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i 691 cx=[dx+0x38]                            :athlon-direct,athlon-load
;;	  9--> b  0: i 694 flags=cmp(cx,ax)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i 695 pc={(flags!=0)?L792:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 689
;;   new tail = 695

;;   ======================================================
;;   -- basic block 81 from 697 to 703 -- after reload
;;   ======================================================

;;	  0--> b  0: i 697 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i 698 ax=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i 699 ax=[ax+0x38]                            :athlon-direct,athlon-load
;;	  9--> b  0: i 702 flags=cmp(ax,cx)                        :athlon-direct,athlon-ieu
;;	 10--> b  0: i 703 pc={(flags!=0)?L782:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 10
;;   new head = 697
;;   new tail = 703

;;   ======================================================
;;   -- basic block 82 from 705 to 713 -- after reload
;;   ======================================================

;;	  0--> b  0: i 705 si=[si+0x8]                             :athlon-direct,athlon-load
;;	  0--> b  0: i1433 di=sp+0xa0                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 710 dx=r15                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i 708 ax=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i 713 call [[ax+0x38]]                        :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 705
;;   new tail = 713

;;   ======================================================
;;   -- basic block 83 from 1638 to 1638 -- after reload
;;   ======================================================

;;	  0--> b  0: i1638 pc=L729                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1638
;;   new tail = 1638

;;   ======================================================
;;   -- basic block 84 from 230 to 237 -- after reload
;;   ======================================================

;;	  0--> b  0: i1448 r14=sp+0x80                             :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 230 di=sp+0x30                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 234 dx=r15                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i 235 si=r13                                  :athlon-direct,athlon-ieu
;;	  2--> b  0: i 233 cx=r14                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i 237 call [ax]                               :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 1448
;;   new tail = 237

;;   ======================================================
;;   -- basic block 85 from 1641 to 1641 -- after reload
;;   ======================================================

;;	  0--> b  0: i1641 pc=L141                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1641
;;   new tail = 1641

;;   ======================================================
;;   -- basic block 86 from 635 to 636 -- after reload
;;   ======================================================

;;	  0--> b  0: i 635 flags=cmp([r12+0x10],0)                 :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 636 pc={(flags!=0)?L817:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 635
;;   new tail = 636

;;   ======================================================
;;   -- basic block 87 from 1644 to 1644 -- after reload
;;   ======================================================

;;	  0--> b  0: i1644 pc=L976                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1644
;;   new tail = 1644

;;   ======================================================
;;   -- basic block 88 from 206 to 213 -- after reload
;;   ======================================================

;;	  0--> b  0: i1450 r14=sp+0x80                             :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 206 di=sp+0x30                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 210 dx=r15                                  :athlon-direct,athlon-ieu
;;	  2--> b  0: i 209 cx=r14                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i 213 call [ax]                               :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 1450
;;   new tail = 213

;;   ======================================================
;;   -- basic block 89 from 1647 to 1647 -- after reload
;;   ======================================================

;;	  0--> b  0: i1647 pc=L141                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1647
;;   new tail = 1647

;;   ======================================================
;;   -- basic block 90 from 1425 to 799 -- after reload
;;   ======================================================

;;	  0--> b  0: i1425 di=sp+0xa0                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 796 dx=r15                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i 799 call [cx]                               :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 1425
;;   new tail = 799

;;   ======================================================
;;   -- basic block 91 from 715 to 717 -- after reload
;;   ======================================================

;;	  0--> b  0: i 715 di=[sp+0xa0]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 716 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i 717 pc={(flags==0)?L817:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 715
;;   new tail = 717

;;   ======================================================
;;   -- basic block 92 from 814 to 1649 -- after reload
;;   ======================================================

;;	  0--> b  0: i 814 call [`_ZdaPv']                         :athlon-vector,athlon-ieu
;;	  1--> b  0: i1649 pc=L817                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 814
;;   new tail = 1649

;;   ======================================================
;;   -- basic block 93 from 218 to 225 -- after reload
;;   ======================================================

;;	  0--> b  0: i1449 r14=sp+0x80                             :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 218 di=sp+0x30                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 222 dx=r15                                  :athlon-direct,athlon-ieu
;;	  2--> b  0: i 221 cx=r14                                  :athlon-direct,athlon-ieu
;;	  3--> b  0: i 225 call [r8]                               :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 1449
;;   new tail = 225

;;   ======================================================
;;   -- basic block 94 from 1652 to 1652 -- after reload
;;   ======================================================

;;	  0--> b  0: i1652 pc=L141                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1652
;;   new tail = 1652

;;   ======================================================
;;   -- basic block 95 from 1627 to 1654 -- after reload
;;   ======================================================

;;	  0--> b  0: i1627 {di=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i1654 pc=L258                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1627
;;   new tail = 1654

;;   ======================================================
;;   -- basic block 96 from 1622 to 1656 -- after reload
;;   ======================================================

;;	  0--> b  0: i1622 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i1656 pc=L619                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1622
;;   new tail = 1656

;;   ======================================================
;;   -- basic block 97 from 1426 to 789 -- after reload
;;   ======================================================

;;	  0--> b  0: i1426 di=sp+0xa0                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 786 dx=r15                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i 789 call [ax]                               :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 1426
;;   new tail = 789

;;   ======================================================
;;   -- basic block 98 from 1659 to 1659 -- after reload
;;   ======================================================

;;	  0--> b  0: i1659 pc=L729                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1659
;;   new tail = 1659

;;   ======================================================
;;   -- basic block 99 from 1424 to 808 -- after reload
;;   ======================================================

;;	  0--> b  0: i1424 di=sp+0xa0                              :athlon-direct,athlon-agu,nothing
;;	  0--> b  0: i 805 dx=r15                                  :athlon-direct,athlon-ieu
;;	  0--> b  0: i 806 si=r13                                  :athlon-direct,athlon-ieu
;;	  1--> b  0: i 808 call [ax]                               :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 1424
;;   new tail = 808

;;   ======================================================
;;   -- basic block 100 from 1662 to 1662 -- after reload
;;   ======================================================

;;	  0--> b  0: i1662 pc=L729                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1662
;;   new tail = 1662

;;   ======================================================
;;   -- basic block 101 from 1439 to 358 -- after reload
;;   ======================================================

;;	  0--> b  0: i 356 si=[sp+0x8]                             :athlon-direct,athlon-load
;;	  0--> b  0: i1439 di=sp+0x40                              :athlon-direct,athlon-agu,nothing
;;	  3--> b  0: i 358 call [`_ZN7leveldb12TableBuilder6FinishEv']:athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 356
;;   new tail = 358

;;   ======================================================
;;   -- basic block 102 from 360 to 363 -- after reload
;;   ======================================================

;;	  0--> b  0: i 360 ax=[bp]                                 :athlon-direct,athlon-load
;;	  0--> b  0: i 361 di=[sp+0x40]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 362 flags=cmp(ax,di)                        :athlon-direct,athlon-ieu
;;	  4--> b  0: i 363 pc={(flags==0)?L384:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 360
;;   new tail = 363

;;   ======================================================
;;   -- basic block 103 from 365 to 366 -- after reload
;;   ======================================================

;;	  0--> b  0: i 365 flags=cmp(ax,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 366 pc={(flags==0)?L371:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 365
;;   new tail = 366

;;   ======================================================
;;   -- basic block 104 from 368 to 370 -- after reload
;;   ======================================================

;;	  0--> b  0: i 368 di=ax                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 369 call [`_ZdaPv']                         :athlon-vector,athlon-ieu
;;	  2--> b  0: i 370 di=[sp+0x40]                            :athlon-direct,athlon-load
;;	Ready list (final):  
;;   total time = 2
;;   new head = 368
;;   new tail = 370

;;   ======================================================
;;   -- basic block 105 from 373 to 374 -- after reload
;;   ======================================================

;;	  0--> b  0: i 373 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 374 pc={(flags==0)?L1007:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 373
;;   new tail = 374

;;   ======================================================
;;   -- basic block 106 from 377 to 377 -- after reload
;;   ======================================================

;;	  0--> b  0: i 377 ax=call [`_ZN7leveldb6Status9CopyStateEPKc']:athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 377
;;   new tail = 377

;;   ======================================================
;;   -- basic block 107 from 380 to 380 -- after reload
;;   ======================================================

;;	  0--> b  0: i 380 di=[sp+0x40]                            :athlon-direct,athlon-load
;;	Ready list (final):  
;;   total time = 0
;;   new head = 380
;;   new tail = 380

;;   ======================================================
;;   -- basic block 108 from 383 to 383 -- after reload
;;   ======================================================

;;	  0--> b  0: i 383 [bp]=ax                                 :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 0
;;   new head = 383
;;   new tail = 383

;;   ======================================================
;;   -- basic block 109 from 386 to 387 -- after reload
;;   ======================================================

;;	  0--> b  0: i 386 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 387 pc={(flags==0)?L949:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 386
;;   new tail = 387

;;   ======================================================
;;   -- basic block 110 from 390 to 390 -- after reload
;;   ======================================================

;;	  0--> b  0: i 390 call [`_ZdaPv']                         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 390
;;   new tail = 390

;;   ======================================================
;;   -- basic block 111 from 952 to 953 -- after reload
;;   ======================================================

;;	  0--> b  0: i 952 flags=cmp([bp],0)                       :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 953 pc={(flags!=0)?L405:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 952
;;   new tail = 953

;;   ======================================================
;;   -- basic block 112 from 394 to 395 -- after reload
;;   ======================================================

;;	  0--> b  0: i 394 di=[sp+0x8]                             :athlon-direct,athlon-load
;;	  3--> b  0: i 395 ax=call [`_ZNK7leveldb12TableBuilder8FileSizeEv']:athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 3
;;   new head = 394
;;   new tail = 395

;;   ======================================================
;;   -- basic block 113 from 398 to 1664 -- after reload
;;   ======================================================

;;	  0--> b  0: i 398 [r12+0x10]=ax                           :athlon-direct,athlon-agu,athlon-store
;;	  0--> b  0: i1664 pc=L405                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 398
;;   new tail = 1664

;;   ======================================================
;;   -- basic block 114 from 418 to 424 -- after reload
;;   ======================================================

;;	  0--> b  0: i 418 si=[sp+0x80]                            :athlon-direct,athlon-load
;;	  0--> b  0: i1438 di=sp+0x50                              :athlon-direct,athlon-agu,nothing
;;	  3--> b  0: i 420 ax=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i 424 call [[ax+0x28]]                        :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 418
;;   new tail = 424

;;   ======================================================
;;   -- basic block 115 from 426 to 428 -- after reload
;;   ======================================================

;;	  0--> b  0: i 426 di=[bp]                                 :athlon-direct,athlon-load
;;	  0--> b  0: i 427 flags=cmp(di,[sp+0x50])                 :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 428 pc={(flags==0)?L447:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 426
;;   new tail = 428

;;   ======================================================
;;   -- basic block 116 from 430 to 431 -- after reload
;;   ======================================================

;;	  0--> b  0: i 430 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 431 pc={(flags==0)?L435:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 430
;;   new tail = 431

;;   ======================================================
;;   -- basic block 117 from 434 to 434 -- after reload
;;   ======================================================

;;	  0--> b  0: i 434 call [`_ZdaPv']                         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 434
;;   new tail = 434

;;   ======================================================
;;   -- basic block 118 from 437 to 439 -- after reload
;;   ======================================================

;;	  0--> b  0: i 437 di=[sp+0x50]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 438 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  3--> b  0: i1173 ax=di                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i 439 pc={(flags==0)?L444:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 437
;;   new tail = 439

;;   ======================================================
;;   -- basic block 119 from 442 to 442 -- after reload
;;   ======================================================

;;	  0--> b  0: i 442 ax=call [`_ZN7leveldb6Status9CopyStateEPKc']:athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 442
;;   new tail = 442

;;   ======================================================
;;   -- basic block 120 from 1168 to 1168 -- after reload
;;   ======================================================

;;	  0--> b  0: i1168 di=[sp+0x50]                            :athlon-direct,athlon-load
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1168
;;   new tail = 1168

;;   ======================================================
;;   -- basic block 121 from 446 to 446 -- after reload
;;   ======================================================

;;	  0--> b  0: i 446 [bp]=ax                                 :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 0
;;   new head = 446
;;   new tail = 446

;;   ======================================================
;;   -- basic block 122 from 450 to 451 -- after reload
;;   ======================================================

;;	  0--> b  0: i 450 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 451 pc={(flags==0)?L455:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 450
;;   new tail = 451

;;   ======================================================
;;   -- basic block 123 from 454 to 454 -- after reload
;;   ======================================================

;;	  0--> b  0: i 454 call [`_ZdaPv']                         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 454
;;   new tail = 454

;;   ======================================================
;;   -- basic block 124 from 458 to 459 -- after reload
;;   ======================================================

;;	  0--> b  0: i 458 flags=cmp([bp],0)                       :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 459 pc={(flags!=0)?L500:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 458
;;   new tail = 459

;;   ======================================================
;;   -- basic block 125 from 461 to 467 -- after reload
;;   ======================================================

;;	  0--> b  0: i 461 si=[sp+0x80]                            :athlon-direct,athlon-load
;;	  0--> b  0: i1437 di=sp+0x60                              :athlon-direct,athlon-agu,nothing
;;	  3--> b  0: i 463 ax=[si]                                 :athlon-direct,athlon-load
;;	  6--> b  0: i 467 call [[ax+0x18]]                        :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 6
;;   new head = 461
;;   new tail = 467

;;   ======================================================
;;   -- basic block 126 from 469 to 471 -- after reload
;;   ======================================================

;;	  0--> b  0: i 469 di=[bp]                                 :athlon-direct,athlon-load
;;	  0--> b  0: i 470 flags=cmp(di,[sp+0x60])                 :athlon-direct,athlon-load,athlon-ieu
;;	  4--> b  0: i 471 pc={(flags==0)?L490:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 469
;;   new tail = 471

;;   ======================================================
;;   -- basic block 127 from 473 to 474 -- after reload
;;   ======================================================

;;	  0--> b  0: i 473 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 474 pc={(flags==0)?L478:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 473
;;   new tail = 474

;;   ======================================================
;;   -- basic block 128 from 477 to 477 -- after reload
;;   ======================================================

;;	  0--> b  0: i 477 call [`_ZdaPv']                         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 477
;;   new tail = 477

;;   ======================================================
;;   -- basic block 129 from 480 to 482 -- after reload
;;   ======================================================

;;	  0--> b  0: i 480 di=[sp+0x60]                            :athlon-direct,athlon-load
;;	  3--> b  0: i 481 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  3--> b  0: i1184 ax=di                                   :athlon-direct,athlon-ieu
;;	  4--> b  0: i 482 pc={(flags==0)?L487:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 480
;;   new tail = 482

;;   ======================================================
;;   -- basic block 130 from 485 to 485 -- after reload
;;   ======================================================

;;	  0--> b  0: i 485 ax=call [`_ZN7leveldb6Status9CopyStateEPKc']:athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 485
;;   new tail = 485

;;   ======================================================
;;   -- basic block 131 from 1170 to 1170 -- after reload
;;   ======================================================

;;	  0--> b  0: i1170 di=[sp+0x60]                            :athlon-direct,athlon-load
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1170
;;   new tail = 1170

;;   ======================================================
;;   -- basic block 132 from 489 to 489 -- after reload
;;   ======================================================

;;	  0--> b  0: i 489 [bp]=ax                                 :athlon-direct,athlon-agu,athlon-store
;;	Ready list (final):  
;;   total time = 0
;;   new head = 489
;;   new tail = 489

;;   ======================================================
;;   -- basic block 133 from 493 to 494 -- after reload
;;   ======================================================

;;	  0--> b  0: i 493 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  1--> b  0: i 494 pc={(flags==0)?L500:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 493
;;   new tail = 494

;;   ======================================================
;;   -- basic block 134 from 497 to 1666 -- after reload
;;   ======================================================

;;	  0--> b  0: i 497 call [`_ZdaPv']                         :athlon-vector,athlon-ieu
;;	  1--> b  0: i1666 pc=L500                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 497
;;   new tail = 1666

;;   ======================================================
;;   -- basic block 135 from 1624 to 1668 -- after reload
;;   ======================================================

;;	  0--> b  0: i1624 {ax=0;clobber flags;}                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i1668 pc=L381                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1624
;;   new tail = 1668

;;   ======================================================
;;   -- basic block 136 from 995 to 995 -- after reload
;;   ======================================================

;;	  0--> b  0: i 995 call [`__stack_chk_fail']               :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 995
;;   new tail = 995

;;   ======================================================
;;   -- basic block 137 from 1060 to 835 -- after reload
;;   ======================================================

;;	  0--> b  0: i 833 di=[sp+0x30]                            :athlon-direct,athlon-load
;;	  0--> b  0: i1060 bx=ax                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i 834 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i 835 pc={(flags==0)?L921:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 833
;;   new tail = 835

;;   ======================================================
;;   -- basic block 138 from 916 to 916 -- after reload
;;   ======================================================

;;	  0--> b  0: i 916 call [`_ZdaPv']                         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 916
;;   new tail = 916

;;   ======================================================
;;   -- basic block 139 from 923 to 927 -- after reload
;;   ======================================================

;;	  0--> b  0: i 923 di=[sp+0xb0]                            :athlon-direct,athlon-load
;;	  0--> b  0: i1422 ax=r15+0x10                             :athlon-direct,athlon-agu,nothing
;;	  3--> b  0: i 926 flags=cmp(di,ax)                        :athlon-direct,athlon-ieu
;;	  4--> b  0: i 927 pc={(flags==0)?L935:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 923
;;   new tail = 927

;;   ======================================================
;;   -- basic block 140 from 930 to 930 -- after reload
;;   ======================================================

;;	  0--> b  0: i 930 call [`_ZdlPv']                         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 930
;;   new tail = 930

;;   ======================================================
;;   -- basic block 141 from 937 to 939 -- after reload
;;   ======================================================

;;	  0--> b  0: i 937 di=[bp]                                 :athlon-direct,athlon-load
;;	  3--> b  0: i 938 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i 939 pc={(flags==0)?L943:pc}                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 937
;;   new tail = 939

;;   ======================================================
;;   -- basic block 142 from 942 to 942 -- after reload
;;   ======================================================

;;	  0--> b  0: i 942 call [`_ZdaPv']                         :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 942
;;   new tail = 942

;;   ======================================================
;;   -- basic block 143 from 946 to 947 -- after reload
;;   ======================================================

;;	  0--> b  0: i 946 di=bx                                   :athlon-direct,athlon-ieu
;;	  1--> b  0: i 947 call [`_Unwind_Resume']                 :athlon-vector,athlon-ieu
;;	Ready list (final):  
;;   total time = 1
;;   new head = 946
;;   new tail = 947

;;   ======================================================
;;   -- basic block 144 from 1072 to 871 -- after reload
;;   ======================================================

;;	  0--> b  0: i 869 di=[sp+0x50]                            :athlon-direct,athlon-load
;;	  0--> b  0: i1072 bx=ax                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i 870 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i 871 pc={(flags!=0)?L1535:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 869
;;   new tail = 871

;;   ======================================================
;;   -- basic block 145 from 1671 to 1671 -- after reload
;;   ======================================================

;;	  0--> b  0: i1671 pc=L921                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1671
;;   new tail = 1671

;;   ======================================================
;;   -- basic block 146 from 1080 to 899 -- after reload
;;   ======================================================

;;	  0--> b  0: i 897 di=[sp+0x70]                            :athlon-direct,athlon-load
;;	  0--> b  0: i1080 bx=ax                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i 898 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i 899 pc={(flags!=0)?L1535:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 897
;;   new tail = 899

;;   ======================================================
;;   -- basic block 147 from 1674 to 1674 -- after reload
;;   ======================================================

;;	  0--> b  0: i1674 pc=L921                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1674
;;   new tail = 1674

;;   ======================================================
;;   -- basic block 148 from 1084 to 913 -- after reload
;;   ======================================================

;;	  0--> b  0: i 911 di=[sp+0x90]                            :athlon-direct,athlon-load
;;	  0--> b  0: i1084 bx=ax                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i 912 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i 913 pc={(flags!=0)?L1535:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 911
;;   new tail = 913

;;   ======================================================
;;   -- basic block 149 from 1677 to 1677 -- after reload
;;   ======================================================

;;	  0--> b  0: i1677 pc=L921                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1677
;;   new tail = 1677

;;   ======================================================
;;   -- basic block 150 from 1064 to 1679 -- after reload
;;   ======================================================

;;	  0--> b  0: i 847 di=[sp+0x8]                             :athlon-direct,athlon-load
;;	  0--> b  0: i1064 bx=ax                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i 848 call [`_ZdlPv']                         :athlon-vector,athlon-ieu
;;	  4--> b  0: i1679 pc=L921                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 847
;;   new tail = 1679

;;   ======================================================
;;   -- basic block 151 from 1076 to 885 -- after reload
;;   ======================================================

;;	  0--> b  0: i 883 di=[sp+0x60]                            :athlon-direct,athlon-load
;;	  0--> b  0: i1076 bx=ax                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i 884 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i 885 pc={(flags!=0)?L1535:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 883
;;   new tail = 885

;;   ======================================================
;;   -- basic block 152 from 1682 to 1682 -- after reload
;;   ======================================================

;;	  0--> b  0: i1682 pc=L921                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1682
;;   new tail = 1682

;;   ======================================================
;;   -- basic block 153 from 1068 to 857 -- after reload
;;   ======================================================

;;	  0--> b  0: i 855 di=[sp+0x40]                            :athlon-direct,athlon-load
;;	  0--> b  0: i1068 bx=ax                                   :athlon-direct,athlon-ieu
;;	  3--> b  0: i 856 flags=cmp(di,0)                         :athlon-direct,athlon-ieu
;;	  4--> b  0: i 857 pc={(flags!=0)?L1535:pc}                :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 4
;;   new head = 855
;;   new tail = 857

;;   ======================================================
;;   -- basic block 154 from 1685 to 1685 -- after reload
;;   ======================================================

;;	  0--> b  0: i1685 pc=L921                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1685
;;   new tail = 1685

;;   ======================================================
;;   -- basic block 155 from 1054 to 1687 -- after reload
;;   ======================================================

;;	  0--> b  0: i1054 bx=ax                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i1687 pc=L921                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1054
;;   new tail = 1687

;;   ======================================================
;;   -- basic block 156 from 1048 to 1689 -- after reload
;;   ======================================================

;;	  0--> b  0: i1048 bx=ax                                   :athlon-direct,athlon-ieu
;;	  0--> b  0: i1689 pc=L935                                 :athlon-direct,athlon-ieu
;;	Ready list (final):  
;;   total time = 0
;;   new head = 1048
;;   new tail = 1689



starting the processing of deferred insns
ending the processing of deferred insns


leveldb::Status leveldb::BuildTable(const string&, leveldb::Env*, const leveldb::Options&, leveldb::TableCache*, leveldb::Iterator*, leveldb::FileMetaData*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  exit block uses 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={123d,90u} r1={96d,26u} r2={74d,17u} r3={12d,19u,8e} r4={94d,57u,16e} r5={130d,100u} r6={3d,23u} r7={15d,320u} r8={61d} r9={61d} r10={61d} r11={61d} r12={61d} r13={61d} r14={61d} r15={61d} r16={9u} r17={135d,65u} r18={61d} r19={61d} r20={22e} r21={62d} r22={62d} r23={62d} r24={62d} r25={62d} r26={62d} r27={62d} r28={62d} r29={61d} r30={61d} r31={61d} r32={61d} r33={61d} r34={61d} r35={61d} r36={61d} r37={69d,13u} r38={62d,3u} r39={61d} r40={61d} r41={3d,12u,5e} r42={3d,8u,2e} r43={8d,8u} r44={3d,13u} r45={61d} r46={61d} r47={61d} r48={61d} r49={61d} r50={61d} r51={61d} r52={61d} r53={61d} r54={61d} r55={61d} r56={61d} r57={61d} r58={61d} r59={61d} r60={61d} r61={61d} r62={61d} r63={61d} r64={61d} r65={61d} r66={61d} r67={61d} r68={61d} r69={61d} r70={61d} r71={61d} r72={61d} r73={61d} r74={61d} r75={61d} r76={61d} r77={61d} r78={61d} r79={61d} r80={61d} 
;;    total ref usage 5578{4742d,783u,53e} in 465{404 regular + 61 call} insns.
(note 1 0 16 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 5952, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  kill	 17 [flags]
(note 16 1 9 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 9 16 21 2 NOTE_INSN_FUNCTION_BEG)
(note 21 9 1459 2 NOTE_INSN_DELETED)
(insn/f:TI 1459 21 1460 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 44 r15)) db/builder.cc:22 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 44 r15)
        (nil)))
(insn/f 1460 1459 3 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 43 r14)) db/builder.cc:22 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 43 r14)
        (nil)))
(insn 3 1460 1461 2 (set (reg/v/f:DI 43 r14 [orig:254 dbname ] [254])
        (reg:DI 4 si [ dbname ])) db/builder.cc:22 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 4 si [ dbname ])
        (nil)))
(insn/f:TI 1461 3 1462 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 42 r13)) db/builder.cc:22 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 42 r13)
        (nil)))
(insn/f 1462 1461 4 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 41 r12)) db/builder.cc:22 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 41 r12)
        (nil)))
(insn 4 1462 1463 2 (set (reg/v/f:DI 42 r13 [orig:255 env ] [255])
        (reg:DI 1 dx [ env ])) db/builder.cc:22 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [ env ])
        (nil)))
(insn/f:TI 1463 4 1464 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 6 bp)) db/builder.cc:22 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 6 bp)
        (nil)))
(insn/f 1464 1463 2 2 (set (mem:DI (pre_dec:DI (reg/f:DI 7 sp)) [0  S8 A8])
        (reg:DI 3 bx)) db/builder.cc:22 65 {*pushdi2_rex64}
     (expr_list:REG_DEAD (reg:DI 3 bx)
        (nil)))
(insn 2 1464 7 2 (set (reg/f:DI 6 bp [orig:253 <retval> ] [253])
        (reg:DI 5 di [ .result_ptr ])) db/builder.cc:22 89 {*movdi_internal}
     (nil))
(insn:TI 7 2 1465 2 (set (reg/v/f:DI 3 bx [orig:258 iter ] [258])
        (reg:DI 38 r9 [ iter ])) db/builder.cc:22 89 {*movdi_internal}
     (nil))
(insn/f:TI 1465 7 1466 2 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -232 [0xffffffffffffff18])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) db/builder.cc:22 970 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int -232 [0xffffffffffffff18])))
            (nil))))
(note 1466 1465 18 2 NOTE_INSN_PROLOGUE_END)
(insn 18 1466 22 2 (set (mem/f:DI (reg/f:DI 5 di [orig:253 <retval> ] [253]) [3 s_15(D)->state_+0 S8 A64])
        (const_int 0 [0])) ./include/leveldb/status.h:24 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 5 di [orig:253 <retval> ] [253])
        (nil)))
(insn 22 18 8 2 (set (reg:DI 5 di)
        (reg/f:DI 38 r9 [orig:258 iter ] [258])) db/builder.cc:25 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 38 r9 [orig:258 iter ] [258])
        (nil)))
(insn:TI 8 22 5 2 (set (reg/v/f:DI 41 r12 [orig:259 meta ] [259])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 288 [0x120])) [3 meta+0 S8 A64])) db/builder.cc:22 89 {*movdi_internal}
     (nil))
(insn 5 8 11 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [19 %sfp+-208 S8 A64])
        (reg:DI 2 cx [ options ])) db/builder.cc:22 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 2 cx [ options ])
        (nil)))
(insn:TI 11 5 20 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                        (const_int 216 [0xd8])) [3 D.51474+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [454])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) db/builder.cc:22 986 {stack_tls_protect_set_di}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_UNUSED (reg:DI 0 ax [454])
            (nil))))
(insn:TI 20 11 6 2 (set (reg/f:DI 0 ax [orig:261 iter_19(D)->_vptr.Iterator ] [261])
        (mem/f:DI (reg/f:DI 38 r9 [orig:258 iter ] [258]) [3 iter_19(D)->_vptr.Iterator+0 S8 A64])) db/builder.cc:25 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/v/f:DI 3 bx [orig:258 iter ] [258]) [3 iter_19(D)->_vptr.Iterator+0 S8 A64])
        (nil)))
(insn 6 20 19 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [19 %sfp+-184 S8 A64])
        (reg:DI 37 r8 [ table_cache ])) db/builder.cc:22 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 37 r8 [ table_cache ])
        (nil)))
(insn:TI 19 6 23 2 (set (mem:DI (plus:DI (reg/v/f:DI 41 r12 [orig:259 meta ] [259])
                (const_int 16 [0x10])) [4 meta_17(D)->file_size+0 S8 A64])
        (const_int 0 [0])) db/builder.cc:24 89 {*movdi_internal}
     (nil))
(call_insn:TI 23 19 24 2 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:261 iter_19(D)->_vptr.Iterator ] [261])
                    (const_int 24 [0x18])) [3 MEM[(int (*__vtbl_ptr_type) () *)_20 + 24B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_21;(struct Iterator)iter_19(D)->3) S1 A8])
        (const_int 0 [0])) db/builder.cc:25 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:261 iter_19(D)->_vptr.Iterator ] [261])
            (expr_list:REG_CALL_DECL (nil)
                (expr_list:REG_EH_REGION (const_int 1 [0x1])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       156 (ABNORMAL,ABNORMAL_CALL,EH)
;;              3 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 3, loop depth 0, count 0, freq 5952, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       2 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 7 [sp] 41 [r12] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 1 [dx] 4 [si] 5 [di] 44 [r15]
;; live  kill	
(note 24 23 1458 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1458 24 26 3 (set (reg/f:DI 44 r15 [450])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 176 [0xb0]))) db/builder.cc:27 214 {*leadi}
     (nil))
(insn 26 1458 28 3 (set (reg:DI 1 dx [orig:264 meta_17(D)->number ] [264])
        (mem:DI (plus:DI (reg/v/f:DI 41 r12 [orig:259 meta ] [259])
                (const_int 8 [0x8])) [4 meta_17(D)->number+0 S8 A64])) db/builder.cc:27 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 41 r12 [orig:259 meta ] [259])
                (const_int 8 [0x8])) [4 meta_17(D)->number+0 S8 A64])
        (nil)))
(insn 28 26 29 3 (set (reg:DI 4 si)
        (reg/v/f:DI 43 r14 [orig:254 dbname ] [254])) db/builder.cc:27 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 43 r14 [orig:254 dbname ] [254])
        (nil)))
(insn:TI 29 28 30 3 (set (reg:DI 5 di)
        (reg/f:DI 44 r15 [450])) db/builder.cc:27 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(call_insn:TI 30 29 31 3 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb13TableFileNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm") [flags 0x41]  <function_decl 0x7f0d12a63e58 TableFileName>) [0 TableFileName S1 A8])
        (const_int 0 [0])) db/builder.cc:27 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_EH_REGION (const_int 1 [0x1])
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb13TableFileNameERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEm") [flags 0x41]  <function_decl 0x7f0d12a63e58 TableFileName>)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       156 (ABNORMAL,ABNORMAL_CALL,EH)
;;              4 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 4, loop depth 0, count 0, freq 5952, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       3 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(note 31 30 33 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(note 33 31 32 4 NOTE_INSN_DELETED)
(insn:TI 32 33 34 4 (set (reg/f:DI 0 ax [orig:265 iter_19(D)->_vptr.Iterator ] [265])
        (mem/f:DI (reg/v/f:DI 3 bx [orig:258 iter ] [258]) [3 iter_19(D)->_vptr.Iterator+0 S8 A64])) db/builder.cc:28 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/v/f:DI 3 bx [orig:258 iter ] [258]) [3 iter_19(D)->_vptr.Iterator+0 S8 A64])
        (nil)))
(insn 34 32 35 4 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:258 iter ] [258])) db/builder.cc:28 89 {*movdi_internal}
     (nil))
(call_insn:TI 35 34 1012 4 (set (reg:QI 0 ax)
        (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:265 iter_19(D)->_vptr.Iterator ] [265])
                        (const_int 16 [0x10])) [3 MEM[(int (*__vtbl_ptr_type) () *)_26 + 16B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_27;(const struct Iterator)iter_19(D)->2) S1 A8])
            (const_int 0 [0]))) db/builder.cc:28 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (nil)
            (expr_list:REG_EH_REGION (const_int 2 [0x2])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       155 (ABNORMAL,ABNORMAL_CALL,EH)
;;              5 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 5, loop depth 0, count 0, freq 5952, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags] 43 [r14]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 17 [flags] 43 [r14]
;; live  kill	
(note 1012 35 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn:TI 38 1012 1166 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:94 D.51467 ] [94])
            (const_int 0 [0]))) db/builder.cc:28 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:94 D.51467 ] [94])
        (nil)))
(insn 1166 38 39 5 (set (reg/f:DI 43 r14 [447])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 128 [0x80]))) 214 {*leadi}
     (nil))
(jump_insn:TI 39 1166 40 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 576)
            (pc))) db/builder.cc:28 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 576)
;;  succ:       60 [50.0%]  (CAN_FALLTHRU)
;;              6 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 6, loop depth 0, count 0, freq 2976, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [50.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp] 42 [r13]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(note 40 39 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(note 43 40 41 6 NOTE_INSN_DELETED)
(insn:TI 41 43 42 6 (set (reg/f:DI 0 ax [orig:267 env_30(D)->_vptr.Env ] [267])
        (mem/f:DI (reg/v/f:DI 42 r13 [orig:255 env ] [255]) [3 env_30(D)->_vptr.Env+0 S8 A64])) db/builder.cc:30 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/v/f:DI 42 r13 [orig:255 env ] [255]) [3 env_30(D)->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 42 41 45 6 (set (reg/f:DI 0 ax [orig:96 D.51465 ] [96])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:267 env_30(D)->_vptr.Env ] [267])
                (const_int 32 [0x20])) [3 MEM[(int (*__vtbl_ptr_type) () *)_31 + 32B]+0 S8 A64])) db/builder.cc:30 89 {*movdi_internal}
     (nil))
(insn 45 42 46 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:96 D.51465 ] [96])
            (mem/u/c:DI (const:DI (unspec:DI [
                            (symbol_ref/i:DI ("_ZN7leveldb10EnvWrapper15NewWritableFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPPNS_12WritableFileE") [flags 0x1]  <function_decl 0x7f0d1234cca8 NewWritableFile>)
                        ] UNSPEC_GOTPCREL)) [18  S8 A8]))) 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 46 45 47 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 228)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2000 (nil)))
 -> 228)
;;  succ:       7 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              84 [20.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 7, loop depth 0, count 0, freq 2381, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 42 [r13]
;; lr  def 	 1 [dx] 4 [si] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx] 4 [si] 17 [flags] 37 [r8]
;; live  kill	
(note 47 46 48 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn:TI 48 47 49 7 (set (reg/f:DI 4 si [orig:171 D.51471 ] [171])
        (mem/f:DI (plus:DI (reg/v/f:DI 42 r13 [orig:255 env ] [255])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)env_30(D)].target_+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 49 48 50 7 (set (reg/f:DI 1 dx [orig:270 _223->_vptr.Env ] [270])
        (mem/f:DI (reg/f:DI 4 si [orig:171 D.51471 ] [171]) [3 _223->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:171 D.51471 ] [171]) [3 _223->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 50 49 53 7 (set (reg/f:DI 37 r8 [orig:173 D.51465 ] [173])
        (mem/f:DI (plus:DI (reg/f:DI 1 dx [orig:270 _223->_vptr.Env ] [270])
                (const_int 32 [0x20])) [3 MEM[(int (*__vtbl_ptr_type) () *)_224 + 32B]+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:270 _223->_vptr.Env ] [270])
        (nil)))
(insn:TI 53 50 54 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 37 r8 [orig:173 D.51465 ] [173])
            (reg/f:DI 0 ax [orig:96 D.51465 ] [96]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:96 D.51465 ] [96])
        (nil)))
(jump_insn:TI 54 53 55 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 216)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2000 (nil)))
 -> 216)
;;  succ:       8 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              93 [20.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]

;; basic block 8, loop depth 0, count 0, freq 1905, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
(note 55 54 56 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn:TI 56 55 57 8 (set (reg/f:DI 4 si [orig:175 D.51471 ] [175])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:171 D.51471 ] [171])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_223].target_+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 57 56 58 8 (set (reg/f:DI 0 ax [orig:273 _228->_vptr.Env ] [273])
        (mem/f:DI (reg/f:DI 4 si [orig:175 D.51471 ] [175]) [3 _228->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:175 D.51471 ] [175]) [3 _228->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 58 57 61 8 (set (reg/f:DI 0 ax [orig:177 D.51465 ] [177])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:273 _228->_vptr.Env ] [273])
                (const_int 32 [0x20])) [3 MEM[(int (*__vtbl_ptr_type) () *)_229 + 32B]+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 61 58 62 8 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:177 D.51465 ] [177])
            (reg/f:DI 37 r8 [orig:173 D.51465 ] [173]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:173 D.51465 ] [173])
        (nil)))
(jump_insn:TI 62 61 63 8 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 204)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1999 (nil)))
 -> 204)
;;  succ:       9 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              88 [20.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 9, loop depth 0, count 0, freq 1524, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 1 [dx] 4 [si] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx] 4 [si] 17 [flags] 37 [r8]
;; live  kill	
(note 63 62 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn:TI 64 63 65 9 (set (reg/f:DI 4 si [orig:179 D.51471 ] [179])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:175 D.51471 ] [175])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_228].target_+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 65 64 66 9 (set (reg/f:DI 1 dx [orig:276 _233->_vptr.Env ] [276])
        (mem/f:DI (reg/f:DI 4 si [orig:179 D.51471 ] [179]) [3 _233->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:179 D.51471 ] [179]) [3 _233->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 66 65 69 9 (set (reg/f:DI 37 r8 [orig:181 D.51465 ] [181])
        (mem/f:DI (plus:DI (reg/f:DI 1 dx [orig:276 _233->_vptr.Env ] [276])
                (const_int 32 [0x20])) [3 MEM[(int (*__vtbl_ptr_type) () *)_234 + 32B]+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:276 _233->_vptr.Env ] [276])
        (nil)))
(insn:TI 69 66 70 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 37 r8 [orig:181 D.51465 ] [181])
            (reg/f:DI 0 ax [orig:177 D.51465 ] [177]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:177 D.51465 ] [177])
        (nil)))
(jump_insn:TI 70 69 71 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 216)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2000 (nil)))
 -> 216)
;;  succ:       10 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              93 [20.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]

;; basic block 10, loop depth 0, count 0, freq 1219, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
(note 71 70 72 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn:TI 72 71 73 10 (set (reg/f:DI 4 si [orig:183 D.51471 ] [183])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:179 D.51471 ] [179])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_233].target_+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 73 72 74 10 (set (reg/f:DI 0 ax [orig:279 _238->_vptr.Env ] [279])
        (mem/f:DI (reg/f:DI 4 si [orig:183 D.51471 ] [183]) [3 _238->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:183 D.51471 ] [183]) [3 _238->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 74 73 77 10 (set (reg/f:DI 0 ax [orig:185 D.51465 ] [185])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:279 _238->_vptr.Env ] [279])
                (const_int 32 [0x20])) [3 MEM[(int (*__vtbl_ptr_type) () *)_239 + 32B]+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 77 74 78 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:185 D.51465 ] [185])
            (reg/f:DI 37 r8 [orig:181 D.51465 ] [181]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:181 D.51465 ] [181])
        (nil)))
(jump_insn:TI 78 77 79 10 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 204)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1970 (nil)))
 -> 204)
;;  succ:       11 [80.3%]  (FALLTHRU,CAN_FALLTHRU)
;;              88 [19.7%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 11, loop depth 0, count 0, freq 979, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [80.3%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 1 [dx] 4 [si] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx] 4 [si] 17 [flags] 37 [r8]
;; live  kill	
(note 79 78 80 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn:TI 80 79 81 11 (set (reg/f:DI 4 si [orig:187 D.51471 ] [187])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:183 D.51471 ] [183])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_238].target_+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 81 80 82 11 (set (reg/f:DI 1 dx [orig:282 _243->_vptr.Env ] [282])
        (mem/f:DI (reg/f:DI 4 si [orig:187 D.51471 ] [187]) [3 _243->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:187 D.51471 ] [187]) [3 _243->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 82 81 85 11 (set (reg/f:DI 37 r8 [orig:189 D.51465 ] [189])
        (mem/f:DI (plus:DI (reg/f:DI 1 dx [orig:282 _243->_vptr.Env ] [282])
                (const_int 32 [0x20])) [3 MEM[(int (*__vtbl_ptr_type) () *)_244 + 32B]+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:282 _243->_vptr.Env ] [282])
        (nil)))
(insn:TI 85 82 86 11 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 37 r8 [orig:189 D.51465 ] [189])
            (reg/f:DI 0 ax [orig:185 D.51465 ] [185]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:185 D.51465 ] [185])
        (nil)))
(jump_insn:TI 86 85 87 11 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 216)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1976 (nil)))
 -> 216)
;;  succ:       12 [80.2%]  (FALLTHRU,CAN_FALLTHRU)
;;              93 [19.8%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]

;; basic block 12, loop depth 0, count 0, freq 786, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [80.2%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
(note 87 86 88 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn:TI 88 87 89 12 (set (reg/f:DI 4 si [orig:191 D.51471 ] [191])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:187 D.51471 ] [187])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_243].target_+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 89 88 90 12 (set (reg/f:DI 0 ax [orig:285 _248->_vptr.Env ] [285])
        (mem/f:DI (reg/f:DI 4 si [orig:191 D.51471 ] [191]) [3 _248->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:191 D.51471 ] [191]) [3 _248->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 90 89 93 12 (set (reg/f:DI 0 ax [orig:193 D.51465 ] [193])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:285 _248->_vptr.Env ] [285])
                (const_int 32 [0x20])) [3 MEM[(int (*__vtbl_ptr_type) () *)_249 + 32B]+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 93 90 94 12 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:193 D.51465 ] [193])
            (reg/f:DI 37 r8 [orig:189 D.51465 ] [189]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:189 D.51465 ] [189])
        (nil)))
(jump_insn:TI 94 93 95 12 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 204)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2000 (nil)))
 -> 204)
;;  succ:       13 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              88 [20.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 13, loop depth 0, count 0, freq 628, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       12 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 1 [dx] 4 [si] 17 [flags] 37 [r8]
;; live  in  	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx] 4 [si] 17 [flags] 37 [r8]
;; live  kill	
(note 95 94 96 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn:TI 96 95 97 13 (set (reg/f:DI 4 si [orig:195 D.51471 ] [195])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:191 D.51471 ] [191])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_248].target_+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 97 96 98 13 (set (reg/f:DI 1 dx [orig:288 _253->_vptr.Env ] [288])
        (mem/f:DI (reg/f:DI 4 si [orig:195 D.51471 ] [195]) [3 _253->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:195 D.51471 ] [195]) [3 _253->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 98 97 101 13 (set (reg/f:DI 37 r8 [orig:197 D.51465 ] [197])
        (mem/f:DI (plus:DI (reg/f:DI 1 dx [orig:288 _253->_vptr.Env ] [288])
                (const_int 32 [0x20])) [3 MEM[(int (*__vtbl_ptr_type) () *)_254 + 32B]+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:288 _253->_vptr.Env ] [288])
        (nil)))
(insn:TI 101 98 102 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 37 r8 [orig:197 D.51465 ] [197])
            (reg/f:DI 0 ax [orig:193 D.51465 ] [193]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:193 D.51465 ] [193])
        (nil)))
(jump_insn:TI 102 101 103 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 216)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1940 (nil)))
 -> 216)
;;  succ:       14 [80.6%]  (FALLTHRU,CAN_FALLTHRU)
;;              93 [19.4%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]

;; basic block 14, loop depth 0, count 0, freq 507, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       13 [80.6%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 4 [si] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
(note 103 102 104 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn:TI 104 103 105 14 (set (reg/f:DI 4 si [orig:199 D.51471 ] [199])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:195 D.51471 ] [195])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_253].target_+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 105 104 106 14 (set (reg/f:DI 0 ax [orig:291 _258->_vptr.Env ] [291])
        (mem/f:DI (reg/f:DI 4 si [orig:199 D.51471 ] [199]) [3 _258->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:199 D.51471 ] [199]) [3 _258->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 106 105 109 14 (set (reg/f:DI 0 ax [orig:201 D.51465 ] [201])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:291 _258->_vptr.Env ] [291])
                (const_int 32 [0x20])) [3 MEM[(int (*__vtbl_ptr_type) () *)_259 + 32B]+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn:TI 109 106 110 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:201 D.51465 ] [201])
            (reg/f:DI 37 r8 [orig:197 D.51465 ] [197]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:197 D.51465 ] [197])
        (nil)))
(jump_insn:TI 110 109 111 14 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 204)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1952 (nil)))
 -> 204)
;;  succ:       15 [80.5%]  (FALLTHRU,CAN_FALLTHRU)
;;              88 [19.5%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 15, loop depth 0, count 0, freq 408, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       14 [80.5%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 4 [si] 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 43 [r14] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 43 [r14]
;; live  kill	
(note 111 110 117 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(note 117 111 112 15 NOTE_INSN_DELETED)
(insn:TI 112 117 1457 15 (set (reg/f:DI 4 si [orig:203 D.51471 ] [203])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:199 D.51471 ] [199])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_258].target_+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(insn 1457 112 113 15 (set (reg/f:DI 43 r14 [447])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 128 [0x80]))) ./include/leveldb/env.h:290 214 {*leadi}
     (nil))
(insn 113 1457 119 15 (set (reg/f:DI 5 di [294])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 48 [0x30]))) ./include/leveldb/env.h:290 214 {*leadi}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))
        (nil)))
(insn:TI 119 113 118 15 (set (reg:DI 1 dx)
        (reg/f:DI 44 r15 [450])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(insn:TI 118 119 116 15 (set (reg:DI 2 cx)
        (reg/f:DI 43 r14 [447])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -96 [0xffffffffffffffa0]))
        (nil)))
(insn:TI 116 118 122 15 (set (reg/f:DI 0 ax [orig:297 _263->_vptr.Env ] [297])
        (mem/f:DI (reg/f:DI 4 si [orig:203 D.51471 ] [203]) [3 _263->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (nil))
(call_insn:TI 122 116 141 15 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:297 _263->_vptr.Env ] [297])
                    (const_int 32 [0x20])) [3 MEM[(int (*__vtbl_ptr_type) () *)_264 + 32B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_265;(struct Env)_263->4) S1 A8])
        (const_int 0 [0])) ./include/leveldb/env.h:290 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:297 _263->_vptr.Env ] [297])
                        (expr_list:REG_CALL_DECL (nil)
                            (expr_list:REG_EH_REGION (const_int 2 [0x2])
                                (nil))))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       16 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              155 (ABNORMAL,ABNORMAL_CALL,EH)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 16, loop depth 0, count 0, freq 2976, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              85 [100.0%]  (CAN_FALLTHRU)
;;              89 [100.0%]  (CAN_FALLTHRU)
;;              94 [100.0%]  (CAN_FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
(code_label 141 122 123 16 41 "" [3 uses])
(note 123 141 124 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn:TI 124 123 125 16 (set (reg/f:DI 5 di [orig:206 D.51463 ] [206])
        (mem/f:DI (reg/f:DI 6 bp [orig:253 <retval> ] [253]) [3 s_15(D)->state_+0 S8 A64])) ./include/leveldb/status.h:98 89 {*movdi_internal}
     (nil))
(insn 125 124 126 16 (set (reg/f:DI 0 ax [orig:87 D.51463 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [3 D.44368.state_+0 S8 A128])) ./include/leveldb/status.h:98 89 {*movdi_internal}
     (nil))
(insn:TI 126 125 127 16 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:206 D.51463 ] [206])
            (reg/f:DI 0 ax [orig:87 D.51463 ] [87]))) ./include/leveldb/status.h:98 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 127 126 241 16 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 261)
            (pc))) ./include/leveldb/status.h:98 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1014 (nil)))
 -> 261)
;;  succ:       17 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;;              23 [10.1%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 17, loop depth 0, count 0, freq 2674, maybe hot
;;  prev block 16, next block 18, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       16 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(note 241 127 242 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn:TI 242 241 243 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:206 D.51463 ] [206])
            (const_int 0 [0]))) ./include/leveldb/status.h:99 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 243 242 244 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 248)
            (pc))) ./include/leveldb/status.h:99 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 248)
;;  succ:       18 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              19 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 18, loop depth 0, count 0, freq 1868, maybe hot
;;  prev block 17, next block 19, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       17 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
(note 244 243 246 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 246 244 247 18 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:99 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn:TI 247 246 248 18 (set (reg/f:DI 0 ax [orig:87 D.51463 ] [87])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [3 D.44368.state_+0 S8 A128])) 89 {*movdi_internal}
     (nil))
;;  succ:       19 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 19, loop depth 0, count 0, freq 2674, maybe hot
;;  prev block 18, next block 20, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       17 [30.2%]  (CAN_FALLTHRU)
;;              18 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 248 247 249 19 42 "" [1 uses])
(note 249 248 250 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn:TI 250 249 251 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:87 D.51463 ] [87])
            (const_int 0 [0]))) ./include/leveldb/status.h:100 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 251 250 252 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1003)
            (pc))) ./include/leveldb/status.h:100 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 1003)
;;  succ:       20 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              95 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 20, loop depth 0, count 0, freq 1868, maybe hot
;;  prev block 19, next block 21, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       19 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(note 252 251 253 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn:TI 253 252 254 20 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:87 D.51463 ] [87])) ./include/leveldb/status.h:100 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:87 D.51463 ] [87])
        (nil)))
(call_insn:TI 254 253 1022 20 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZN7leveldb6Status9CopyStateEPKc") [flags 0x41]  <function_decl 0x7f0d12f4c000 CopyState>) [0 CopyState S1 A8])
            (const_int 0 [0]))) ./include/leveldb/status.h:100 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 4 [0x4])
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb6Status9CopyStateEPKc") [flags 0x41]  <function_decl 0x7f0d12f4c000 CopyState>)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       137 (ABNORMAL,ABNORMAL_CALL,EH)
;;              21 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 21, loop depth 0, count 0, freq 1868, maybe hot
;;  prev block 20, next block 22, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       20 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di]
;; live  kill	
(note 1022 254 257 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn:TI 257 1022 258 21 (set (reg/f:DI 5 di [orig:250 D.51463 ] [250])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [3 D.44368.state_+0 S8 A128])) 89 {*movdi_internal}
     (nil))
;;  succ:       22 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 22, loop depth 0, count 0, freq 2674, maybe hot
;;  prev block 21, next block 23, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       21 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              95 [100.0%]  (CAN_FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(code_label 258 257 259 22 43 "" [1 uses])
(note 259 258 260 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn:TI 260 259 261 22 (set (mem/f:DI (reg/f:DI 6 bp [orig:253 <retval> ] [253]) [3 s_15(D)->state_+0 S8 A64])
        (reg/f:DI 0 ax [orig:87 D.51463 ] [87])) ./include/leveldb/status.h:100 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:87 D.51463 ] [87])
        (nil)))
;;  succ:       23 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 23, loop depth 0, count 0, freq 2976, maybe hot
;;  prev block 22, next block 24, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       22 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              16 [10.1%]  (CAN_FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 261 260 262 23 40 "" [1 uses])
(note 262 261 263 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn:TI 263 262 264 23 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:250 D.51463 ] [250])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 264 263 265 23 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 268)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 268)
;;  succ:       24 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              25 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 24, loop depth 0, count 0, freq 2078, maybe hot
;;  prev block 23, next block 25, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       23 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(note 265 264 267 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 267 265 268 24 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       25 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 25, loop depth 0, count 0, freq 2976, maybe hot
;;  prev block 24, next block 26, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       23 [30.2%]  (CAN_FALLTHRU)
;;              24 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 268 267 269 25 44 "" [1 uses])
(note 269 268 270 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn:TI 270 269 271 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:DI (reg/f:DI 6 bp [orig:253 <retval> ] [253]) [3 MEM[(const struct Status *)s_15(D)].state_+0 S8 A64])
            (const_int 0 [0]))) db/builder.cc:31 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 271 270 817 25 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1628)
            (pc))) db/builder.cc:31 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 672 (nil)))
 -> 1628)
;;  succ:       26 [93.3%]  (FALLTHRU,CAN_FALLTHRU)
;;              30 [6.7%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 26, loop depth 0, count 0, freq 5952, maybe hot
;; Invalid sum of incoming frequencies 3935, should be 5952
;;  prev block 25, next block 27, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       25 [93.3%]  (FALLTHRU,CAN_FALLTHRU)
;;              91 [30.2%]  (CAN_FALLTHRU)
;;              86 [50.0%]  (CAN_FALLTHRU)
;;              92 [100.0%]  (CAN_FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
(code_label 817 271 818 26 70 "" [3 uses])
(note 818 817 819 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn:TI 819 818 1423 26 (set (reg/f:DI 5 di [orig:160 D.51472 ] [160])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 176 [0xb0])) [3 MEM[(char * *)&fname]+0 S8 A128])) 89 {*movdi_internal}
     (nil))
(insn 1423 819 822 26 (set (reg/f:DI 0 ax [418])
        (plus:DI (reg/f:DI 44 r15 [450])
            (const_int 16 [0x10]))) /usr/include/c++/5/bits/basic_string.h:179 214 {*leadi}
     (expr_list:REG_DEAD (reg/f:DI 44 r15 [450])
        (nil)))
(insn:TI 822 1423 823 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:160 D.51472 ] [160])
            (reg/f:DI 0 ax [418]))) /usr/include/c++/5/bits/basic_string.h:179 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [418])
        (nil)))
(jump_insn:TI 823 822 824 26 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 989)
            (pc))) /usr/include/c++/5/bits/basic_string.h:179 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2165 (nil)))
 -> 989)
;;  succ:       27 [78.3%]  (FALLTHRU,CAN_FALLTHRU)
;;              28 [21.6%]  (CAN_FALLTHRU)
;; lr  out 	 5 [di] 6 [bp] 7 [sp]
;; live  out 	 5 [di] 6 [bp] 7 [sp]

;; basic block 27, loop depth 0, count 0, freq 4664, maybe hot
;;  prev block 26, next block 28, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       26 [78.3%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(note 824 823 826 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 826 824 989 27 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7f0d141a3360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/ext/new_allocator.h:110 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7f0d141a3360 operator delete>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       28 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

;; basic block 28, loop depth 0, count 0, freq 5952, maybe hot
;;  prev block 27, next block 29, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       26 [21.6%]  (CAN_FALLTHRU)
;;              27 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 17 [flags]
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 2 [cx]
(code_label 989 826 999 28 28 "" [1 uses])
(note 999 989 993 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn:TI 993 999 991 28 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                                (const_int 216 [0xd8])) [3 D.51474+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 2 cx [455]))
        ]) db/builder.cc:86 990 {stack_tls_protect_test_di}
     (expr_list:REG_UNUSED (reg:DI 2 cx [455])
        (nil)))
(insn:TI 991 993 994 28 (set (reg/i:DI 0 ax)
        (reg/f:DI 6 bp [orig:253 <retval> ] [253])) db/builder.cc:86 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 6 bp [orig:253 <retval> ] [253])
        (nil)))
(jump_insn:TI 994 991 1046 28 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1629)
            (pc))) db/builder.cc:86 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 4 (nil)))
 -> 1629)
;;  succ:       29 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              136 [0.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 29, loop depth 0, count 0, freq 5950, maybe hot
;;  prev block 28, next block 30, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       28 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 3 [bx] 6 [bp] 7 [sp] 17 [flags] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(note 1046 994 1691 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(note 1691 1046 1470 29 NOTE_INSN_EPILOGUE_BEG)
(insn/f:TI 1470 1691 998 29 (parallel [
            (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 232 [0xe8])))
            (clobber (reg:CC 17 flags))
            (clobber (mem:BLK (scratch) [0  A8]))
        ]) db/builder.cc:86 970 {pro_epilogue_adjust_stack_di_add}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 232 [0xe8])))
            (nil))))
(insn 998 1470 1471 29 (use (reg/i:DI 0 ax)) db/builder.cc:86 -1
     (nil))
(insn/f:TI 1471 998 1472 29 (set (reg:DI 3 bx)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) db/builder.cc:86 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 1472 1471 1473 29 (set (reg:DI 6 bp)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) db/builder.cc:86 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 1473 1472 1474 29 (set (reg:DI 41 r12)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) db/builder.cc:86 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 1474 1473 1475 29 (set (reg:DI 42 r13)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) db/builder.cc:86 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 1475 1474 1476 29 (set (reg:DI 43 r14)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) db/builder.cc:86 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(insn/f:TI 1476 1475 1477 29 (set (reg:DI 44 r15)
        (mem:DI (post_inc:DI (reg/f:DI 7 sp)) [0  S8 A8])) db/builder.cc:86 75 {*popdi1}
     (expr_list:REG_CFA_ADJUST_CFA (set (reg/f:DI 7 sp)
            (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])))
        (nil)))
(jump_insn:TI 1477 1476 1478 29 (simple_return) db/builder.cc:86 680 {simple_return_internal}
     (nil)
 -> simple_return)
;;  succ:       EXIT [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 1478 1477 1628)
;; basic block 30, loop depth 0, count 0, freq 200, maybe hot
;;  prev block 29, next block 31, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       25 [6.7%]  (CAN_FALLTHRU)
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(code_label 1628 1478 272 30 222 "" [1 uses])
(note 272 1628 273 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn:TI 273 272 274 30 (set (reg:DI 5 di)
        (const_int 8 [0x8])) db/builder.cc:35 89 {*movdi_internal}
     (nil))
(call_insn:TI 274 273 1023 30 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7f0d141a31b0 operator new>) [0 operator new S1 A8])
            (const_int 0 [0]))) db/builder.cc:35 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 2 [0x2])
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7f0d141a31b0 operator new>)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       155 (ABNORMAL,ABNORMAL_CALL,EH)
;;              31 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 31, loop depth 0, count 0, freq 200, maybe hot
;;  prev block 30, next block 32, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       30 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 1 [dx] 4 [si] 5 [di]
;; live  kill	
(note 1023 274 279 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn:TI 279 1023 280 31 (set (reg:DI 1 dx)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [3 file+0 S8 A128])) db/builder.cc:35 89 {*movdi_internal}
     (nil))
(insn 280 279 281 31 (set (reg:DI 4 si)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [19 %sfp+-208 S8 A64])) db/builder.cc:35 89 {*movdi_internal}
     (nil))
(insn 281 280 1417 31 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:100 D.51468 ] [100])) db/builder.cc:35 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:100 D.51468 ] [100])
        (nil)))
(insn:TI 1417 281 282 31 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [19 %sfp+-216 S8 A64])
        (reg/f:DI 0 ax [orig:100 D.51468 ] [100])) db/builder.cc:35 89 {*movdi_internal}
     (nil))
(call_insn:TI 282 1417 283 31 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb12TableBuilderC1ERKNS_7OptionsEPNS_12WritableFileE") [flags 0x41]  <function_decl 0x7f0d12a9d360 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) db/builder.cc:35 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_EH_REGION (const_int 5 [0x5])
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb12TableBuilderC1ERKNS_7OptionsEPNS_12WritableFileE") [flags 0x41]  <function_decl 0x7f0d12a9d360 __comp_ctor >)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       150 (ABNORMAL,ABNORMAL_CALL,EH)
;;              32 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 32, loop depth 0, count 0, freq 200, maybe hot
;;  prev block 31, next block 33, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       31 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 5 [di]
;; live  kill	
(note 283 282 285 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(note 285 283 284 32 NOTE_INSN_DELETED)
(insn:TI 284 285 286 32 (set (reg/f:DI 0 ax [orig:328 iter_19(D)->_vptr.Iterator ] [328])
        (mem/f:DI (reg/v/f:DI 3 bx [orig:258 iter ] [258]) [3 iter_19(D)->_vptr.Iterator+0 S8 A64])) db/builder.cc:36 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/v/f:DI 3 bx [orig:258 iter ] [258]) [3 iter_19(D)->_vptr.Iterator+0 S8 A64])
        (nil)))
(insn 286 284 287 32 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:258 iter ] [258])) db/builder.cc:36 89 {*movdi_internal}
     (nil))
(call_insn:TI 287 286 1024 32 (set (reg:TI 0 ax)
        (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:328 iter_19(D)->_vptr.Iterator ] [328])
                        (const_int 64 [0x40])) [3 MEM[(int (*__vtbl_ptr_type) () *)_44 + 64B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_45;(const struct Iterator)iter_19(D)->8) S1 A8])
            (const_int 0 [0]))) db/builder.cc:36 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (nil)
            (expr_list:REG_EH_REGION (const_int 2 [0x2])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       155 (ABNORMAL,ABNORMAL_CALL,EH)
;;              33 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 33, loop depth 0, count 0, freq 200, maybe hot
;;  prev block 32, next block 34, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       32 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8]
;; live  kill	 17 [flags]
(note 1024 287 1088 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1088 1024 290 33 (set (reg:DI 37 r8 [orig:445 D.44372+8 ] [445])
        (reg:DI 1 dx [+8 ])) db/builder.cc:36 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [+8 ])
        (nil)))
(insn 290 1088 1447 33 (set (reg:DI 1 dx [orig:330 MEM[(long unsigned int *)meta_17(D) + 32B] ] [330])
        (mem:DI (plus:DI (reg/v/f:DI 41 r12 [orig:259 meta ] [259])
                (const_int 32 [0x20])) [4 MEM[(long unsigned int *)meta_17(D) + 32B]+0 S8 A64])) /usr/include/c++/5/bits/basic_string.h:1150 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 41 r12 [orig:259 meta ] [259])
                (const_int 32 [0x20])) [4 MEM[(long unsigned int *)meta_17(D) + 32B]+0 S8 A64])
        (nil)))
(insn 1447 290 293 33 (set (reg/f:DI 5 di [orig:331 D.51470 ] [331])
        (plus:DI (reg/v/f:DI 41 r12 [orig:259 meta ] [259])
            (const_int 24 [0x18]))) ./db/dbformat.h:153 214 {*leadi}
     (nil))
(insn:TI 293 1447 1626 33 (set (reg:DI 2 cx)
        (reg:DI 0 ax [orig:444 D.44372 ] [444])) /usr/include/c++/5/bits/basic_string.h:1150 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:444 D.44372 ] [444])
        (nil)))
(insn 1626 293 297 33 (parallel [
            (set (reg:DI 4 si)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:1150 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(call_insn:TI 297 1626 298 33 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm") [flags 0x41]  <function_decl 0x7f0d1302fca8 _M_replace>) [0 _M_replace S1 A8])
            (const_int 0 [0]))) /usr/include/c++/5/bits/basic_string.h:1150 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_DEAD (reg:DI 2 cx)
                    (expr_list:REG_DEAD (reg:DI 1 dx)
                        (expr_list:REG_UNUSED (reg:DI 0 ax)
                            (expr_list:REG_EH_REGION (const_int 2 [0x2])
                                (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm") [flags 0x41]  <function_decl 0x7f0d1302fca8 _M_replace>)
                                    (nil)))))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
;;  succ:       34 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              155 (ABNORMAL,ABNORMAL_CALL,EH)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 34, loop depth 0, count 0, freq 200, maybe hot
;;  prev block 33, next block 35, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       33 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 41 [r12]
;; lr  def 	 0 [ax]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
(note 298 297 1444 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1444 298 1412 34 (set (reg/f:DI 0 ax [orig:451 D.51470 ] [451])
        (plus:DI (reg/v/f:DI 41 r12 [orig:259 meta ] [259])
            (const_int 56 [0x38]))) ./db/dbformat.h:153 214 {*leadi}
     (nil))
(insn:TI 1412 1444 1445 34 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [19 %sfp+-208 S8 A64])
        (reg/f:DI 0 ax [orig:451 D.51470 ] [451])) ./db/dbformat.h:153 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:451 D.51470 ] [451])
        (nil)))
(insn 1445 1412 1413 34 (set (reg/f:DI 0 ax [452])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 160 [0xa0]))) db/builder.cc:40 214 {*leadi}
     (nil))
(insn:TI 1413 1445 1446 34 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [19 %sfp+-200 S8 A64])
        (reg/f:DI 0 ax [452])) db/builder.cc:40 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [452])
        (nil)))
(insn 1446 1413 1414 34 (set (reg/f:DI 0 ax [453])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 144 [0x90]))) db/builder.cc:40 214 {*leadi}
     (nil))
(insn:TI 1414 1446 1630 34 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [19 %sfp+-192 S8 A64])
        (reg/f:DI 0 ax [453])) db/builder.cc:40 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [453])
        (nil)))
(jump_insn 1630 1414 1631 34 (set (pc)
        (label_ref 347)) 654 {jump}
     (nil)
 -> 347)
;;  succ:       40 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 1631 1630 1632)
;; basic block 35, loop depth 0, count 0, freq 9800, maybe hot
;;  prev block 34, next block 36, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       41 [98.0%]  (CAN_FALLTHRU)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 5 [di]
;; live  kill	
(code_label 1632 1631 308 35 224 "" [1 uses])
(note 308 1632 310 35 [bb 35] NOTE_INSN_BASIC_BLOCK)
(note 310 308 309 35 NOTE_INSN_DELETED)
(insn:TI 309 310 311 35 (set (reg/f:DI 0 ax [orig:334 iter_19(D)->_vptr.Iterator ] [334])
        (mem/f:DI (reg/v/f:DI 3 bx [orig:258 iter ] [258]) [3 iter_19(D)->_vptr.Iterator+0 S8 A64])) db/builder.cc:38 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/v/f:DI 3 bx [orig:258 iter ] [258]) [3 iter_19(D)->_vptr.Iterator+0 S8 A64])
        (nil)))
(insn 311 309 312 35 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:258 iter ] [258])) db/builder.cc:38 89 {*movdi_internal}
     (nil))
(call_insn:TI 312 311 1026 35 (set (reg:TI 0 ax)
        (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:334 iter_19(D)->_vptr.Iterator ] [334])
                        (const_int 64 [0x40])) [3 MEM[(int (*__vtbl_ptr_type) () *)_53 + 64B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_54;(const struct Iterator)iter_19(D)->8) S1 A8])
            (const_int 0 [0]))) db/builder.cc:38 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (nil)
            (expr_list:REG_EH_REGION (const_int 2 [0x2])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       155 (ABNORMAL,ABNORMAL_CALL,EH,LOOP_EXIT)
;;              36 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 36, loop depth 0, count 0, freq 9800, maybe hot
;;  prev block 35, next block 37, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       35 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8]
;; live  kill	 17 [flags]
(note 1026 312 317 36 [bb 36] NOTE_INSN_BASIC_BLOCK)
(note 317 1026 1443 36 NOTE_INSN_DELETED)
(insn:TI 1443 317 1442 36 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 152 [0x98])) [6 key+8 S8 A64])
        (reg:DI 1 dx [+8 ])) db/builder.cc:38 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [+8 ])
        (nil)))
(insn 1442 1443 1625 36 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 144 [0x90])) [6 key+0 S8 A128])
        (reg:DI 0 ax [336])) db/builder.cc:38 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [336])
        (nil)))
(insn 1625 1442 319 36 (parallel [
            (set (reg:DI 4 si)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:1150 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn:TI 319 1625 321 36 (set (reg:DI 1 dx [orig:340 MEM[(long unsigned int *)meta_17(D) + 64B] ] [340])
        (mem:DI (plus:DI (reg/v/f:DI 41 r12 [orig:259 meta ] [259])
                (const_int 64 [0x40])) [4 MEM[(long unsigned int *)meta_17(D) + 64B]+0 S8 A64])) /usr/include/c++/5/bits/basic_string.h:1150 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 41 r12 [orig:259 meta ] [259])
                (const_int 64 [0x40])) [4 MEM[(long unsigned int *)meta_17(D) + 64B]+0 S8 A64])
        (nil)))
(insn 321 319 322 36 (set (reg:DI 37 r8)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 152 [0x98])) [4 MEM[(long unsigned int *)&key + 8B]+0 S8 A64])) /usr/include/c++/5/bits/basic_string.h:1150 89 {*movdi_internal}
     (nil))
(insn:TI 322 321 325 36 (set (reg:DI 2 cx)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 144 [0x90])) [3 MEM[(const char * *)&key]+0 S8 A128])) /usr/include/c++/5/bits/basic_string.h:1150 89 {*movdi_internal}
     (nil))
(insn 325 322 326 36 (set (reg:DI 5 di)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [19 %sfp+-208 S8 A64])) /usr/include/c++/5/bits/basic_string.h:1150 89 {*movdi_internal}
     (nil))
(call_insn:TI 326 325 327 36 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm") [flags 0x41]  <function_decl 0x7f0d1302fca8 _M_replace>) [0 _M_replace S1 A8])
            (const_int 0 [0]))) /usr/include/c++/5/bits/basic_string.h:1150 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_DEAD (reg:DI 2 cx)
                    (expr_list:REG_DEAD (reg:DI 1 dx)
                        (expr_list:REG_UNUSED (reg:DI 0 ax)
                            (expr_list:REG_EH_REGION (const_int 2 [0x2])
                                (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEmmPKcm") [flags 0x41]  <function_decl 0x7f0d1302fca8 _M_replace>)
                                    (nil)))))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
;;  succ:       37 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              155 (ABNORMAL,ABNORMAL_CALL,EH,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 37, loop depth 0, count 0, freq 9800, maybe hot
;;  prev block 36, next block 38, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       36 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 5 [di]
;; live  kill	
(note 327 326 329 37 [bb 37] NOTE_INSN_BASIC_BLOCK)
(note 329 327 328 37 NOTE_INSN_DELETED)
(insn:TI 328 329 330 37 (set (reg/f:DI 0 ax [orig:342 iter_19(D)->_vptr.Iterator ] [342])
        (mem/f:DI (reg/v/f:DI 3 bx [orig:258 iter ] [258]) [3 iter_19(D)->_vptr.Iterator+0 S8 A64])) db/builder.cc:40 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/v/f:DI 3 bx [orig:258 iter ] [258]) [3 iter_19(D)->_vptr.Iterator+0 S8 A64])
        (nil)))
(insn 330 328 331 37 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:258 iter ] [258])) db/builder.cc:40 89 {*movdi_internal}
     (nil))
(call_insn:TI 331 330 1027 37 (set (reg:TI 0 ax)
        (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:342 iter_19(D)->_vptr.Iterator ] [342])
                        (const_int 72 [0x48])) [3 MEM[(int (*__vtbl_ptr_type) () *)_57 + 72B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_58;(const struct Iterator)iter_19(D)->9) S1 A8])
            (const_int 0 [0]))) db/builder.cc:40 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (nil)
            (expr_list:REG_EH_REGION (const_int 2 [0x2])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       155 (ABNORMAL,ABNORMAL_CALL,EH,LOOP_EXIT)
;;              38 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 38, loop depth 0, count 0, freq 9800, maybe hot
;;  prev block 37, next block 39, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       37 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 1 [dx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 1 [dx] 4 [si] 5 [di]
;; live  kill	
(note 1027 331 1441 38 [bb 38] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1441 1027 339 38 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 168 [0xa8])) [6 D.44375+8 S8 A64])
        (reg:DI 1 dx [+8 ])) db/builder.cc:40 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 1 dx [+8 ])
        (nil)))
(insn 339 1441 338 38 (set (reg:DI 4 si)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [19 %sfp+-192 S8 A64])) db/builder.cc:40 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -80 [0xffffffffffffffb0]))
        (nil)))
(insn:TI 338 339 340 38 (set (reg:DI 1 dx)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [19 %sfp+-200 S8 A64])) db/builder.cc:40 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
(insn 340 338 1440 38 (set (reg:DI 5 di)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [19 %sfp+-216 S8 A64])) db/builder.cc:40 89 {*movdi_internal}
     (nil))
(insn:TI 1440 340 341 38 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 160 [0xa0])) [6 D.44375+0 S8 A128])
        (reg:DI 0 ax [344])) db/builder.cc:40 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [344])
        (nil)))
(call_insn:TI 341 1440 342 38 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb12TableBuilder3AddERKNS_5SliceES3_") [flags 0x41]  <function_decl 0x7f0d12a976c0 Add>) [0 Add S1 A8])
        (const_int 0 [0])) db/builder.cc:40 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_EH_REGION (const_int 2 [0x2])
                    (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb12TableBuilder3AddERKNS_5SliceES3_") [flags 0x41]  <function_decl 0x7f0d12a976c0 Add>)
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       155 (ABNORMAL,ABNORMAL_CALL,EH,LOOP_EXIT)
;;              39 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 39, loop depth 0, count 0, freq 9800, maybe hot
;;  prev block 38, next block 40, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       38 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(note 342 341 344 39 [bb 39] NOTE_INSN_BASIC_BLOCK)
(note 344 342 343 39 NOTE_INSN_DELETED)
(insn:TI 343 344 345 39 (set (reg/f:DI 0 ax [orig:348 iter_19(D)->_vptr.Iterator ] [348])
        (mem/f:DI (reg/v/f:DI 3 bx [orig:258 iter ] [258]) [3 iter_19(D)->_vptr.Iterator+0 S8 A64])) db/builder.cc:37 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/v/f:DI 3 bx [orig:258 iter ] [258]) [3 iter_19(D)->_vptr.Iterator+0 S8 A64])
        (nil)))
(insn 345 343 346 39 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:258 iter ] [258])) db/builder.cc:37 89 {*movdi_internal}
     (nil))
(call_insn:TI 346 345 347 39 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:348 iter_19(D)->_vptr.Iterator ] [348])
                    (const_int 48 [0x30])) [3 MEM[(int (*__vtbl_ptr_type) () *)_63 + 48B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_64;(struct Iterator)iter_19(D)->6) S1 A8])
        (const_int 0 [0])) db/builder.cc:37 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:348 iter_19(D)->_vptr.Iterator ] [348])
            (expr_list:REG_CALL_DECL (nil)
                (expr_list:REG_EH_REGION (const_int 2 [0x2])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       155 (ABNORMAL,ABNORMAL_CALL,EH,LOOP_EXIT)
;;              40 [100.0%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 40, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 39, next block 41, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       39 [100.0%]  (FALLTHRU,DFS_BACK,CAN_FALLTHRU)
;;              34 [100.0%]  (CAN_FALLTHRU)
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(code_label 347 346 299 40 47 "" [1 uses])
(note 299 347 301 40 [bb 40] NOTE_INSN_BASIC_BLOCK)
(note 301 299 300 40 NOTE_INSN_DELETED)
(insn:TI 300 301 302 40 (set (reg/f:DI 0 ax [orig:332 iter_19(D)->_vptr.Iterator ] [332])
        (mem/f:DI (reg/v/f:DI 3 bx [orig:258 iter ] [258]) [3 iter_19(D)->_vptr.Iterator+0 S8 A64])) db/builder.cc:37 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/v/f:DI 3 bx [orig:258 iter ] [258]) [3 iter_19(D)->_vptr.Iterator+0 S8 A64])
        (nil)))
(insn 302 300 303 40 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:258 iter ] [258])) db/builder.cc:37 89 {*movdi_internal}
     (nil))
(call_insn:TI 303 302 1025 40 (set (reg:QI 0 ax)
        (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:332 iter_19(D)->_vptr.Iterator ] [332])
                        (const_int 16 [0x10])) [3 MEM[(int (*__vtbl_ptr_type) () *)_49 + 16B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_50;(const struct Iterator)iter_19(D)->2) S1 A8])
            (const_int 0 [0]))) db/builder.cc:37 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (nil)
            (expr_list:REG_EH_REGION (const_int 2 [0x2])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       155 (ABNORMAL,ABNORMAL_CALL,EH,LOOP_EXIT)
;;              41 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 41, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 40, next block 42, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       40 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(note 1025 303 306 41 [bb 41] NOTE_INSN_BASIC_BLOCK)
(insn:TI 306 1025 307 41 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:107 D.51467 ] [107])
            (const_int 0 [0]))) db/builder.cc:37 1 {*cmpqi_ccno_1}
     (expr_list:REG_DEAD (reg:QI 0 ax [orig:107 D.51467 ] [107])
        (nil)))
(jump_insn:TI 307 306 351 41 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1632)
            (pc))) db/builder.cc:37 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9800 (nil)))
 -> 1632)
;;  succ:       35 [98.0%]  (CAN_FALLTHRU)
;;              42 [2.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 42, loop depth 0, count 0, freq 200, maybe hot
;;  prev block 41, next block 43, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       41 [2.0%]  (FALLTHRU,CAN_FALLTHRU,LOOP_EXIT)
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(note 351 307 352 42 [bb 42] NOTE_INSN_BASIC_BLOCK)
(insn:TI 352 351 353 42 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:DI (reg/f:DI 6 bp [orig:253 <retval> ] [253]) [3 MEM[(const struct Status *)s_15(D)].state_+0 S8 A64])
            (const_int 0 [0]))) db/builder.cc:44 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 353 352 402 42 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1633)
            (pc))) db/builder.cc:44 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1500 (nil)))
 -> 1633)
;;  succ:       101 [15.0%]  (CAN_FALLTHRU)
;;              43 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 43, loop depth 0, count 0, freq 170, maybe hot
;;  prev block 42, next block 44, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       42 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di]
;; live  kill	
(note 402 353 403 43 [bb 43] NOTE_INSN_BASIC_BLOCK)
(insn:TI 403 402 404 43 (set (reg:DI 5 di)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [19 %sfp+-216 S8 A64])) db/builder.cc:51 89 {*movdi_internal}
     (nil))
(call_insn:TI 404 403 405 43 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb12TableBuilder7AbandonEv") [flags 0x41]  <function_decl 0x7f0d12a97a20 Abandon>) [0 Abandon S1 A8])
        (const_int 0 [0])) db/builder.cc:51 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 2 [0x2])
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb12TableBuilder7AbandonEv") [flags 0x41]  <function_decl 0x7f0d12a97a20 Abandon>)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       155 (ABNORMAL,ABNORMAL_CALL,EH)
;;              44 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 44, loop depth 0, count 0, freq 200, maybe hot
;;  prev block 43, next block 45, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       111 [93.3%]  (CAN_FALLTHRU)
;;              43 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              113 [100.0%]  (CAN_FALLTHRU)
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(code_label 405 404 406 44 53 "" [2 uses])
(note 406 405 1418 44 [bb 44] NOTE_INSN_BASIC_BLOCK)
(note 1418 406 407 44 NOTE_INSN_DELETED)
(insn:TI 407 1418 408 44 (set (reg:DI 5 di)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [19 %sfp+-216 S8 A64])) db/builder.cc:53 89 {*movdi_internal}
     (nil))
(call_insn:TI 408 407 409 44 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb12TableBuilderD1Ev") [flags 0x41]  <function_decl 0x7f0d12a9d510 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) db/builder.cc:53 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb12TableBuilderD1Ev") [flags 0x41]  <function_decl 0x7f0d12a9d510 __comp_dtor >)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn:TI 409 408 410 44 (set (reg:DI 5 di)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [19 %sfp+-216 S8 A64])) db/builder.cc:53 89 {*movdi_internal}
     (nil))
(call_insn:TI 410 409 411 44 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7f0d141a3360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) db/builder.cc:53 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7f0d141a3360 operator delete>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn:TI 411 410 412 44 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:DI (reg/f:DI 6 bp [orig:253 <retval> ] [253]) [3 MEM[(const struct Status *)s_15(D)].state_+0 S8 A64])
            (const_int 0 [0]))) db/builder.cc:56 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 412 411 500 44 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1634)
            (pc))) db/builder.cc:56 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 672 (nil)))
 -> 1634)
;;  succ:       114 [6.7%]  (CAN_FALLTHRU)
;;              45 [93.3%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 45, loop depth 0, count 0, freq 200, maybe hot
;;  prev block 44, next block 46, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       44 [93.3%]  (FALLTHRU,CAN_FALLTHRU)
;;              133 [30.2%]  (CAN_FALLTHRU)
;;              124 (CAN_FALLTHRU)
;;              134 [100.0%]  (CAN_FALLTHRU)
;; bb 45 artificial_defs: { }
;; bb 45 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(code_label 500 412 501 45 55 "" [3 uses])
(note 501 500 502 45 [bb 45] NOTE_INSN_BASIC_BLOCK)
(insn:TI 502 501 503 45 (set (reg/f:DI 5 di [orig:135 D.51469 ] [135])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [3 file+0 S8 A128])) db/builder.cc:62 89 {*movdi_internal}
     (nil))
(insn:TI 503 502 504 45 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:135 D.51469 ] [135])
            (const_int 0 [0]))) db/builder.cc:62 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 504 503 505 45 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 510)
            (pc))) db/builder.cc:62 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 510)
;;  succ:       46 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              47 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 46, loop depth 0, count 0, freq 140, maybe hot
;;  prev block 45, next block 47, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       45 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 46 artificial_defs: { }
;; bb 46 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
(note 505 504 507 46 [bb 46] NOTE_INSN_BASIC_BLOCK)
(note 507 505 506 46 NOTE_INSN_DELETED)
(insn:TI 506 507 509 46 (set (reg/f:DI 0 ax [orig:357 _102->_vptr.WritableFile ] [357])
        (mem/f:DI (reg/f:DI 5 di [orig:135 D.51469 ] [135]) [3 _102->_vptr.WritableFile+0 S8 A64])) db/builder.cc:62 89 {*movdi_internal}
     (nil))
(call_insn:TI 509 506 510 46 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:357 _102->_vptr.WritableFile ] [357])
                    (const_int 8 [0x8])) [3 MEM[(int (*__vtbl_ptr_type) () *)_103 + 8B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_104;(struct WritableFile)_102->1) S1 A8])
        (const_int 0 [0])) db/builder.cc:62 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:357 _102->_vptr.WritableFile ] [357])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (expr_list:REG_CALL_DECL (nil)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       47 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 47, loop depth 0, count 0, freq 200, maybe hot
;;  prev block 46, next block 48, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       45 [30.2%]  (CAN_FALLTHRU)
;;              46 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 47 artificial_defs: { }
;; bb 47 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 510 509 511 47 65 "" [1 uses])
(note 511 510 513 47 [bb 47] NOTE_INSN_BASIC_BLOCK)
(insn:TI 513 511 512 47 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:DI (reg/f:DI 6 bp [orig:253 <retval> ] [253]) [3 MEM[(const struct Status *)s_15(D)].state_+0 S8 A64])
            (const_int 0 [0]))) db/builder.cc:65 4 {*cmpdi_ccno_1}
     (nil))
(insn 512 513 514 47 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [3 file+0 S8 A128])
        (const_int 0 [0])) db/builder.cc:63 89 {*movdi_internal}
     (nil))
(jump_insn:TI 514 512 515 47 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 576)
            (pc))) db/builder.cc:65 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9328 (nil)))
 -> 576)
;;  succ:       48 [6.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              60 [93.3%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 48, loop depth 0, count 0, freq 13, maybe hot
;;  prev block 47, next block 49, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       47 [6.7%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 48 artificial_defs: { }
;; bb 48 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8]
;; live  kill	 17 [flags]
(note 515 514 516 48 [bb 48] NOTE_INSN_BASIC_BLOCK)
(insn:TI 516 515 517 48 (set (reg:DI 2 cx [orig:139 D.51466 ] [139])
        (mem:DI (plus:DI (reg/v/f:DI 41 r12 [orig:259 meta ] [259])
                (const_int 16 [0x10])) [4 meta_17(D)->file_size+0 S8 A64])) db/builder.cc:67 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 41 r12 [orig:259 meta ] [259])
                (const_int 16 [0x10])) [4 meta_17(D)->file_size+0 S8 A64])
        (nil)))
(insn 517 516 1436 48 (set (reg:DI 1 dx [orig:140 D.51466 ] [140])
        (mem:DI (plus:DI (reg/v/f:DI 41 r12 [orig:259 meta ] [259])
                (const_int 8 [0x8])) [4 meta_17(D)->number+0 S8 A64])) db/builder.cc:67 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 41 r12 [orig:259 meta ] [259])
                (const_int 8 [0x8])) [4 meta_17(D)->number+0 S8 A64])
        (nil)))
(insn 1436 517 526 48 (set (reg/f:DI 4 si [359])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 160 [0xa0]))) db/builder.cc:69 214 {*leadi}
     (nil))
(insn:TI 526 1436 1623 48 (set (reg:DI 5 di)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [19 %sfp+-184 S8 A64])) db/builder.cc:69 89 {*movdi_internal}
     (nil))
(insn 1623 526 518 48 (parallel [
            (set (reg:DI 37 r8)
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) db/builder.cc:69 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(insn 518 1623 519 48 (set (mem/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 160 [0xa0])) [9 D.44398.verify_checksums+0 S1 A128])
        (const_int 0 [0])) ./include/leveldb/options.h:164 93 {*movqi_internal}
     (nil))
(insn:TI 519 518 520 48 (set (mem/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 161 [0xa1])) [9 D.44398.fill_cache+0 S1 A8])
        (const_int 1 [0x1])) ./include/leveldb/options.h:164 93 {*movqi_internal}
     (nil))
(insn 520 519 527 48 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 168 [0xa8])) [3 D.44398.snapshot+0 S8 A64])
        (const_int 0 [0])) ./include/leveldb/options.h:164 89 {*movdi_internal}
     (nil))
(call_insn:TI 527 520 1033 48 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZN7leveldb10TableCache11NewIteratorERKNS_11ReadOptionsEmmPPNS_5TableE") [flags 0x41]  <function_decl 0x7f0d12b03ca8 NewIterator>) [0 NewIterator S1 A8])
            (const_int 0 [0]))) db/builder.cc:69 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 37 r8)
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_DEAD (reg:DI 2 cx)
                    (expr_list:REG_DEAD (reg:DI 1 dx)
                        (expr_list:REG_EH_REGION (const_int 2 [0x2])
                            (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb10TableCache11NewIteratorERKNS_11ReadOptionsEmmPPNS_5TableE") [flags 0x41]  <function_decl 0x7f0d12b03ca8 NewIterator>)
                                (nil))))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
;;  succ:       155 (ABNORMAL,ABNORMAL_CALL,EH)
;;              49 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 49, loop depth 0, count 0, freq 13, maybe hot
;;  prev block 48, next block 50, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       48 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 49 artificial_defs: { }
;; bb 49 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	
(note 1033 527 532 49 [bb 49] NOTE_INSN_BASIC_BLOCK)
(note 532 1033 528 49 NOTE_INSN_DELETED)
(insn:TI 528 532 1420 49 (set (reg/v/f:DI 4 si [orig:141 it ] [141])
        (reg:DI 0 ax)) db/builder.cc:69 89 {*movdi_internal}
     (nil))
(insn 1420 528 531 49 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [19 %sfp+-216 S8 A64])
        (reg/f:DI 0 ax [orig:141 it ] [141])) db/builder.cc:69 89 {*movdi_internal}
     (nil))
(insn 531 1420 1435 49 (set (reg/f:DI 0 ax [orig:361 it_113->_vptr.Iterator ] [361])
        (mem/f:DI (reg/v/f:DI 0 ax [orig:141 it ] [141]) [3 it_113->_vptr.Iterator+0 S8 A64])) db/builder.cc:70 89 {*movdi_internal}
     (nil))
(insn:TI 1435 531 535 49 (set (reg/f:DI 5 di [360])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 112 [0x70]))) db/builder.cc:70 214 {*leadi}
     (nil))
(call_insn:TI 535 1435 536 49 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:361 it_113->_vptr.Iterator ] [361])
                    (const_int 80 [0x50])) [3 MEM[(int (*__vtbl_ptr_type) () *)_115 + 80B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_116;(const struct Iterator)it_113->10) S1 A8])
        (const_int 0 [0])) db/builder.cc:70 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:361 it_113->_vptr.Iterator ] [361])
                (expr_list:REG_CALL_DECL (nil)
                    (expr_list:REG_EH_REGION (const_int 2 [0x2])
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       155 (ABNORMAL,ABNORMAL_CALL,EH)
;;              50 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 50, loop depth 0, count 0, freq 13, maybe hot
;;  prev block 49, next block 51, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       49 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 50 artificial_defs: { }
;; bb 50 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(note 536 535 537 50 [bb 50] NOTE_INSN_BASIC_BLOCK)
(insn:TI 537 536 538 50 (set (reg/f:DI 5 di [orig:132 D.51463 ] [132])
        (mem/f:DI (reg/f:DI 6 bp [orig:253 <retval> ] [253]) [3 s_15(D)->state_+0 S8 A64])) ./include/leveldb/status.h:98 89 {*movdi_internal}
     (nil))
(insn 538 537 539 50 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:132 D.51463 ] [132])
            (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 112 [0x70])) [3 D.44408.state_+0 S8 A128]))) ./include/leveldb/status.h:98 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 539 538 540 50 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 961)
            (pc))) ./include/leveldb/status.h:98 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1014 (nil)))
 -> 961)
;;  succ:       51 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;;              57 [10.1%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 51, loop depth 0, count 0, freq 12, maybe hot
;;  prev block 50, next block 52, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       50 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 51 artificial_defs: { }
;; bb 51 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(note 540 539 541 51 [bb 51] NOTE_INSN_BASIC_BLOCK)
(insn:TI 541 540 542 51 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:132 D.51463 ] [132])
            (const_int 0 [0]))) ./include/leveldb/status.h:99 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 542 541 543 51 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 546)
            (pc))) ./include/leveldb/status.h:99 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 546)
;;  succ:       52 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              53 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 52, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 51, next block 53, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       51 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 52 artificial_defs: { }
;; bb 52 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(note 543 542 545 52 [bb 52] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 545 543 546 52 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:99 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       53 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 53, loop depth 0, count 0, freq 12, maybe hot
;;  prev block 52, next block 54, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       51 [30.2%]  (CAN_FALLTHRU)
;;              52 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 53 artificial_defs: { }
;; bb 53 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
(code_label 546 545 547 53 68 "" [1 uses])
(note 547 546 548 53 [bb 53] NOTE_INSN_BASIC_BLOCK)
(insn:TI 548 547 549 53 (set (reg/f:DI 5 di [orig:449 D.51463 ] [449])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 112 [0x70])) [3 D.44408.state_+0 S8 A128])) ./include/leveldb/status.h:100 89 {*movdi_internal}
     (nil))
(insn:TI 549 548 1185 53 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:449 D.51463 ] [449])
            (const_int 0 [0]))) ./include/leveldb/status.h:100 4 {*cmpdi_ccno_1}
     (nil))
(insn 1185 549 550 53 (set (reg/f:DI 0 ax [orig:213 D.51463 ] [213])
        (reg/f:DI 5 di [orig:449 D.51463 ] [449])) ./include/leveldb/status.h:100 89 {*movdi_internal}
     (nil))
(jump_insn:TI 550 1185 551 53 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 555)
            (pc))) ./include/leveldb/status.h:100 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 555)
;;  succ:       54 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              56 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 54, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 53, next block 55, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       53 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 54 artificial_defs: { }
;; bb 54 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
(note 551 550 553 54 [bb 54] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 553 551 1034 54 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZN7leveldb6Status9CopyStateEPKc") [flags 0x41]  <function_decl 0x7f0d12f4c000 CopyState>) [0 CopyState S1 A8])
            (const_int 0 [0]))) ./include/leveldb/status.h:100 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 13 [0xd])
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb6Status9CopyStateEPKc") [flags 0x41]  <function_decl 0x7f0d12f4c000 CopyState>)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       146 (ABNORMAL,ABNORMAL_CALL,EH)
;;              55 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 55, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 54, next block 56, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       54 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 55 artificial_defs: { }
;; bb 55 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di]
;; live  kill	
(note 1034 553 1172 55 [bb 55] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1172 1034 555 55 (set (reg/f:DI 5 di [orig:449 D.51463 ] [449])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 112 [0x70])) [3 D.44408.state_+0 S8 A128])) 89 {*movdi_internal}
     (nil))
;;  succ:       56 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 56, loop depth 0, count 0, freq 12, maybe hot
;;  prev block 55, next block 57, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       53 [30.2%]  (CAN_FALLTHRU)
;;              55 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 56 artificial_defs: { }
;; bb 56 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(code_label 555 1172 556 56 69 "" [1 uses])
(note 556 555 557 56 [bb 56] NOTE_INSN_BASIC_BLOCK)
(insn:TI 557 556 961 56 (set (mem/f:DI (reg/f:DI 6 bp [orig:253 <retval> ] [253]) [3 s_15(D)->state_+0 S8 A64])
        (reg/f:DI 0 ax [orig:213 D.51463 ] [213])) ./include/leveldb/status.h:100 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:213 D.51463 ] [213])
        (nil)))
;;  succ:       57 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 57, loop depth 0, count 0, freq 13, maybe hot
;;  prev block 56, next block 58, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       50 [10.1%]  (CAN_FALLTHRU)
;;              56 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 57 artificial_defs: { }
;; bb 57 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 961 557 962 57 67 "" [1 uses])
(note 962 961 965 57 [bb 57] NOTE_INSN_BASIC_BLOCK)
(insn:TI 965 962 966 57 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:449 D.51463 ] [449])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 966 965 560 57 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 958)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 958)
;;  succ:       58 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              59 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 58, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 57, next block 59, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       57 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 58 artificial_defs: { }
;; bb 58 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(note 560 966 562 58 [bb 58] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 562 560 958 58 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       59 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 59, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 58, next block 60, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       58 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              57 [30.2%]  (CAN_FALLTHRU)
;; bb 59 artificial_defs: { }
;; bb 59 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(code_label 958 562 563 59 107 "" [1 uses])
(note 563 958 565 59 [bb 59] NOTE_INSN_BASIC_BLOCK)
(note 565 563 1421 59 NOTE_INSN_DELETED)
(insn:TI 1421 565 564 59 (set (reg/v/f:DI 5 di [orig:141 it ] [141])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [19 %sfp+-216 S8 A64])) db/builder.cc:71 89 {*movdi_internal}
     (nil))
(insn:TI 564 1421 567 59 (set (reg/f:DI 0 ax [orig:363 it_113->_vptr.Iterator ] [363])
        (mem/f:DI (reg/f:DI 5 di [orig:141 it ] [141]) [3 it_113->_vptr.Iterator+0 S8 A64])) db/builder.cc:71 89 {*movdi_internal}
     (nil))
(call_insn:TI 567 564 576 59 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:363 it_113->_vptr.Iterator ] [363])
                    (const_int 8 [0x8])) [3 MEM[(int (*__vtbl_ptr_type) () *)_120 + 8B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_121;(struct Iterator)it_113->1) S1 A8])
        (const_int 0 [0])) db/builder.cc:71 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:363 it_113->_vptr.Iterator ] [363])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (expr_list:REG_CALL_DECL (nil)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       60 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 60, loop depth 0, count 0, freq 3176, maybe hot
;;  prev block 59, next block 61, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       47 [93.3%]  (CAN_FALLTHRU)
;;              59 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              5 [50.0%]  (CAN_FALLTHRU)
;; bb 60 artificial_defs: { }
;; bb 60 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	
(code_label 576 567 577 60 29 "" [2 uses])
(note 577 576 580 60 [bb 60] NOTE_INSN_BASIC_BLOCK)
(note 580 577 579 60 NOTE_INSN_DELETED)
(insn:TI 579 580 581 60 (set (reg/f:DI 0 ax [orig:366 iter_19(D)->_vptr.Iterator ] [366])
        (mem/f:DI (reg/v/f:DI 3 bx [orig:258 iter ] [258]) [3 iter_19(D)->_vptr.Iterator+0 S8 A64])) db/builder.cc:76 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/v/f:DI 3 bx [orig:258 iter ] [258]) [3 iter_19(D)->_vptr.Iterator+0 S8 A64])
        (nil)))
(insn 581 579 582 60 (set (reg:DI 4 si)
        (reg/v/f:DI 3 bx [orig:258 iter ] [258])) db/builder.cc:76 89 {*movdi_internal}
     (nil))
(insn 582 581 583 60 (set (reg:DI 5 di)
        (reg/f:DI 43 r14 [447])) db/builder.cc:76 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 43 r14 [447])
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
                (const_int -96 [0xffffffffffffffa0]))
            (nil))))
(call_insn:TI 583 582 584 60 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:366 iter_19(D)->_vptr.Iterator ] [366])
                    (const_int 80 [0x50])) [3 MEM[(int (*__vtbl_ptr_type) () *)_132 + 80B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_133;(const struct Iterator)iter_19(D)->10) S1 A8])
        (const_int 0 [0])) db/builder.cc:76 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:366 iter_19(D)->_vptr.Iterator ] [366])
                (expr_list:REG_CALL_DECL (nil)
                    (expr_list:REG_EH_REGION (const_int 2 [0x2])
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       155 (ABNORMAL,ABNORMAL_CALL,EH)
;;              61 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 61, loop depth 0, count 0, freq 3176, maybe hot
;;  prev block 60, next block 62, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       60 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 61 artificial_defs: { }
;; bb 61 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(note 584 583 585 61 [bb 61] NOTE_INSN_BASIC_BLOCK)
(insn:TI 585 584 586 61 (set (reg/f:DI 5 di [orig:151 D.51463 ] [151])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [3 D.44418.state_+0 S8 A128])) ./include/leveldb/status.h:52 89 {*movdi_internal}
     (nil))
(insn:TI 586 585 587 61 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:151 D.51463 ] [151])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 587 586 588 61 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 973)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 973)
;;  succ:       62 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              72 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 62, loop depth 0, count 0, freq 2218, maybe hot
;;  prev block 61, next block 63, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       61 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 62 artificial_defs: { }
;; bb 62 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 3 [bx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	
(note 588 587 593 62 [bb 62] NOTE_INSN_BASIC_BLOCK)
(note 593 588 590 62 NOTE_INSN_DELETED)
(call_insn:TI 590 593 592 62 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn:TI 592 590 1434 62 (set (reg/f:DI 0 ax [orig:369 iter_19(D)->_vptr.Iterator ] [369])
        (mem/f:DI (reg/v/f:DI 3 bx [orig:258 iter ] [258]) [3 iter_19(D)->_vptr.Iterator+0 S8 A64])) db/builder.cc:77 89 {*movdi_internal}
     (nil))
(insn 1434 592 594 62 (set (reg/f:DI 5 di [368])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 144 [0x90]))) db/builder.cc:77 214 {*leadi}
     (nil))
(insn 594 1434 596 62 (set (reg:DI 4 si)
        (reg/v/f:DI 3 bx [orig:258 iter ] [258])) db/builder.cc:77 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 3 bx [orig:258 iter ] [258])
        (nil)))
(call_insn:TI 596 594 597 62 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:369 iter_19(D)->_vptr.Iterator ] [369])
                    (const_int 80 [0x50])) [3 MEM[(int (*__vtbl_ptr_type) () *)_138 + 80B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_139;(const struct Iterator)iter_19(D)->10) S1 A8])
        (const_int 0 [0])) db/builder.cc:77 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:369 iter_19(D)->_vptr.Iterator ] [369])
                (expr_list:REG_CALL_DECL (nil)
                    (expr_list:REG_EH_REGION (const_int 2 [0x2])
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       155 (ABNORMAL,ABNORMAL_CALL,EH)
;;              63 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 63, loop depth 0, count 0, freq 2218, maybe hot
;;  prev block 62, next block 64, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       62 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 63 artificial_defs: { }
;; bb 63 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
(note 597 596 598 63 [bb 63] NOTE_INSN_BASIC_BLOCK)
(insn:TI 598 597 599 63 (set (reg/f:DI 0 ax [orig:144 D.51463 ] [144])
        (mem/f:DI (reg/f:DI 6 bp [orig:253 <retval> ] [253]) [3 s_15(D)->state_+0 S8 A64])) ./include/leveldb/status.h:98 89 {*movdi_internal}
     (nil))
(insn 599 598 600 63 (set (reg/f:DI 5 di [orig:168 D.51463 ] [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 144 [0x90])) [3 D.44419.state_+0 S8 A128])) ./include/leveldb/status.h:98 89 {*movdi_internal}
     (nil))
(insn:TI 600 599 601 63 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:144 D.51463 ] [144])
            (reg/f:DI 5 di [orig:168 D.51463 ] [168]))) ./include/leveldb/status.h:98 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 601 600 602 63 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 622)
            (pc))) ./include/leveldb/status.h:98 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1014 (nil)))
 -> 622)
;;  succ:       64 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;;              70 [10.1%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 64, loop depth 0, count 0, freq 1993, maybe hot
;;  prev block 63, next block 65, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       63 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 64 artificial_defs: { }
;; bb 64 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(note 602 601 603 64 [bb 64] NOTE_INSN_BASIC_BLOCK)
(insn:TI 603 602 604 64 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:144 D.51463 ] [144])
            (const_int 0 [0]))) ./include/leveldb/status.h:99 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 604 603 605 64 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 609)
            (pc))) ./include/leveldb/status.h:99 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 609)
;;  succ:       65 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              66 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 65, loop depth 0, count 0, freq 1392, maybe hot
;;  prev block 64, next block 66, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       64 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 65 artificial_defs: { }
;; bb 65 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 5 [di]
;; live  kill	
(note 605 604 606 65 [bb 65] NOTE_INSN_BASIC_BLOCK)
(insn:TI 606 605 607 65 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:144 D.51463 ] [144])) ./include/leveldb/status.h:99 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:144 D.51463 ] [144])
        (nil)))
(call_insn:TI 607 606 608 65 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:99 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn:TI 608 607 609 65 (set (reg/f:DI 5 di [orig:168 D.51463 ] [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 144 [0x90])) [3 D.44419.state_+0 S8 A128])) 89 {*movdi_internal}
     (nil))
;;  succ:       66 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 66, loop depth 0, count 0, freq 1993, maybe hot
;;  prev block 65, next block 67, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       64 [30.2%]  (CAN_FALLTHRU)
;;              65 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 66 artificial_defs: { }
;; bb 66 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 609 608 610 66 73 "" [1 uses])
(note 610 609 611 66 [bb 66] NOTE_INSN_BASIC_BLOCK)
(insn:TI 611 610 612 66 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:168 D.51463 ] [168])
            (const_int 0 [0]))) ./include/leveldb/status.h:100 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 612 611 613 66 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1011)
            (pc))) ./include/leveldb/status.h:100 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 1011)
;;  succ:       67 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              96 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 67, loop depth 0, count 0, freq 1392, maybe hot
;;  prev block 66, next block 68, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       66 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 67 artificial_defs: { }
;; bb 67 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
(note 613 612 615 67 [bb 67] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 615 613 1035 67 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZN7leveldb6Status9CopyStateEPKc") [flags 0x41]  <function_decl 0x7f0d12f4c000 CopyState>) [0 CopyState S1 A8])
            (const_int 0 [0]))) ./include/leveldb/status.h:100 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 14 [0xe])
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb6Status9CopyStateEPKc") [flags 0x41]  <function_decl 0x7f0d12f4c000 CopyState>)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       148 (ABNORMAL,ABNORMAL_CALL,EH)
;;              68 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 68, loop depth 0, count 0, freq 1392, maybe hot
;;  prev block 67, next block 69, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       67 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 68 artificial_defs: { }
;; bb 68 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di]
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 5 [di]
;; live  kill	
(note 1035 615 618 68 [bb 68] NOTE_INSN_BASIC_BLOCK)
(insn:TI 618 1035 619 68 (set (reg/f:DI 5 di [orig:168 D.51463 ] [168])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 144 [0x90])) [3 D.44419.state_+0 S8 A128])) 89 {*movdi_internal}
     (nil))
;;  succ:       69 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 69, loop depth 0, count 0, freq 1993, maybe hot
;;  prev block 68, next block 70, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       68 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              96 [100.0%]  (CAN_FALLTHRU)
;; bb 69 artificial_defs: { }
;; bb 69 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	
;; live  kill	
(code_label 619 618 620 69 74 "" [1 uses])
(note 620 619 621 69 [bb 69] NOTE_INSN_BASIC_BLOCK)
(insn:TI 621 620 622 69 (set (mem/f:DI (reg/f:DI 6 bp [orig:253 <retval> ] [253]) [3 s_15(D)->state_+0 S8 A64])
        (reg/f:DI 0 ax [orig:214 D.51463 ] [214])) ./include/leveldb/status.h:100 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:214 D.51463 ] [214])
        (nil)))
;;  succ:       70 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 70, loop depth 0, count 0, freq 2218, maybe hot
;;  prev block 69, next block 71, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       69 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              63 [10.1%]  (CAN_FALLTHRU)
;; bb 70 artificial_defs: { }
;; bb 70 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 622 621 623 70 72 "" [1 uses])
(note 623 622 624 70 [bb 70] NOTE_INSN_BASIC_BLOCK)
(insn:TI 624 623 625 70 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:168 D.51463 ] [168])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 625 624 626 70 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 973)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 973)
;;  succ:       71 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              72 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 71, loop depth 0, count 0, freq 1549, maybe hot
;;  prev block 70, next block 72, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       70 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 71 artificial_defs: { }
;; bb 71 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	
;; live  kill	
(note 626 625 628 71 [bb 71] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 628 626 973 71 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       72 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 72, loop depth 0, count 0, freq 3176, maybe hot
;;  prev block 71, next block 73, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       70 [30.2%]  (CAN_FALLTHRU)
;;              71 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              61 [30.2%]  (CAN_FALLTHRU)
;; bb 72 artificial_defs: { }
;; bb 72 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 973 628 631 72 110 "" [2 uses])
(note 631 973 632 72 [bb 72] NOTE_INSN_BASIC_BLOCK)
(insn:TI 632 631 633 72 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:DI (reg/f:DI 6 bp [orig:253 <retval> ] [253]) [3 MEM[(const struct Status *)s_15(D)].state_+0 S8 A64])
            (const_int 0 [0]))) db/builder.cc:80 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 633 632 976 72 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1635)
            (pc))) db/builder.cc:80 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1500 (nil)))
 -> 1635)
;;  succ:       86 [15.0%]  (CAN_FALLTHRU)
;;              73 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 73, loop depth 0, count 0, freq 2938, maybe hot
;;  prev block 72, next block 74, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       72 [85.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              87 [100.0%]  (CAN_FALLTHRU)
;; bb 73 artificial_defs: { }
;; bb 73 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp] 42 [r13]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(code_label 976 633 977 73 76 "" [1 uses])
(note 977 976 981 73 [bb 73] NOTE_INSN_BASIC_BLOCK)
(note 981 977 978 73 NOTE_INSN_DELETED)
(insn:TI 978 981 979 73 (set (reg/f:DI 0 ax [orig:440 env_30(D)->_vptr.Env ] [440])
        (mem/f:DI (reg/v/f:DI 42 r13 [orig:255 env ] [255]) [3 env_30(D)->_vptr.Env+0 S8 A64])) db/builder.cc:83 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/v/f:DI 42 r13 [orig:255 env ] [255]) [3 env_30(D)->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 979 978 983 73 (set (reg/f:DI 0 ax [orig:159 D.51465 ] [159])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:440 env_30(D)->_vptr.Env ] [440])
                (const_int 56 [0x38])) [3 MEM[(int (*__vtbl_ptr_type) () *)_147 + 56B]+0 S8 A64])) db/builder.cc:83 89 {*movdi_internal}
     (nil))
(insn 983 979 984 73 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:159 D.51465 ] [159])
            (mem/u/c:DI (const:DI (unspec:DI [
                            (symbol_ref/i:DI ("_ZN7leveldb10EnvWrapper10DeleteFileERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE") [flags 0x1]  <function_decl 0x7f0d12352000 DeleteFile>)
                        ] UNSPEC_GOTPCREL)) [18  S8 A8]))) 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 984 983 640 73 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1636)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2013 (nil)))
 -> 1636)
;;  succ:       74 [79.9%]  (FALLTHRU,CAN_FALLTHRU)
;;              99 [20.1%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 42 [r13] 44 [r15]

;; basic block 74, loop depth 0, count 0, freq 736, maybe hot
;; Invalid sum of incoming frequencies 2347, should be 736
;;  prev block 73, next block 75, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       73 [79.9%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 74 artificial_defs: { }
;; bb 74 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 42 [r13]
;; lr  def 	 1 [dx] 2 [cx] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx] 2 [cx] 4 [si] 17 [flags]
;; live  kill	
(note 640 984 641 74 [bb 74] NOTE_INSN_BASIC_BLOCK)
(insn:TI 641 640 642 74 (set (reg/f:DI 4 si [orig:154 D.51471 ] [154])
        (mem/f:DI (plus:DI (reg/v/f:DI 42 r13 [orig:255 env ] [255])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)env_30(D)].target_+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 42 r13 [orig:255 env ] [255])
        (nil)))
(insn:TI 642 641 643 74 (set (reg/f:DI 1 dx [orig:371 _141->_vptr.Env ] [371])
        (mem/f:DI (reg/f:DI 4 si [orig:154 D.51471 ] [154]) [3 _141->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:154 D.51471 ] [154]) [3 _141->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 643 642 646 74 (set (reg/f:DI 2 cx [orig:216 D.51465 ] [216])
        (mem/f:DI (plus:DI (reg/f:DI 1 dx [orig:371 _141->_vptr.Env ] [371])
                (const_int 56 [0x38])) [3 MEM[(int (*__vtbl_ptr_type) () *)_291 + 56B]+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:371 _141->_vptr.Env ] [371])
        (nil)))
(insn:TI 646 643 647 74 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 2 cx [orig:216 D.51465 ] [216])
            (reg/f:DI 0 ax [orig:159 D.51465 ] [159]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:159 D.51465 ] [159])
        (nil)))
(jump_insn:TI 647 646 648 74 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 792)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1977 (nil)))
 -> 792)
;;  succ:       75 [80.2%]  (FALLTHRU,CAN_FALLTHRU)
;;              90 [19.8%]  (CAN_FALLTHRU)
;; lr  out 	 2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 2 [cx] 4 [si] 6 [bp] 7 [sp] 44 [r15]

;; basic block 75, loop depth 0, count 0, freq 590, maybe hot
;;  prev block 74, next block 76, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       74 [80.2%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 75 artificial_defs: { }
;; bb 75 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 2 [cx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 2 [cx] 4 [si] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
(note 648 647 649 75 [bb 75] NOTE_INSN_BASIC_BLOCK)
(insn:TI 649 648 650 75 (set (reg/f:DI 4 si [orig:218 D.51471 ] [218])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:154 D.51471 ] [154])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_141].target_+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 650 649 651 75 (set (reg/f:DI 0 ax [orig:374 _295->_vptr.Env ] [374])
        (mem/f:DI (reg/f:DI 4 si [orig:218 D.51471 ] [218]) [3 _295->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:218 D.51471 ] [218]) [3 _295->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 651 650 654 75 (set (reg/f:DI 0 ax [orig:220 D.51465 ] [220])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:374 _295->_vptr.Env ] [374])
                (const_int 56 [0x38])) [3 MEM[(int (*__vtbl_ptr_type) () *)_296 + 56B]+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 654 651 655 75 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:220 D.51465 ] [220])
            (reg/f:DI 2 cx [orig:216 D.51465 ] [216]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:216 D.51465 ] [216])
        (nil)))
(jump_insn:TI 655 654 656 75 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 782)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1963 (nil)))
 -> 782)
;;  succ:       76 [80.4%]  (FALLTHRU,CAN_FALLTHRU)
;;              97 [19.6%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 0 [ax] 4 [si] 6 [bp] 7 [sp] 44 [r15]

;; basic block 76, loop depth 0, count 0, freq 474, maybe hot
;;  prev block 75, next block 77, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       75 [80.4%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 76 artificial_defs: { }
;; bb 76 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 1 [dx] 2 [cx] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 4 [si] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 1 [dx] 2 [cx] 4 [si] 17 [flags]
;; live  kill	
(note 656 655 657 76 [bb 76] NOTE_INSN_BASIC_BLOCK)
(insn:TI 657 656 658 76 (set (reg/f:DI 4 si [orig:222 D.51471 ] [222])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:218 D.51471 ] [218])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_295].target_+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 658 657 659 76 (set (reg/f:DI 1 dx [orig:377 _300->_vptr.Env ] [377])
        (mem/f:DI (reg/f:DI 4 si [orig:222 D.51471 ] [222]) [3 _300->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:222 D.51471 ] [222]) [3 _300->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 659 658 662 76 (set (reg/f:DI 2 cx [orig:224 D.51465 ] [224])
        (mem/f:DI (plus:DI (reg/f:DI 1 dx [orig:377 _300->_vptr.Env ] [377])
                (const_int 56 [0x38])) [3 MEM[(int (*__vtbl_ptr_type) () *)_301 + 56B]+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:377 _300->_vptr.Env ] [377])
        (nil)))
(insn:TI 662 659 663 76 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 2 cx [orig:224 D.51465 ] [224])
            (reg/f:DI 0 ax [orig:220 D.51465 ] [220]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:220 D.51465 ] [220])
        (nil)))
(jump_insn:TI 663 662 664 76 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 792)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1953 (nil)))
 -> 792)
;;  succ:       77 [80.5%]  (FALLTHRU,CAN_FALLTHRU)
;;              90 [19.5%]  (CAN_FALLTHRU)
;; lr  out 	 2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 2 [cx] 4 [si] 6 [bp] 7 [sp] 44 [r15]

;; basic block 77, loop depth 0, count 0, freq 382, maybe hot
;;  prev block 76, next block 78, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       76 [80.5%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 77 artificial_defs: { }
;; bb 77 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 2 [cx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 2 [cx] 4 [si] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
(note 664 663 665 77 [bb 77] NOTE_INSN_BASIC_BLOCK)
(insn:TI 665 664 666 77 (set (reg/f:DI 4 si [orig:226 D.51471 ] [226])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:222 D.51471 ] [222])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_300].target_+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 666 665 667 77 (set (reg/f:DI 0 ax [orig:380 _305->_vptr.Env ] [380])
        (mem/f:DI (reg/f:DI 4 si [orig:226 D.51471 ] [226]) [3 _305->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:226 D.51471 ] [226]) [3 _305->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 667 666 670 77 (set (reg/f:DI 0 ax [orig:228 D.51465 ] [228])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:380 _305->_vptr.Env ] [380])
                (const_int 56 [0x38])) [3 MEM[(int (*__vtbl_ptr_type) () *)_306 + 56B]+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 670 667 671 77 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:228 D.51465 ] [228])
            (reg/f:DI 2 cx [orig:224 D.51465 ] [224]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:224 D.51465 ] [224])
        (nil)))
(jump_insn:TI 671 670 672 77 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 782)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1933 (nil)))
 -> 782)
;;  succ:       78 [80.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              97 [19.3%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 0 [ax] 4 [si] 6 [bp] 7 [sp] 44 [r15]

;; basic block 78, loop depth 0, count 0, freq 308, maybe hot
;;  prev block 77, next block 79, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       77 [80.7%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 78 artificial_defs: { }
;; bb 78 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 1 [dx] 2 [cx] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 4 [si] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 1 [dx] 2 [cx] 4 [si] 17 [flags]
;; live  kill	
(note 672 671 673 78 [bb 78] NOTE_INSN_BASIC_BLOCK)
(insn:TI 673 672 674 78 (set (reg/f:DI 4 si [orig:230 D.51471 ] [230])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:226 D.51471 ] [226])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_305].target_+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 674 673 675 78 (set (reg/f:DI 1 dx [orig:383 _310->_vptr.Env ] [383])
        (mem/f:DI (reg/f:DI 4 si [orig:230 D.51471 ] [230]) [3 _310->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:230 D.51471 ] [230]) [3 _310->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 675 674 678 78 (set (reg/f:DI 2 cx [orig:232 D.51465 ] [232])
        (mem/f:DI (plus:DI (reg/f:DI 1 dx [orig:383 _310->_vptr.Env ] [383])
                (const_int 56 [0x38])) [3 MEM[(int (*__vtbl_ptr_type) () *)_311 + 56B]+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:383 _310->_vptr.Env ] [383])
        (nil)))
(insn:TI 678 675 679 78 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 2 cx [orig:232 D.51465 ] [232])
            (reg/f:DI 0 ax [orig:228 D.51465 ] [228]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:228 D.51465 ] [228])
        (nil)))
(jump_insn:TI 679 678 680 78 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 792)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1839 (nil)))
 -> 792)
;;  succ:       79 [81.6%]  (FALLTHRU,CAN_FALLTHRU)
;;              90 [18.4%]  (CAN_FALLTHRU)
;; lr  out 	 2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 2 [cx] 4 [si] 6 [bp] 7 [sp] 44 [r15]

;; basic block 79, loop depth 0, count 0, freq 251, maybe hot
;;  prev block 78, next block 80, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       78 [81.6%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 79 artificial_defs: { }
;; bb 79 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 2 [cx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 2 [cx] 4 [si] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
(note 680 679 681 79 [bb 79] NOTE_INSN_BASIC_BLOCK)
(insn:TI 681 680 682 79 (set (reg/f:DI 4 si [orig:234 D.51471 ] [234])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:230 D.51471 ] [230])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_310].target_+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 682 681 683 79 (set (reg/f:DI 0 ax [orig:386 _315->_vptr.Env ] [386])
        (mem/f:DI (reg/f:DI 4 si [orig:234 D.51471 ] [234]) [3 _315->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:234 D.51471 ] [234]) [3 _315->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 683 682 686 79 (set (reg/f:DI 0 ax [orig:236 D.51465 ] [236])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:386 _315->_vptr.Env ] [386])
                (const_int 56 [0x38])) [3 MEM[(int (*__vtbl_ptr_type) () *)_316 + 56B]+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 686 683 687 79 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:236 D.51465 ] [236])
            (reg/f:DI 2 cx [orig:232 D.51465 ] [232]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:232 D.51465 ] [232])
        (nil)))
(jump_insn:TI 687 686 688 79 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 782)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1798 (nil)))
 -> 782)
;;  succ:       80 [82.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              97 [18.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 0 [ax] 4 [si] 6 [bp] 7 [sp] 44 [r15]

;; basic block 80, loop depth 0, count 0, freq 206, maybe hot
;;  prev block 79, next block 81, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       79 [82.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 80 artificial_defs: { }
;; bb 80 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 0 [ax] 4 [si] 7 [sp]
;; lr  def 	 1 [dx] 2 [cx] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 4 [si] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 1 [dx] 2 [cx] 4 [si] 17 [flags]
;; live  kill	
(note 688 687 689 80 [bb 80] NOTE_INSN_BASIC_BLOCK)
(insn:TI 689 688 690 80 (set (reg/f:DI 4 si [orig:238 D.51471 ] [238])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:234 D.51471 ] [234])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_315].target_+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 690 689 691 80 (set (reg/f:DI 1 dx [orig:389 _320->_vptr.Env ] [389])
        (mem/f:DI (reg/f:DI 4 si [orig:238 D.51471 ] [238]) [3 _320->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:238 D.51471 ] [238]) [3 _320->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 691 690 694 80 (set (reg/f:DI 2 cx [orig:240 D.51465 ] [240])
        (mem/f:DI (plus:DI (reg/f:DI 1 dx [orig:389 _320->_vptr.Env ] [389])
                (const_int 56 [0x38])) [3 MEM[(int (*__vtbl_ptr_type) () *)_321 + 56B]+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 1 dx [orig:389 _320->_vptr.Env ] [389])
        (nil)))
(insn:TI 694 691 695 80 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 2 cx [orig:240 D.51465 ] [240])
            (reg/f:DI 0 ax [orig:236 D.51465 ] [236]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:236 D.51465 ] [236])
        (nil)))
(jump_insn:TI 695 694 696 80 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 792)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1935 (nil)))
 -> 792)
;;  succ:       81 [80.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              90 [19.4%]  (CAN_FALLTHRU)
;; lr  out 	 2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 2 [cx] 4 [si] 6 [bp] 7 [sp] 44 [r15]

;; basic block 81, loop depth 0, count 0, freq 166, maybe hot
;;  prev block 80, next block 82, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       80 [80.7%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 81 artificial_defs: { }
;; bb 81 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 2 [cx] 4 [si] 7 [sp]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 2 [cx] 4 [si] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	
(note 696 695 697 81 [bb 81] NOTE_INSN_BASIC_BLOCK)
(insn:TI 697 696 698 81 (set (reg/f:DI 4 si [orig:242 D.51471 ] [242])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:238 D.51471 ] [238])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_320].target_+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 698 697 699 81 (set (reg/f:DI 0 ax [orig:392 _325->_vptr.Env ] [392])
        (mem/f:DI (reg/f:DI 4 si [orig:242 D.51471 ] [242]) [3 _325->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:242 D.51471 ] [242]) [3 _325->_vptr.Env+0 S8 A64])
        (nil)))
(insn:TI 699 698 702 81 (set (reg/f:DI 0 ax [orig:244 D.51465 ] [244])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:392 _325->_vptr.Env ] [392])
                (const_int 56 [0x38])) [3 MEM[(int (*__vtbl_ptr_type) () *)_326 + 56B]+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn:TI 702 699 703 81 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:244 D.51465 ] [244])
            (reg/f:DI 2 cx [orig:240 D.51465 ] [240]))) 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:240 D.51465 ] [240])
        (nil)))
(jump_insn:TI 703 702 704 81 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 782)
            (pc))) 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 2000 (nil)))
 -> 782)
;;  succ:       82 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              97 [20.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 0 [ax] 4 [si] 6 [bp] 7 [sp] 44 [r15]

;; basic block 82, loop depth 0, count 0, freq 133, maybe hot
;;  prev block 81, next block 83, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       81 [80.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 82 artificial_defs: { }
;; bb 82 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 4 [si] 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 4 [si] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	
(note 704 703 709 82 [bb 82] NOTE_INSN_BASIC_BLOCK)
(note 709 704 705 82 NOTE_INSN_DELETED)
(insn:TI 705 709 1433 82 (set (reg/f:DI 4 si [orig:246 D.51471 ] [246])
        (mem/f:DI (plus:DI (reg/f:DI 4 si [orig:242 D.51471 ] [242])
                (const_int 8 [0x8])) [3 MEM[(struct EnvWrapper *)_325].target_+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(insn 1433 705 710 82 (set (reg/f:DI 5 di [395])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 160 [0xa0]))) ./include/leveldb/env.h:296 214 {*leadi}
     (nil))
(insn 710 1433 708 82 (set (reg:DI 1 dx)
        (reg/f:DI 44 r15 [450])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(insn:TI 708 710 713 82 (set (reg/f:DI 0 ax [orig:397 _330->_vptr.Env ] [397])
        (mem/f:DI (reg/f:DI 4 si [orig:246 D.51471 ] [246]) [3 _330->_vptr.Env+0 S8 A64])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (nil))
(call_insn:TI 713 708 1637 82 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:397 _330->_vptr.Env ] [397])
                    (const_int 56 [0x38])) [3 MEM[(int (*__vtbl_ptr_type) () *)_331 + 56B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_332;(struct Env)_330->7) S1 A8])
        (const_int 0 [0])) ./include/leveldb/env.h:296 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:397 _330->_vptr.Env ] [397])
                    (expr_list:REG_CALL_DECL (nil)
                        (expr_list:REG_EH_REGION (const_int 2 [0x2])
                            (nil)))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       83 [100.0%]  (FALLTHRU)
;;              155 (ABNORMAL,ABNORMAL_CALL,EH)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 44 [r15]

;; basic block 83, loop depth 0, count 0, freq 133, maybe hot
;;  prev block 82, next block 84, flags: (NEW, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       82 [100.0%]  (FALLTHRU)
;; bb 83 artificial_defs: { }
;; bb 83 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	
;; live  kill	
(note 1637 713 1638 83 [bb 83] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 1638 1637 1639 83 (set (pc)
        (label_ref 729)) 654 {jump}
     (nil)
 -> 729)
;;  succ:       91 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 44 [r15]

(barrier 1639 1638 228)
;; basic block 84, loop depth 0, count 0, freq 595, maybe hot
;;  prev block 83, next block 85, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [20.0%]  (CAN_FALLTHRU)
;; bb 84 artificial_defs: { }
;; bb 84 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 42 [r13] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 43 [r14] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx] 2 [cx] 4 [si] 5 [di] 43 [r14]
;; live  kill	
(code_label 228 1639 229 84 30 "" [1 uses])
(note 229 228 1448 84 [bb 84] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1448 229 230 84 (set (reg/f:DI 43 r14 [447])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 128 [0x80]))) db/builder.cc:30 214 {*leadi}
     (nil))
(insn 230 1448 234 84 (set (reg/f:DI 5 di [323])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 48 [0x30]))) db/builder.cc:30 214 {*leadi}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))
        (nil)))
(insn 234 230 235 84 (set (reg:DI 1 dx)
        (reg/f:DI 44 r15 [450])) db/builder.cc:30 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(insn:TI 235 234 233 84 (set (reg:DI 4 si)
        (reg/v/f:DI 42 r13 [orig:255 env ] [255])) db/builder.cc:30 89 {*movdi_internal}
     (nil))
(insn:TI 233 235 237 84 (set (reg:DI 2 cx)
        (reg/f:DI 43 r14 [447])) db/builder.cc:30 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -96 [0xffffffffffffffa0]))
        (nil)))
(call_insn:TI 237 233 1640 84 (call (mem:QI (reg/f:DI 0 ax [orig:96 D.51465 ] [96]) [0  S1 A8])
        (const_int 0 [0])) db/builder.cc:30 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:96 D.51465 ] [96])
                        (expr_list:REG_EH_REGION (const_int 2 [0x2])
                            (expr_list:REG_CALL_DECL (nil)
                                (nil))))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       155 (ABNORMAL,ABNORMAL_CALL,EH)
;;              85 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 85, loop depth 0, count 0, freq 595, maybe hot
;;  prev block 84, next block 86, flags: (NEW, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       84 [100.0%]  (FALLTHRU)
;; bb 85 artificial_defs: { }
;; bb 85 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(note 1640 237 1641 85 [bb 85] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 1641 1640 1642 85 (set (pc)
        (label_ref 141)) 654 {jump}
     (nil)
 -> 141)
;;  succ:       16 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 1642 1641 1635)
;; basic block 86, loop depth 0, count 0, freq 476, maybe hot
;;  prev block 85, next block 87, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       72 [15.0%]  (CAN_FALLTHRU)
;; bb 86 artificial_defs: { }
;; bb 86 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp] 41 [r12]
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 1635 1642 634 86 227 "" [1 uses])
(note 634 1635 635 86 [bb 86] NOTE_INSN_BASIC_BLOCK)
(insn:TI 635 634 636 86 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:DI (plus:DI (reg/v/f:DI 41 r12 [orig:259 meta ] [259])
                    (const_int 16 [0x10])) [4 meta_17(D)->file_size+0 S8 A64])
            (const_int 0 [0]))) db/builder.cc:80 4 {*cmpdi_ccno_1}
     (expr_list:REG_DEAD (reg/v/f:DI 41 r12 [orig:259 meta ] [259])
        (nil)))
(jump_insn:TI 636 635 1643 86 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 817)
            (pc))) db/builder.cc:80 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 5000 (nil)))
 -> 817)
;;  succ:       26 [50.0%]  (CAN_FALLTHRU)
;;              87 [50.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 42 [r13] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 42 [r13] 44 [r15]

;; basic block 87, loop depth 0, count 0, freq 238, maybe hot
;;  prev block 86, next block 88, flags: (NEW, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       86 [50.0%]  (FALLTHRU)
;; bb 87 artificial_defs: { }
;; bb 87 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp] 42 [r13] 44 [r15]
;; live  gen 	
;; live  kill	
(note 1643 636 1644 87 [bb 87] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 1644 1643 1645 87 (set (pc)
        (label_ref 976)) 654 {jump}
     (nil)
 -> 976)
;;  succ:       73 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 42 [r13] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 42 [r13] 44 [r15]

(barrier 1645 1644 204)
;; basic block 88, loop depth 0, count 0, freq 877, maybe hot
;;  prev block 87, next block 89, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [20.0%]  (CAN_FALLTHRU)
;;              10 [19.7%]  (CAN_FALLTHRU)
;;              14 [19.5%]  (CAN_FALLTHRU)
;;              12 [20.0%]  (CAN_FALLTHRU)
;; bb 88 artificial_defs: { }
;; bb 88 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 4 [si] 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 43 [r14] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 4 [si] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx] 2 [cx] 5 [di] 43 [r14]
;; live  kill	
(code_label 204 1645 205 88 32 "" [4 uses])
(note 205 204 1450 88 [bb 88] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1450 205 206 88 (set (reg/f:DI 43 r14 [447])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 128 [0x80]))) ./include/leveldb/env.h:290 214 {*leadi}
     (nil))
(insn 206 1450 210 88 (set (reg/f:DI 5 di [317])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 48 [0x30]))) ./include/leveldb/env.h:290 214 {*leadi}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))
        (nil)))
(insn 210 206 209 88 (set (reg:DI 1 dx)
        (reg/f:DI 44 r15 [450])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(insn:TI 209 210 213 88 (set (reg:DI 2 cx)
        (reg/f:DI 43 r14 [447])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -96 [0xffffffffffffffa0]))
        (nil)))
(call_insn:TI 213 209 1646 88 (call (mem:QI (reg/f:DI 0 ax [orig:177 D.51465 ] [177]) [0  S1 A8])
        (const_int 0 [0])) ./include/leveldb/env.h:290 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 2 cx)
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:177 D.51465 ] [177])
                        (expr_list:REG_EH_REGION (const_int 2 [0x2])
                            (expr_list:REG_CALL_DECL (nil)
                                (nil))))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       155 (ABNORMAL,ABNORMAL_CALL,EH)
;;              89 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 89, loop depth 0, count 0, freq 877, maybe hot
;;  prev block 88, next block 90, flags: (NEW, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       88 [100.0%]  (FALLTHRU)
;; bb 89 artificial_defs: { }
;; bb 89 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(note 1646 213 1647 89 [bb 89] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 1647 1646 1648 89 (set (pc)
        (label_ref 141)) 654 {jump}
     (nil)
 -> 141)
;;  succ:       16 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 1648 1647 792)
;; basic block 90, loop depth 0, count 0, freq 335, maybe hot
;;  prev block 89, next block 91, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       74 [19.8%]  (CAN_FALLTHRU)
;;              80 [19.4%]  (CAN_FALLTHRU)
;;              78 [18.4%]  (CAN_FALLTHRU)
;;              76 [19.5%]  (CAN_FALLTHRU)
;; bb 90 artificial_defs: { }
;; bb 90 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 2 [cx] 4 [si] 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 2 [cx] 4 [si] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 1 [dx] 5 [di]
;; live  kill	
(code_label 792 1648 793 90 77 "" [4 uses])
(note 793 792 1425 90 [bb 90] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1425 793 796 90 (set (reg/f:DI 5 di [413])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 160 [0xa0]))) ./include/leveldb/env.h:296 214 {*leadi}
     (nil))
(insn 796 1425 799 90 (set (reg:DI 1 dx)
        (reg/f:DI 44 r15 [450])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(call_insn:TI 799 796 729 90 (call (mem:QI (reg/f:DI 2 cx [orig:216 D.51465 ] [216]) [0  S1 A8])
        (const_int 0 [0])) ./include/leveldb/env.h:296 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg/f:DI 2 cx [orig:216 D.51465 ] [216])
                (expr_list:REG_DEAD (reg:DI 1 dx)
                    (expr_list:REG_EH_REGION (const_int 2 [0x2])
                        (expr_list:REG_CALL_DECL (nil)
                            (nil)))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       155 (ABNORMAL,ABNORMAL_CALL,EH)
;;              91 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 44 [r15]

;; basic block 91, loop depth 0, count 0, freq 921, maybe hot
;;  prev block 90, next block 92, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       98 [100.0%]  (CAN_FALLTHRU)
;;              83 [100.0%]  (CAN_FALLTHRU)
;;              90 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              100 [100.0%]  (CAN_FALLTHRU)
;; bb 91 artificial_defs: { }
;; bb 91 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(code_label 729 799 714 91 87 "" [3 uses])
(note 714 729 715 91 [bb 91] NOTE_INSN_BASIC_BLOCK)
(insn:TI 715 714 716 91 (set (reg/f:DI 5 di [orig:166 D.51463 ] [166])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 160 [0xa0])) [3 D.44420.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn:TI 716 715 717 91 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:166 D.51463 ] [166])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 717 716 812 91 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 817)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 817)
;;  succ:       92 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              26 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 5 [di] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 5 [di] 6 [bp] 7 [sp] 44 [r15]

;; basic block 92, loop depth 0, count 0, freq 643, maybe hot
;;  prev block 91, next block 93, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       91 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 92 artificial_defs: { }
;; bb 92 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	
;; live  kill	
(note 812 717 814 92 [bb 92] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 814 812 1649 92 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn:TI 1649 814 1650 92 (set (pc)
        (label_ref 817)) 654 {jump}
     (nil)
 -> 817)
;;  succ:       26 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 44 [r15]

(barrier 1650 1649 216)
;; basic block 93, loop depth 0, count 0, freq 1096, maybe hot
;;  prev block 92, next block 94, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [20.0%]  (CAN_FALLTHRU)
;;              13 [19.4%]  (CAN_FALLTHRU)
;;              11 [19.8%]  (CAN_FALLTHRU)
;;              9 [20.0%]  (CAN_FALLTHRU)
;; bb 93 artificial_defs: { }
;; bb 93 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 16 [argp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 4 [si] 7 [sp] 37 [r8] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 43 [r14] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 4 [si] 6 [bp] 7 [sp] 37 [r8] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx] 2 [cx] 5 [di] 43 [r14]
;; live  kill	
(code_label 216 1650 217 93 31 "" [4 uses])
(note 217 216 1449 93 [bb 93] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1449 217 218 93 (set (reg/f:DI 43 r14 [447])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 128 [0x80]))) ./include/leveldb/env.h:290 214 {*leadi}
     (nil))
(insn 218 1449 222 93 (set (reg/f:DI 5 di [320])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 48 [0x30]))) ./include/leveldb/env.h:290 214 {*leadi}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -176 [0xffffffffffffff50]))
        (nil)))
(insn 222 218 221 93 (set (reg:DI 1 dx)
        (reg/f:DI 44 r15 [450])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(insn:TI 221 222 225 93 (set (reg:DI 2 cx)
        (reg/f:DI 43 r14 [447])) ./include/leveldb/env.h:290 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -96 [0xffffffffffffffa0]))
        (nil)))
(call_insn:TI 225 221 1651 93 (call (mem:QI (reg/f:DI 37 r8 [orig:173 D.51465 ] [173]) [0  S1 A8])
        (const_int 0 [0])) ./include/leveldb/env.h:290 660 {*call}
     (expr_list:REG_DEAD (reg/f:DI 37 r8 [orig:173 D.51465 ] [173])
        (expr_list:REG_DEAD (reg:DI 5 di)
            (expr_list:REG_DEAD (reg:DI 4 si)
                (expr_list:REG_DEAD (reg:DI 2 cx)
                    (expr_list:REG_DEAD (reg:DI 1 dx)
                        (expr_list:REG_EH_REGION (const_int 2 [0x2])
                            (expr_list:REG_CALL_DECL (nil)
                                (nil))))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       155 (ABNORMAL,ABNORMAL_CALL,EH)
;;              94 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 94, loop depth 0, count 0, freq 1096, maybe hot
;;  prev block 93, next block 95, flags: (NEW, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       93 [100.0%]  (FALLTHRU)
;; bb 94 artificial_defs: { }
;; bb 94 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(note 1651 225 1652 94 [bb 94] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 1652 1651 1653 94 (set (pc)
        (label_ref 141)) 654 {jump}
     (nil)
 -> 141)
;;  succ:       16 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 1653 1652 1003)
;; basic block 95, loop depth 0, count 0, freq 807, maybe hot
;;  prev block 94, next block 96, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       19 [30.2%]  (CAN_FALLTHRU)
;; bb 95 artificial_defs: { }
;; bb 95 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di]
;; live  kill	 17 [flags]
(code_label 1003 1653 1002 95 114 "" [1 uses])
(note 1002 1003 1627 95 [bb 95] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1627 1002 1654 95 (parallel [
            (set (reg/f:DI 5 di [orig:250 D.51463 ] [250])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) ./include/leveldb/status.h:100 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1654 1627 1655 95 (set (pc)
        (label_ref 258)) 654 {jump}
     (nil)
 -> 258)
;;  succ:       22 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 1655 1654 1011)
;; basic block 96, loop depth 0, count 0, freq 601, maybe hot
;;  prev block 95, next block 97, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       66 [30.2%]  (CAN_FALLTHRU)
;; bb 96 artificial_defs: { }
;; bb 96 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(code_label 1011 1655 1010 96 116 "" [1 uses])
(note 1010 1011 1622 96 [bb 96] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1622 1010 1656 96 (parallel [
            (set (reg/f:DI 0 ax [orig:214 D.51463 ] [214])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) ./include/leveldb/status.h:100 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1656 1622 1657 96 (set (pc)
        (label_ref 619)) 654 {jump}
     (nil)
 -> 619)
;;  succ:       69 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

(barrier 1657 1656 782)
;; basic block 97, loop depth 0, count 0, freq 268, maybe hot
;;  prev block 96, next block 98, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       75 [19.6%]  (CAN_FALLTHRU)
;;              77 [19.3%]  (CAN_FALLTHRU)
;;              81 [20.0%]  (CAN_FALLTHRU)
;;              79 [18.0%]  (CAN_FALLTHRU)
;; bb 97 artificial_defs: { }
;; bb 97 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 4 [si] 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 0 [ax] 4 [si] 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 4 [si] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 1 [dx] 5 [di]
;; live  kill	
(code_label 782 1657 783 97 78 "" [4 uses])
(note 783 782 1426 97 [bb 97] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1426 783 786 97 (set (reg/f:DI 5 di [411])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 160 [0xa0]))) ./include/leveldb/env.h:296 214 {*leadi}
     (nil))
(insn 786 1426 789 97 (set (reg:DI 1 dx)
        (reg/f:DI 44 r15 [450])) ./include/leveldb/env.h:296 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(call_insn:TI 789 786 1658 97 (call (mem:QI (reg/f:DI 0 ax [orig:220 D.51465 ] [220]) [0  S1 A8])
        (const_int 0 [0])) ./include/leveldb/env.h:296 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:220 D.51465 ] [220])
                    (expr_list:REG_EH_REGION (const_int 2 [0x2])
                        (expr_list:REG_CALL_DECL (nil)
                            (nil)))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       155 (ABNORMAL,ABNORMAL_CALL,EH)
;;              98 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 44 [r15]

;; basic block 98, loop depth 0, count 0, freq 268, maybe hot
;;  prev block 97, next block 99, flags: (NEW, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       97 [100.0%]  (FALLTHRU)
;; bb 98 artificial_defs: { }
;; bb 98 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	
;; live  kill	
(note 1658 789 1659 98 [bb 98] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 1659 1658 1660 98 (set (pc)
        (label_ref 729)) 654 {jump}
     (nil)
 -> 729)
;;  succ:       91 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 44 [r15]

(barrier 1660 1659 1636)
;; basic block 99, loop depth 0, count 0, freq 185, maybe hot
;; Invalid sum of incoming frequencies 591, should be 185
;;  prev block 98, next block 100, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       73 [20.1%]  (CAN_FALLTHRU)
;; bb 99 artificial_defs: { }
;; bb 99 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 42 [r13] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx] 4 [si] 5 [di]
;; live  kill	
(code_label 1636 1660 802 99 228 "" [1 uses])
(note 802 1636 1424 99 [bb 99] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1424 802 805 99 (set (reg/f:DI 5 di [415])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 160 [0xa0]))) db/builder.cc:83 214 {*leadi}
     (nil))
(insn 805 1424 806 99 (set (reg:DI 1 dx)
        (reg/f:DI 44 r15 [450])) db/builder.cc:83 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(insn 806 805 808 99 (set (reg:DI 4 si)
        (reg/v/f:DI 42 r13 [orig:255 env ] [255])) db/builder.cc:83 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/v/f:DI 42 r13 [orig:255 env ] [255])
        (nil)))
(call_insn:TI 808 806 1661 99 (call (mem:QI (reg/f:DI 0 ax [orig:159 D.51465 ] [159]) [0  S1 A8])
        (const_int 0 [0])) db/builder.cc:83 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg:DI 1 dx)
                (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:159 D.51465 ] [159])
                    (expr_list:REG_EH_REGION (const_int 2 [0x2])
                        (expr_list:REG_CALL_DECL (nil)
                            (nil)))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       155 (ABNORMAL,ABNORMAL_CALL,EH)
;;              100 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 44 [r15]

;; basic block 100, loop depth 0, count 0, freq 185, maybe hot
;;  prev block 99, next block 101, flags: (NEW, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       99 [100.0%]  (FALLTHRU)
;; bb 100 artificial_defs: { }
;; bb 100 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	
;; live  kill	
(note 1661 808 1662 100 [bb 100] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 1662 1661 1663 100 (set (pc)
        (label_ref 729)) 654 {jump}
     (nil)
 -> 729)
;;  succ:       91 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 44 [r15]

(barrier 1663 1662 1633)
;; basic block 101, loop depth 0, count 0, freq 30, maybe hot
;;  prev block 100, next block 102, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       42 [15.0%]  (CAN_FALLTHRU)
;; bb 101 artificial_defs: { }
;; bb 101 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 4 [si] 5 [di]
;; live  kill	
(code_label 1633 1663 354 101 225 "" [1 uses])
(note 354 1633 356 101 [bb 101] NOTE_INSN_BASIC_BLOCK)
(insn:TI 356 354 1439 101 (set (reg:DI 4 si)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [19 %sfp+-216 S8 A64])) db/builder.cc:45 89 {*movdi_internal}
     (nil))
(insn 1439 356 358 101 (set (reg/f:DI 5 di [350])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 64 [0x40]))) db/builder.cc:45 214 {*leadi}
     (nil))
(call_insn:TI 358 1439 359 101 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb12TableBuilder6FinishEv") [flags 0x41]  <function_decl 0x7f0d12a97948 Finish>) [0 Finish S1 A8])
        (const_int 0 [0])) db/builder.cc:45 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_EH_REGION (const_int 2 [0x2])
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb12TableBuilder6FinishEv") [flags 0x41]  <function_decl 0x7f0d12a97948 Finish>)
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       155 (ABNORMAL,ABNORMAL_CALL,EH)
;;              102 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 102, loop depth 0, count 0, freq 30, maybe hot
;;  prev block 101, next block 103, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       101 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 102 artificial_defs: { }
;; bb 102 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
(note 359 358 360 102 [bb 102] NOTE_INSN_BASIC_BLOCK)
(insn:TI 360 359 361 102 (set (reg/f:DI 0 ax [orig:97 D.51463 ] [97])
        (mem/f:DI (reg/f:DI 6 bp [orig:253 <retval> ] [253]) [3 s_15(D)->state_+0 S8 A64])) ./include/leveldb/status.h:98 89 {*movdi_internal}
     (nil))
(insn 361 360 362 102 (set (reg/f:DI 5 di [orig:167 D.51463 ] [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [3 D.44376.state_+0 S8 A128])) ./include/leveldb/status.h:98 89 {*movdi_internal}
     (nil))
(insn:TI 362 361 363 102 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:97 D.51463 ] [97])
            (reg/f:DI 5 di [orig:167 D.51463 ] [167]))) ./include/leveldb/status.h:98 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 363 362 364 102 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 384)
            (pc))) ./include/leveldb/status.h:98 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1014 (nil)))
 -> 384)
;;  succ:       103 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;;              109 [10.1%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 103, loop depth 0, count 0, freq 27, maybe hot
;;  prev block 102, next block 104, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       102 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 103 artificial_defs: { }
;; bb 103 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(note 364 363 365 103 [bb 103] NOTE_INSN_BASIC_BLOCK)
(insn:TI 365 364 366 103 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:97 D.51463 ] [97])
            (const_int 0 [0]))) ./include/leveldb/status.h:99 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 366 365 367 103 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 371)
            (pc))) ./include/leveldb/status.h:99 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 371)
;;  succ:       104 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              105 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 104, loop depth 0, count 0, freq 19, maybe hot
;;  prev block 103, next block 105, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       103 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 104 artificial_defs: { }
;; bb 104 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di]
;; live  kill	
(note 367 366 368 104 [bb 104] NOTE_INSN_BASIC_BLOCK)
(insn:TI 368 367 369 104 (set (reg:DI 5 di)
        (reg/f:DI 0 ax [orig:97 D.51463 ] [97])) ./include/leveldb/status.h:99 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:97 D.51463 ] [97])
        (nil)))
(call_insn:TI 369 368 370 104 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:99 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn:TI 370 369 371 104 (set (reg/f:DI 5 di [orig:167 D.51463 ] [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [3 D.44376.state_+0 S8 A128])) 89 {*movdi_internal}
     (nil))
;;  succ:       105 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 105, loop depth 0, count 0, freq 27, maybe hot
;;  prev block 104, next block 106, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       103 [30.2%]  (CAN_FALLTHRU)
;;              104 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 105 artificial_defs: { }
;; bb 105 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 371 370 372 105 50 "" [1 uses])
(note 372 371 373 105 [bb 105] NOTE_INSN_BASIC_BLOCK)
(insn:TI 373 372 374 105 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:167 D.51463 ] [167])
            (const_int 0 [0]))) ./include/leveldb/status.h:100 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 374 373 375 105 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1007)
            (pc))) ./include/leveldb/status.h:100 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 1007)
;;  succ:       106 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              135 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 106, loop depth 0, count 0, freq 19, maybe hot
;;  prev block 105, next block 107, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       105 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 106 artificial_defs: { }
;; bb 106 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
(note 375 374 377 106 [bb 106] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 377 375 1029 106 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZN7leveldb6Status9CopyStateEPKc") [flags 0x41]  <function_decl 0x7f0d12f4c000 CopyState>) [0 CopyState S1 A8])
            (const_int 0 [0]))) ./include/leveldb/status.h:100 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 9 [0x9])
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb6Status9CopyStateEPKc") [flags 0x41]  <function_decl 0x7f0d12f4c000 CopyState>)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       153 (ABNORMAL,ABNORMAL_CALL,EH)
;;              107 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 107, loop depth 0, count 0, freq 19, maybe hot
;;  prev block 106, next block 108, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       106 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 107 artificial_defs: { }
;; bb 107 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di]
;; live  kill	
(note 1029 377 380 107 [bb 107] NOTE_INSN_BASIC_BLOCK)
(insn:TI 380 1029 381 107 (set (reg/f:DI 5 di [orig:167 D.51463 ] [167])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [3 D.44376.state_+0 S8 A128])) 89 {*movdi_internal}
     (nil))
;;  succ:       108 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 108, loop depth 0, count 0, freq 27, maybe hot
;;  prev block 107, next block 109, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       107 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              135 [100.0%]  (CAN_FALLTHRU)
;; bb 108 artificial_defs: { }
;; bb 108 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(code_label 381 380 382 108 51 "" [1 uses])
(note 382 381 383 108 [bb 108] NOTE_INSN_BASIC_BLOCK)
(insn:TI 383 382 384 108 (set (mem/f:DI (reg/f:DI 6 bp [orig:253 <retval> ] [253]) [3 s_15(D)->state_+0 S8 A64])
        (reg/f:DI 0 ax [orig:207 D.51463 ] [207])) ./include/leveldb/status.h:100 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:207 D.51463 ] [207])
        (nil)))
;;  succ:       109 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 109, loop depth 0, count 0, freq 30, maybe hot
;;  prev block 108, next block 110, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       108 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              102 [10.1%]  (CAN_FALLTHRU)
;; bb 109 artificial_defs: { }
;; bb 109 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 384 383 385 109 49 "" [1 uses])
(note 385 384 386 109 [bb 109] NOTE_INSN_BASIC_BLOCK)
(insn:TI 386 385 387 109 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:167 D.51463 ] [167])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 387 386 388 109 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 949)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 949)
;;  succ:       110 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              111 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 110, loop depth 0, count 0, freq 21, maybe hot
;;  prev block 109, next block 111, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       109 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 110 artificial_defs: { }
;; bb 110 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(note 388 387 390 110 [bb 110] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 390 388 949 110 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       111 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 111, loop depth 0, count 0, freq 30, maybe hot
;;  prev block 110, next block 112, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       109 [30.2%]  (CAN_FALLTHRU)
;;              110 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 111 artificial_defs: { }
;; bb 111 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 949 390 950 111 52 "" [1 uses])
(note 950 949 952 111 [bb 111] NOTE_INSN_BASIC_BLOCK)
(insn:TI 952 950 953 111 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:DI (reg/f:DI 6 bp [orig:253 <retval> ] [253]) [3 MEM[(const struct Status *)s_15(D)].state_+0 S8 A64])
            (const_int 0 [0]))) db/builder.cc:46 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 953 952 393 111 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 405)
            (pc))) db/builder.cc:46 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 9328 (nil)))
 -> 405)
;;  succ:       112 [6.7%]  (FALLTHRU,CAN_FALLTHRU)
;;              44 [93.3%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 112, loop depth 0, count 0, freq 2
;;  prev block 111, next block 113, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       111 [6.7%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 112 artificial_defs: { }
;; bb 112 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(note 393 953 394 112 [bb 112] NOTE_INSN_BASIC_BLOCK)
(insn:TI 394 393 395 112 (set (reg:DI 5 di)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [19 %sfp+-216 S8 A64])) db/builder.cc:47 89 {*movdi_internal}
     (nil))
(call_insn:TI 395 394 1030 112 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZNK7leveldb12TableBuilder8FileSizeEv") [flags 0x41]  <function_decl 0x7f0d12a97bd0 FileSize>) [0 FileSize S1 A8])
            (const_int 0 [0]))) db/builder.cc:47 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 2 [0x2])
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZNK7leveldb12TableBuilder8FileSizeEv") [flags 0x41]  <function_decl 0x7f0d12a97bd0 FileSize>)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       155 (ABNORMAL,ABNORMAL_CALL,EH)
;;              113 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 113, loop depth 0, count 0, freq 2
;;  prev block 112, next block 114, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       112 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 113 artificial_defs: { }
;; bb 113 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 41 [r12]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(note 1030 395 398 113 [bb 113] NOTE_INSN_BASIC_BLOCK)
(insn:TI 398 1030 1664 113 (set (mem:DI (plus:DI (reg/v/f:DI 41 r12 [orig:259 meta ] [259])
                (const_int 16 [0x10])) [4 meta_17(D)->file_size+0 S8 A64])
        (reg:DI 0 ax [orig:119 D.51466 ] [119])) db/builder.cc:47 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax [orig:119 D.51466 ] [119])
        (nil)))
(jump_insn 1664 398 1665 113 (set (pc)
        (label_ref 405)) 654 {jump}
     (nil)
 -> 405)
;;  succ:       44 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 1665 1664 1634)
;; basic block 114, loop depth 0, count 0, freq 13, maybe hot
;;  prev block 113, next block 115, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       44 [6.7%]  (CAN_FALLTHRU)
;; bb 114 artificial_defs: { }
;; bb 114 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	
(code_label 1634 1665 417 114 226 "" [1 uses])
(note 417 1634 421 114 [bb 114] NOTE_INSN_BASIC_BLOCK)
(note 421 417 418 114 NOTE_INSN_DELETED)
(insn:TI 418 421 1438 114 (set (reg/f:DI 4 si [orig:122 D.51469 ] [122])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [3 file+0 S8 A128])) db/builder.cc:57 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -96 [0xffffffffffffffa0])) [3 file+0 S8 A128])
        (nil)))
(insn 1438 418 420 114 (set (reg/f:DI 5 di [351])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 80 [0x50]))) db/builder.cc:57 214 {*leadi}
     (nil))
(insn:TI 420 1438 424 114 (set (reg/f:DI 0 ax [orig:352 _83->_vptr.WritableFile ] [352])
        (mem/f:DI (reg/f:DI 4 si [orig:122 D.51469 ] [122]) [3 _83->_vptr.WritableFile+0 S8 A64])) db/builder.cc:57 89 {*movdi_internal}
     (nil))
(call_insn:TI 424 420 425 114 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:352 _83->_vptr.WritableFile ] [352])
                    (const_int 40 [0x28])) [3 MEM[(int (*__vtbl_ptr_type) () *)_84 + 40B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_85;(struct WritableFile)_83->5) S1 A8])
        (const_int 0 [0])) db/builder.cc:57 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:352 _83->_vptr.WritableFile ] [352])
                (expr_list:REG_CALL_DECL (nil)
                    (expr_list:REG_EH_REGION (const_int 2 [0x2])
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       155 (ABNORMAL,ABNORMAL_CALL,EH)
;;              115 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 115, loop depth 0, count 0, freq 13, maybe hot
;;  prev block 114, next block 116, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       114 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 115 artificial_defs: { }
;; bb 115 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(note 425 424 426 115 [bb 115] NOTE_INSN_BASIC_BLOCK)
(insn:TI 426 425 427 115 (set (reg/f:DI 5 di [orig:116 D.51463 ] [116])
        (mem/f:DI (reg/f:DI 6 bp [orig:253 <retval> ] [253]) [3 s_15(D)->state_+0 S8 A64])) ./include/leveldb/status.h:98 89 {*movdi_internal}
     (nil))
(insn 427 426 428 115 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:116 D.51463 ] [116])
            (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 80 [0x50])) [3 D.44377.state_+0 S8 A128]))) ./include/leveldb/status.h:98 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 428 427 429 115 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 447)
            (pc))) ./include/leveldb/status.h:98 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1014 (nil)))
 -> 447)
;;  succ:       116 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;;              122 [10.1%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 116, loop depth 0, count 0, freq 12, maybe hot
;;  prev block 115, next block 117, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       115 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 116 artificial_defs: { }
;; bb 116 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(note 429 428 430 116 [bb 116] NOTE_INSN_BASIC_BLOCK)
(insn:TI 430 429 431 116 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:116 D.51463 ] [116])
            (const_int 0 [0]))) ./include/leveldb/status.h:99 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 431 430 432 116 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 435)
            (pc))) ./include/leveldb/status.h:99 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 435)
;;  succ:       117 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              118 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 117, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 116, next block 118, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       116 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 117 artificial_defs: { }
;; bb 117 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(note 432 431 434 117 [bb 117] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 434 432 435 117 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:99 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       118 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 118, loop depth 0, count 0, freq 12, maybe hot
;;  prev block 117, next block 119, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       116 [30.2%]  (CAN_FALLTHRU)
;;              117 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 118 artificial_defs: { }
;; bb 118 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
(code_label 435 434 436 118 57 "" [1 uses])
(note 436 435 437 118 [bb 118] NOTE_INSN_BASIC_BLOCK)
(insn:TI 437 436 438 118 (set (reg/f:DI 5 di [orig:446 D.51463 ] [446])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [3 D.44377.state_+0 S8 A128])) ./include/leveldb/status.h:100 89 {*movdi_internal}
     (nil))
(insn:TI 438 437 1173 118 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:446 D.51463 ] [446])
            (const_int 0 [0]))) ./include/leveldb/status.h:100 4 {*cmpdi_ccno_1}
     (nil))
(insn 1173 438 439 118 (set (reg/f:DI 0 ax [orig:209 D.51463 ] [209])
        (reg/f:DI 5 di [orig:446 D.51463 ] [446])) ./include/leveldb/status.h:100 89 {*movdi_internal}
     (nil))
(jump_insn:TI 439 1173 440 118 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 444)
            (pc))) ./include/leveldb/status.h:100 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 444)
;;  succ:       119 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              121 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 119, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 118, next block 120, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       118 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 119 artificial_defs: { }
;; bb 119 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
(note 440 439 442 119 [bb 119] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 442 440 1031 119 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZN7leveldb6Status9CopyStateEPKc") [flags 0x41]  <function_decl 0x7f0d12f4c000 CopyState>) [0 CopyState S1 A8])
            (const_int 0 [0]))) ./include/leveldb/status.h:100 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 10 [0xa])
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb6Status9CopyStateEPKc") [flags 0x41]  <function_decl 0x7f0d12f4c000 CopyState>)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       144 (ABNORMAL,ABNORMAL_CALL,EH)
;;              120 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 120, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 119, next block 121, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       119 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 120 artificial_defs: { }
;; bb 120 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di]
;; live  kill	
(note 1031 442 1168 120 [bb 120] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1168 1031 444 120 (set (reg/f:DI 5 di [orig:446 D.51463 ] [446])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [3 D.44377.state_+0 S8 A128])) 89 {*movdi_internal}
     (nil))
;;  succ:       121 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 121, loop depth 0, count 0, freq 12, maybe hot
;;  prev block 120, next block 122, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       118 [30.2%]  (CAN_FALLTHRU)
;;              120 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 121 artificial_defs: { }
;; bb 121 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(code_label 444 1168 445 121 58 "" [1 uses])
(note 445 444 446 121 [bb 121] NOTE_INSN_BASIC_BLOCK)
(insn:TI 446 445 447 121 (set (mem/f:DI (reg/f:DI 6 bp [orig:253 <retval> ] [253]) [3 s_15(D)->state_+0 S8 A64])
        (reg/f:DI 0 ax [orig:209 D.51463 ] [209])) ./include/leveldb/status.h:100 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:209 D.51463 ] [209])
        (nil)))
;;  succ:       122 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 122, loop depth 0, count 0, freq 13, maybe hot
;;  prev block 121, next block 123, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       121 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              115 [10.1%]  (CAN_FALLTHRU)
;; bb 122 artificial_defs: { }
;; bb 122 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 447 446 448 122 56 "" [1 uses])
(note 448 447 450 122 [bb 122] NOTE_INSN_BASIC_BLOCK)
(insn:TI 450 448 451 122 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:446 D.51463 ] [446])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 451 450 452 122 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 455)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 455)
;;  succ:       123 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              124 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 123, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 122, next block 124, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       122 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 123 artificial_defs: { }
;; bb 123 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(note 452 451 454 123 [bb 123] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 454 452 455 123 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       124 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 124, loop depth 0, count 0, freq 13, maybe hot
;;  prev block 123, next block 125, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       122 [30.2%]  (CAN_FALLTHRU)
;;              123 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 124 artificial_defs: { }
;; bb 124 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 455 454 456 124 59 "" [1 uses])
(note 456 455 458 124 [bb 124] NOTE_INSN_BASIC_BLOCK)
(insn:TI 458 456 459 124 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:DI (reg/f:DI 6 bp [orig:253 <retval> ] [253]) [3 MEM[(const struct Status *)s_15(D)].state_+0 S8 A64])
            (const_int 0 [0]))) db/builder.cc:59 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 459 458 460 124 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 500)
            (pc))) db/builder.cc:59 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 0 (nil)))
 -> 500)
;;  succ:       125 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              45 (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 125, loop depth 0, count 0, freq 13, maybe hot
;;  prev block 124, next block 126, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       124 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 125 artificial_defs: { }
;; bb 125 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	
(note 460 459 464 125 [bb 125] NOTE_INSN_BASIC_BLOCK)
(note 464 460 461 125 NOTE_INSN_DELETED)
(insn:TI 461 464 1437 125 (set (reg/f:DI 4 si [orig:129 D.51469 ] [129])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 128 [0x80])) [3 file+0 S8 A128])) db/builder.cc:60 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -96 [0xffffffffffffffa0])) [3 file+0 S8 A128])
        (nil)))
(insn 1437 461 463 125 (set (reg/f:DI 5 di [354])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 96 [0x60]))) db/builder.cc:60 214 {*leadi}
     (nil))
(insn:TI 463 1437 467 125 (set (reg/f:DI 0 ax [orig:355 _93->_vptr.WritableFile ] [355])
        (mem/f:DI (reg/f:DI 4 si [orig:129 D.51469 ] [129]) [3 _93->_vptr.WritableFile+0 S8 A64])) db/builder.cc:60 89 {*movdi_internal}
     (nil))
(call_insn:TI 467 463 468 125 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:355 _93->_vptr.WritableFile ] [355])
                    (const_int 24 [0x18])) [3 MEM[(int (*__vtbl_ptr_type) () *)_94 + 24B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_95;(struct WritableFile)_93->3) S1 A8])
        (const_int 0 [0])) db/builder.cc:60 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_DEAD (reg:DI 4 si)
            (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:355 _93->_vptr.WritableFile ] [355])
                (expr_list:REG_CALL_DECL (nil)
                    (expr_list:REG_EH_REGION (const_int 2 [0x2])
                        (nil))))))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       155 (ABNORMAL,ABNORMAL_CALL,EH)
;;              126 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 126, loop depth 0, count 0, freq 13, maybe hot
;;  prev block 125, next block 127, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       125 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 126 artificial_defs: { }
;; bb 126 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(note 468 467 469 126 [bb 126] NOTE_INSN_BASIC_BLOCK)
(insn:TI 469 468 470 126 (set (reg/f:DI 5 di [orig:125 D.51463 ] [125])
        (mem/f:DI (reg/f:DI 6 bp [orig:253 <retval> ] [253]) [3 s_15(D)->state_+0 S8 A64])) ./include/leveldb/status.h:98 89 {*movdi_internal}
     (nil))
(insn 470 469 471 126 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:125 D.51463 ] [125])
            (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                    (const_int 96 [0x60])) [3 D.44378.state_+0 S8 A128]))) ./include/leveldb/status.h:98 8 {*cmpdi_1}
     (nil))
(jump_insn:TI 471 470 472 126 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 490)
            (pc))) ./include/leveldb/status.h:98 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 1014 (nil)))
 -> 490)
;;  succ:       127 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;;              133 [10.1%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 127, loop depth 0, count 0, freq 12, maybe hot
;;  prev block 126, next block 128, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       126 [89.9%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 127 artificial_defs: { }
;; bb 127 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(note 472 471 473 127 [bb 127] NOTE_INSN_BASIC_BLOCK)
(insn:TI 473 472 474 127 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:125 D.51463 ] [125])
            (const_int 0 [0]))) ./include/leveldb/status.h:99 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 474 473 475 127 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 478)
            (pc))) ./include/leveldb/status.h:99 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 478)
;;  succ:       128 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              129 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 128, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 127, next block 129, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       127 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 128 artificial_defs: { }
;; bb 128 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(note 475 474 477 128 [bb 128] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 477 475 478 128 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:99 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       129 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 129, loop depth 0, count 0, freq 12, maybe hot
;;  prev block 128, next block 130, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       127 [30.2%]  (CAN_FALLTHRU)
;;              128 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 129 artificial_defs: { }
;; bb 129 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
(code_label 478 477 479 129 62 "" [1 uses])
(note 479 478 480 129 [bb 129] NOTE_INSN_BASIC_BLOCK)
(insn:TI 480 479 481 129 (set (reg/f:DI 5 di [orig:448 D.51463 ] [448])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [3 D.44378.state_+0 S8 A128])) ./include/leveldb/status.h:100 89 {*movdi_internal}
     (nil))
(insn:TI 481 480 1184 129 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:448 D.51463 ] [448])
            (const_int 0 [0]))) ./include/leveldb/status.h:100 4 {*cmpdi_ccno_1}
     (nil))
(insn 1184 481 482 129 (set (reg/f:DI 0 ax [orig:211 D.51463 ] [211])
        (reg/f:DI 5 di [orig:448 D.51463 ] [448])) ./include/leveldb/status.h:100 89 {*movdi_internal}
     (nil))
(jump_insn:TI 482 1184 483 129 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 487)
            (pc))) ./include/leveldb/status.h:100 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 487)
;;  succ:       130 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              132 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 130, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 129, next block 131, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       129 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 130 artificial_defs: { }
;; bb 130 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	
(note 483 482 485 130 [bb 130] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 485 483 1032 130 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZN7leveldb6Status9CopyStateEPKc") [flags 0x41]  <function_decl 0x7f0d12f4c000 CopyState>) [0 CopyState S1 A8])
            (const_int 0 [0]))) ./include/leveldb/status.h:100 669 {*call_value}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_EH_REGION (const_int 11 [0xb])
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb6Status9CopyStateEPKc") [flags 0x41]  <function_decl 0x7f0d12f4c000 CopyState>)
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       151 (ABNORMAL,ABNORMAL_CALL,EH)
;;              131 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 131, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 130, next block 132, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       130 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 131 artificial_defs: { }
;; bb 131 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di]
;; live  kill	
(note 1032 485 1170 131 [bb 131] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1170 1032 487 131 (set (reg/f:DI 5 di [orig:448 D.51463 ] [448])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [3 D.44378.state_+0 S8 A128])) 89 {*movdi_internal}
     (nil))
;;  succ:       132 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 132, loop depth 0, count 0, freq 12, maybe hot
;;  prev block 131, next block 133, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       129 [30.2%]  (CAN_FALLTHRU)
;;              131 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 132 artificial_defs: { }
;; bb 132 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 6 [bp] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(code_label 487 1170 488 132 63 "" [1 uses])
(note 488 487 489 132 [bb 132] NOTE_INSN_BASIC_BLOCK)
(insn:TI 489 488 490 132 (set (mem/f:DI (reg/f:DI 6 bp [orig:253 <retval> ] [253]) [3 s_15(D)->state_+0 S8 A64])
        (reg/f:DI 0 ax [orig:211 D.51463 ] [211])) ./include/leveldb/status.h:100 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [orig:211 D.51463 ] [211])
        (nil)))
;;  succ:       133 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 133, loop depth 0, count 0, freq 13, maybe hot
;;  prev block 132, next block 134, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       132 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              126 [10.1%]  (CAN_FALLTHRU)
;; bb 133 artificial_defs: { }
;; bb 133 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 490 489 491 133 61 "" [1 uses])
(note 491 490 493 133 [bb 133] NOTE_INSN_BASIC_BLOCK)
(insn:TI 493 491 494 133 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:448 D.51463 ] [448])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 494 493 495 133 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 500)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 500)
;;  succ:       134 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              45 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 134, loop depth 0, count 0, freq 9, maybe hot
;;  prev block 133, next block 135, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       133 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 134 artificial_defs: { }
;; bb 134 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(note 495 494 497 134 [bb 134] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 497 495 1666 134 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn:TI 1666 497 1667 134 (set (pc)
        (label_ref 500)) 654 {jump}
     (nil)
 -> 500)
;;  succ:       45 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 1667 1666 1007)
;; basic block 135, loop depth 0, count 0, freq 8, maybe hot
;;  prev block 134, next block 136, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       105 [30.2%]  (CAN_FALLTHRU)
;; bb 135 artificial_defs: { }
;; bb 135 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax]
;; live  kill	 17 [flags]
(code_label 1007 1667 1006 135 115 "" [1 uses])
(note 1006 1007 1624 135 [bb 135] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1624 1006 1668 135 (parallel [
            (set (reg/f:DI 0 ax [orig:207 D.51463 ] [207])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) ./include/leveldb/status.h:100 83 {*movdi_xor}
     (expr_list:REG_UNUSED (reg:CC 17 flags)
        (nil)))
(jump_insn 1668 1624 1669 135 (set (pc)
        (label_ref 381)) 654 {jump}
     (nil)
 -> 381)
;;  succ:       108 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 1669 1668 1629)
;; basic block 136, loop depth 0, count 0, freq 2
;;  prev block 135, next block 137, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       28 [0.0%]  (CAN_FALLTHRU)
;; bb 136 artificial_defs: { }
;; bb 136 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 1629 1669 1045 136 223 "" [1 uses])
(note 1045 1629 995 136 [bb 136] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 995 1045 996 136 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f0d119c66c0 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) db/builder.cc:86 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7f0d119c66c0 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 996 995 1059)
;; basic block 137, loop depth 0, count 0, freq 0
;;  prev block 136, next block 138, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       20 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 137 artificial_defs: { d27(0){ }d161(1){ }}
;; bb 137 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  kill	
(code_label/s 1059 996 1062 137 119 "" [1 uses])
(note 1062 1059 833 137 [bb 137] NOTE_INSN_BASIC_BLOCK)
(insn:TI 833 1062 1060 137 (set (reg/f:DI 5 di [orig:161 D.51463 ] [161])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [3 D.44368.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn 1060 833 834 137 (set (reg:DI 3 bx [421])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn:TI 834 1060 835 137 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:161 D.51463 ] [161])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 835 834 1535 137 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 921)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 921)
;;  succ:       138 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              139 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]

;; basic block 138, loop depth 0, count 0, freq 0
;;  prev block 137, next block 139, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       148 [69.8%]  (CAN_FALLTHRU)
;;              146 [69.8%]  (CAN_FALLTHRU)
;;              153 [69.8%]  (CAN_FALLTHRU)
;;              137 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              144 [69.8%]  (CAN_FALLTHRU)
;;              151 [69.8%]  (CAN_FALLTHRU)
;; bb 138 artificial_defs: { }
;; bb 138 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	
;; live  kill	
(code_label 1535 835 914 138 219 "" [5 uses])
(note 914 1535 916 138 [bb 138] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 916 914 921 138 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       139 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]

;; basic block 139, loop depth 0, count 0, freq 0
;;  prev block 138, next block 140, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       147 [100.0%]  (CAN_FALLTHRU)
;;              154 [100.0%]  (CAN_FALLTHRU)
;;              150 [100.0%]  (CAN_FALLTHRU)
;;              137 [30.2%]  (CAN_FALLTHRU)
;;              138 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              152 [100.0%]  (CAN_FALLTHRU)
;;              149 [100.0%]  (CAN_FALLTHRU)
;;              145 [100.0%]  (CAN_FALLTHRU)
;;              155 [100.0%]  (CAN_FALLTHRU)
;; bb 139 artificial_defs: { }
;; bb 139 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	
(code_label 921 916 922 139 91 "" [8 uses])
(note 922 921 923 139 [bb 139] NOTE_INSN_BASIC_BLOCK)
(insn:TI 923 922 1422 139 (set (reg/f:DI 5 di [orig:156 D.51472 ] [156])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 176 [0xb0])) [3 MEM[(char * *)&fname]+0 S8 A128])) 89 {*movdi_internal}
     (nil))
(insn 1422 923 926 139 (set (reg/f:DI 0 ax [437])
        (plus:DI (reg/f:DI 44 r15 [450])
            (const_int 16 [0x10]))) /usr/include/c++/5/bits/basic_string.h:179 214 {*leadi}
     (expr_list:REG_DEAD (reg/f:DI 44 r15 [450])
        (nil)))
(insn:TI 926 1422 927 139 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:156 D.51472 ] [156])
            (reg/f:DI 0 ax [437]))) /usr/include/c++/5/bits/basic_string.h:179 8 {*cmpdi_1}
     (expr_list:REG_DEAD (reg/f:DI 0 ax [437])
        (nil)))
(jump_insn:TI 927 926 928 139 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 935)
            (pc))) /usr/include/c++/5/bits/basic_string.h:179 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 935)
;;  succ:       140 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              141 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 140, loop depth 0, count 0, freq 0
;;  prev block 139, next block 141, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       139 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 140 artificial_defs: { }
;; bb 140 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(note 928 927 930 140 [bb 140] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 930 928 935 140 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7f0d141a3360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/ext/new_allocator.h:110 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7f0d141a3360 operator delete>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       141 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 141, loop depth 0, count 0, freq 0
;;  prev block 140, next block 142, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       140 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;;              139 [30.2%]  (CAN_FALLTHRU)
;;              156 [100.0%]  (CAN_FALLTHRU)
;; bb 141 artificial_defs: { }
;; bb 141 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(code_label 935 930 936 141 104 "" [2 uses])
(note 936 935 937 141 [bb 141] NOTE_INSN_BASIC_BLOCK)
(insn:TI 937 936 938 141 (set (reg/f:DI 5 di [orig:162 D.51463 ] [162])
        (mem/f:DI (reg/f:DI 6 bp [orig:253 <retval> ] [253]) [3 s_15(D)->state_+0 S8 A64])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg/f:DI 6 bp [orig:253 <retval> ] [253])
        (nil)))
(insn:TI 938 937 939 141 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:162 D.51463 ] [162])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 939 938 940 141 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 943)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 3017 (nil)))
 -> 943)
;;  succ:       142 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;;              143 [30.2%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

;; basic block 142, loop depth 0, count 0, freq 0
;;  prev block 141, next block 143, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       141 [69.8%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 142 artificial_defs: { }
;; bb 142 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 940 939 942 142 [bb 142] NOTE_INSN_BASIC_BLOCK)
(call_insn:TI 942 940 943 142 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7f0d141a3438 operator delete []>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       143 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 143, loop depth 0, count 0, freq 0
;;  prev block 142, next block 144, flags: (REACHABLE, HOT_PARTITION, RTL)
;;  pred:       141 [30.2%]  (CAN_FALLTHRU)
;;              142 [100.0%]  (FALLTHRU,CAN_FALLTHRU)
;; bb 143 artificial_defs: { }
;; bb 143 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 943 942 944 143 105 "" [1 uses])
(note 944 943 946 143 [bb 143] NOTE_INSN_BASIC_BLOCK)
(insn:TI 946 944 947 143 (set (reg:DI 5 di)
        (reg:DI 3 bx [438])) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 3 bx [438])
        (nil)))
(call_insn:TI 947 946 948 143 (call (mem:QI (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7f0d141a06c0 __builtin_unwind_resume>) [0 __builtin_unwind_resume S1 A8])
        (const_int 0 [0])) 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7f0d141a06c0 __builtin_unwind_resume>)
            (expr_list:REG_ARGS_SIZE (const_int 0 [0])
                (expr_list:REG_NORETURN (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 948 947 1071)
;; basic block 144, loop depth 0, count 0, freq 0
;;  prev block 143, next block 145, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       119 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 144 artificial_defs: { d21(0){ }d155(1){ }}
;; bb 144 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  kill	
(code_label/s 1071 948 1074 144 122 "" [1 uses])
(note 1074 1071 869 144 [bb 144] NOTE_INSN_BASIC_BLOCK)
(insn:TI 869 1074 1072 144 (set (reg/f:DI 5 di [orig:120 D.51463 ] [120])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 80 [0x50])) [3 D.44377.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn 1072 869 870 144 (set (reg:DI 3 bx [428])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn:TI 870 1072 871 144 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:120 D.51463 ] [120])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 871 870 1670 144 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1535)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 6983 (nil)))
 -> 1535)
;;  succ:       138 [69.8%]  (CAN_FALLTHRU)
;;              145 [30.2%]  (FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]

;; basic block 145, loop depth 0, count 0, freq 0
;;  prev block 144, next block 146, flags: (NEW, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       144 [30.2%]  (FALLTHRU)
;; bb 145 artificial_defs: { }
;; bb 145 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	
;; live  kill	
(note 1670 871 1671 145 [bb 145] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 1671 1670 1672 145 (set (pc)
        (label_ref 921)) 654 {jump}
     (nil)
 -> 921)
;;  succ:       139 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]

(barrier 1672 1671 1079)
;; basic block 146, loop depth 0, count 0, freq 0
;;  prev block 145, next block 147, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       54 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 146 artificial_defs: { d17(0){ }d151(1){ }}
;; bb 146 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  kill	
(code_label/s 1079 1672 1082 146 124 "" [1 uses])
(note 1082 1079 897 146 [bb 146] NOTE_INSN_BASIC_BLOCK)
(insn:TI 897 1082 1080 146 (set (reg/f:DI 5 di [orig:134 D.51463 ] [134])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 112 [0x70])) [3 D.44408.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn 1080 897 898 146 (set (reg:DI 3 bx [432])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn:TI 898 1080 899 146 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:134 D.51463 ] [134])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 899 898 1673 146 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1535)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 6983 (nil)))
 -> 1535)
;;  succ:       138 [69.8%]  (CAN_FALLTHRU)
;;              147 [30.2%]  (FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]

;; basic block 147, loop depth 0, count 0, freq 0
;;  prev block 146, next block 148, flags: (NEW, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       146 [30.2%]  (FALLTHRU)
;; bb 147 artificial_defs: { }
;; bb 147 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	
;; live  kill	
(note 1673 899 1674 147 [bb 147] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 1674 1673 1675 147 (set (pc)
        (label_ref 921)) 654 {jump}
     (nil)
 -> 921)
;;  succ:       139 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]

(barrier 1675 1674 1083)
;; basic block 148, loop depth 0, count 0, freq 0
;;  prev block 147, next block 149, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       67 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 148 artificial_defs: { d15(0){ }d149(1){ }}
;; bb 148 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  kill	
(code_label/s 1083 1675 1086 148 125 "" [1 uses])
(note 1086 1083 911 148 [bb 148] NOTE_INSN_BASIC_BLOCK)
(insn:TI 911 1086 1084 148 (set (reg/f:DI 5 di [orig:147 D.51463 ] [147])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 144 [0x90])) [3 D.44419.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn 1084 911 912 148 (set (reg:DI 3 bx [434])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn:TI 912 1084 913 148 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:147 D.51463 ] [147])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 913 912 1676 148 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1535)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 6983 (nil)))
 -> 1535)
;;  succ:       138 [69.8%]  (CAN_FALLTHRU)
;;              149 [30.2%]  (FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]

;; basic block 149, loop depth 0, count 0, freq 0
;;  prev block 148, next block 150, flags: (NEW, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       148 [30.2%]  (FALLTHRU)
;; bb 149 artificial_defs: { }
;; bb 149 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	
;; live  kill	
(note 1676 913 1677 149 [bb 149] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 1677 1676 1678 149 (set (pc)
        (label_ref 921)) 654 {jump}
     (nil)
 -> 921)
;;  succ:       139 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]

(barrier 1678 1677 1063)
;; basic block 150, loop depth 0, count 0, freq 0
;;  prev block 149, next block 151, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       31 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 150 artificial_defs: { d24(0){ }d158(1){ }}
;; bb 150 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di]
;; live  kill	
(code_label/s 1063 1678 1066 150 120 "" [1 uses])
(note 1066 1063 847 150 [bb 150] NOTE_INSN_BASIC_BLOCK)
(insn:TI 847 1066 1064 150 (set (reg:DI 5 di)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [19 %sfp+-216 S8 A64])) db/builder.cc:35 89 {*movdi_internal}
     (nil))
(insn 1064 847 848 150 (set (reg:DI 3 bx [424])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(call_insn:TI 848 1064 1679 150 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7f0d141a3360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) db/builder.cc:35 660 {*call}
     (expr_list:REG_DEAD (reg:DI 5 di)
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7f0d141a3360 operator delete>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn:TI 1679 848 1680 150 (set (pc)
        (label_ref 921)) 654 {jump}
     (nil)
 -> 921)
;;  succ:       139 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]

(barrier 1680 1679 1075)
;; basic block 151, loop depth 0, count 0, freq 0
;;  prev block 150, next block 152, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       130 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 151 artificial_defs: { d19(0){ }d153(1){ }}
;; bb 151 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  kill	
(code_label/s 1075 1680 1078 151 123 "" [1 uses])
(note 1078 1075 883 151 [bb 151] NOTE_INSN_BASIC_BLOCK)
(insn:TI 883 1078 1076 151 (set (reg/f:DI 5 di [orig:127 D.51463 ] [127])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [3 D.44378.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn 1076 883 884 151 (set (reg:DI 3 bx [430])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn:TI 884 1076 885 151 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:127 D.51463 ] [127])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 885 884 1681 151 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1535)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 6983 (nil)))
 -> 1535)
;;  succ:       138 [69.8%]  (CAN_FALLTHRU)
;;              152 [30.2%]  (FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]

;; basic block 152, loop depth 0, count 0, freq 0
;;  prev block 151, next block 153, flags: (NEW, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       151 [30.2%]  (FALLTHRU)
;; bb 152 artificial_defs: { }
;; bb 152 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	
;; live  kill	
(note 1681 885 1682 152 [bb 152] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 1682 1681 1683 152 (set (pc)
        (label_ref 921)) 654 {jump}
     (nil)
 -> 921)
;;  succ:       139 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]

(barrier 1683 1682 1067)
;; basic block 153, loop depth 0, count 0, freq 0
;;  prev block 152, next block 154, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       106 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 153 artificial_defs: { d23(0){ }d157(1){ }}
;; bb 153 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  kill	
(code_label/s 1067 1683 1070 153 121 "" [1 uses])
(note 1070 1067 855 153 [bb 153] NOTE_INSN_BASIC_BLOCK)
(insn:TI 855 1070 1068 153 (set (reg/f:DI 5 di [orig:148 D.51463 ] [148])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 64 [0x40])) [3 D.44376.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn 1068 855 856 153 (set (reg:DI 3 bx [426])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(insn:TI 856 1068 857 153 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:148 D.51463 ] [148])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn:TI 857 856 1684 153 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 1535)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (expr_list:REG_DEAD (reg:CCZ 17 flags)
        (int_list:REG_BR_PROB 6983 (nil)))
 -> 1535)
;;  succ:       138 [69.8%]  (CAN_FALLTHRU)
;;              154 [30.2%]  (FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 44 [r15]

;; basic block 154, loop depth 0, count 0, freq 0
;;  prev block 153, next block 155, flags: (NEW, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       153 [30.2%]  (FALLTHRU)
;; bb 154 artificial_defs: { }
;; bb 154 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	
;; live  kill	
(note 1684 857 1685 154 [bb 154] NOTE_INSN_BASIC_BLOCK)
(jump_insn:TI 1685 1684 1686 154 (set (pc)
        (label_ref 921)) 654 {jump}
     (nil)
 -> 921)
;;  succ:       139 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]

(barrier 1686 1685 1053)
;; basic block 155, loop depth 0, count 0, freq 0
;;  prev block 154, next block 156, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 (ABNORMAL,ABNORMAL_CALL,EH)
;;              15 (ABNORMAL,ABNORMAL_CALL,EH)
;;              99 (ABNORMAL,ABNORMAL_CALL,EH)
;;              90 (ABNORMAL,ABNORMAL_CALL,EH)
;;              97 (ABNORMAL,ABNORMAL_CALL,EH)
;;              60 (ABNORMAL,ABNORMAL_CALL,EH)
;;              62 (ABNORMAL,ABNORMAL_CALL,EH)
;;              82 (ABNORMAL,ABNORMAL_CALL,EH)
;;              88 (ABNORMAL,ABNORMAL_CALL,EH)
;;              93 (ABNORMAL,ABNORMAL_CALL,EH)
;;              84 (ABNORMAL,ABNORMAL_CALL,EH)
;;              30 (ABNORMAL,ABNORMAL_CALL,EH)
;;              32 (ABNORMAL,ABNORMAL_CALL,EH)
;;              33 (ABNORMAL,ABNORMAL_CALL,EH)
;;              40 (ABNORMAL,ABNORMAL_CALL,EH,LOOP_EXIT)
;;              35 (ABNORMAL,ABNORMAL_CALL,EH,LOOP_EXIT)
;;              36 (ABNORMAL,ABNORMAL_CALL,EH,LOOP_EXIT)
;;              37 (ABNORMAL,ABNORMAL_CALL,EH,LOOP_EXIT)
;;              38 (ABNORMAL,ABNORMAL_CALL,EH,LOOP_EXIT)
;;              39 (ABNORMAL,ABNORMAL_CALL,EH,LOOP_EXIT)
;;              101 (ABNORMAL,ABNORMAL_CALL,EH)
;;              112 (ABNORMAL,ABNORMAL_CALL,EH)
;;              43 (ABNORMAL,ABNORMAL_CALL,EH)
;;              114 (ABNORMAL,ABNORMAL_CALL,EH)
;;              125 (ABNORMAL,ABNORMAL_CALL,EH)
;;              48 (ABNORMAL,ABNORMAL_CALL,EH)
;;              49 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 155 artificial_defs: { d13(0){ }d147(1){ }}
;; bb 155 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 44 [r15]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx]
;; live  in  	 6 [bp] 7 [sp] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx]
;; live  kill	
(code_label/s 1053 1686 1058 155 118 "" [1 uses])
(note 1058 1053 1054 155 [bb 155] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1054 1058 1687 155 (set (reg:DI 3 bx [420])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(jump_insn 1687 1054 1688 155 (set (pc)
        (label_ref 921)) 654 {jump}
     (nil)
 -> 921)
;;  succ:       139 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 44 [r15]

(barrier 1688 1687 1047)
;; basic block 156, loop depth 0, count 0, freq 0
;;  prev block 155, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 (ABNORMAL,ABNORMAL_CALL,EH)
;;              3 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 156 artificial_defs: { d11(0){ }d145(1){ }}
;; bb 156 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx]
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx]
;; live  kill	
(code_label/s 1047 1688 1052 156 117 "" [1 uses])
(note 1052 1047 1048 156 [bb 156] NOTE_INSN_BASIC_BLOCK)
(insn:TI 1048 1052 1689 156 (set (reg:DI 3 bx [438])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (expr_list:REG_DEAD (reg:DI 0 ax)
        (nil)))
(jump_insn 1689 1048 1690 156 (set (pc)
        (label_ref 935)) 654 {jump}
     (nil)
 -> 935)
;;  succ:       141 [100.0%]  (CAN_FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

(barrier 1690 1689 1411)
(note 1411 1690 0 NOTE_INSN_DELETED)
