
;; Function virtual int leveldb_comparator_t::Compare(const leveldb::Slice&, const leveldb::Slice&) const (_ZNK20leveldb_comparator_t7CompareERKN7leveldb5SliceES3_, funcdef_no=1418, decl_uid=28838, cgraph_uid=525, symbol_order=528)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
      Removing equiv init insn 9 (freq=1000)
    9: r99:DI=[r96:DI+0x8]
      REG_EQUIV [r96:DI+0x8]
deleting insn with uid = 9.
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
Changing pseudo 99 in operand 1 of insn 14 on equiv [r96:DI+0x8]
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (1) UBsBz {*sibcall_value}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0
   Insn 16: point = 1
   Insn 15: point = 2
   Insn 14: point = 3
   Insn 13: point = 3
   Insn 12: point = 4
   Insn 11: point = 4
   Insn 10: point = 6
   Insn 4: point = 7
   Insn 3: point = 8
   Insn 2: point = 9
 r95: [5..9]
 r96: [2..8]
 r97: [3..7]
 r100: [1..6]
 r101: [0..4]
Compressing live ranges: from 10 to 4 - 40%
Ranges after the compression:
 r95: [2..3]
 r96: [0..3]
 r97: [0..3]
 r100: [0..3]
 r101: [0..1]

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #2: **********

  BB 2
   Insn 17: point = 0
   Insn 16: point = 1
   Insn 15: point = 2
   Insn 14: point = 3
   Insn 13: point = 3
   Insn 12: point = 4
   Insn 11: point = 4
   Insn 10: point = 6
   Insn 4: point = 7
   Insn 3: point = 8
   Insn 2: point = 9
 r95: [5..9]
 r96: [2..8]
 r97: [3..7]
 r100: [1..6]
 r101: [0..4]
Compressing live ranges: from 10 to 4 - 40%
Ranges after the compression:
 r95: [2..3]
 r96: [0..3]
 r97: [0..3]
 r100: [0..3]
 r101: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=8)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 11
changing reg in insn 10
changing reg in insn 3
changing reg in insn 15
changing reg in insn 4
changing reg in insn 12
changing reg in insn 13
changing reg in insn 10
changing reg in insn 16
changing reg in insn 11
changing reg in insn 17
deleting insn with uid = 3.
deleting insn with uid = 4.
deleting insn with uid = 16.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


virtual int leveldb_comparator_t::Compare(const leveldb::Slice&, const leveldb::Slice&) const

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 37[r8]
;;  ref usage 	r0={4d,4u} r1={3d,3u} r2={3d,1u} r4={3d,3u} r5={3d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,1u} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 112{95d,17u,0e} in 8{7 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8]
;; live  kill	
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 5 2 (set (reg/f:DI 0 ax [orig:95 this ] [95])
        (reg:DI 5 di [ this ])) db/c.cc:73 89 {*movdi_internal}
     (nil))
(note 5 2 8 2 NOTE_INSN_FUNCTION_BEG)
(note 8 5 9 2 NOTE_INSN_DELETED)
(note 9 8 10 2 NOTE_INSN_DELETED)
(insn 10 9 11 2 (set (reg/f:DI 5 di [orig:100 this_2(D)->state_ ] [100])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:95 this ] [95])
                (const_int 8 [0x8])) [3 this_2(D)->state_+0 S8 A64])) db/c.cc:74 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [orig:101 this_2(D)->compare_ ] [101])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:95 this ] [95])
                (const_int 24 [0x18])) [3 this_2(D)->compare_+0 S8 A64])) db/c.cc:74 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 37 r8)
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:97 b ] [97])
                (const_int 8 [0x8])) [9 MEM[(long unsigned int *)b_4(D) + 8B]+0 S8 A64])) db/c.cc:74 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 2 cx)
        (mem/f:DI (reg/v/f:DI 1 dx [orig:97 b ] [97]) [3 MEM[(const char * *)b_4(D)]+0 S8 A64])) db/c.cc:74 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 1 dx)
        (mem:DI (plus:DI (reg/v/f:DI 4 si [orig:96 a ] [96])
                (const_int 8 [0x8])) [9 MEM[(long unsigned int *)a_5(D) + 8B]+0 S8 A64])) db/c.cc:74 89 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (set (reg:DI 4 si)
        (mem/f:DI (reg/v/f:DI 4 si [orig:96 a ] [96]) [3 MEM[(const char * *)a_5(D)]+0 S8 A64])) db/c.cc:74 89 {*movdi_internal}
     (nil))
(call_insn/j 17 15 18 2 (set (reg:SI 0 ax)
        (call (mem:QI (reg/f:DI 0 ax [orig:101 this_2(D)->compare_ ] [101]) [0 *_3 S1 A8])
            (const_int 0 [0]))) db/c.cc:74 671 {*sibcall_value}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 18 17 24)
(note 24 18 0 NOTE_INSN_DELETED)

;; Function virtual const char* leveldb_comparator_t::Name() const (_ZNK20leveldb_comparator_t4NameEv, funcdef_no=1419, decl_uid=28840, cgraph_uid=526, symbol_order=529)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) UBsBz {*sibcall_value}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 9: point = 0
   Insn 8: point = 1
   Insn 7: point = 2
   Insn 6: point = 4
   Insn 2: point = 5
Compressing live ranges: from 6 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 7
changing reg in insn 6
changing reg in insn 6
changing reg in insn 8
changing reg in insn 7
changing reg in insn 9
deleting insn with uid = 8.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


virtual const char* leveldb_comparator_t::Name() const

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 5[di] 7[sp]
;;  ref usage 	r0={4d,4u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 100{91d,9u,0e} in 4{3 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/f:DI 0 ax [orig:91 this ] [91])
        (reg:DI 5 di [ this ])) db/c.cc:77 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 5 di [orig:92 this_2(D)->state_ ] [92])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:91 this ] [91])
                (const_int 8 [0x8])) [3 this_2(D)->state_+0 S8 A64])) db/c.cc:78 89 {*movdi_internal}
     (nil))
(insn 7 6 9 2 (set (reg/f:DI 0 ax [orig:93 this_2(D)->name_ ] [93])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:91 this ] [91])
                (const_int 32 [0x20])) [3 this_2(D)->name_+0 S8 A64])) db/c.cc:78 89 {*movdi_internal}
     (nil))
(call_insn/j 9 7 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (reg/f:DI 0 ax [orig:93 this_2(D)->name_ ] [93]) [0 *_3 S1 A8])
            (const_int 0 [0]))) db/c.cc:78 671 {*sibcall_value}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 10 9 16)
(note 16 10 0 NOTE_INSN_DELETED)

;; Function virtual void leveldb_comparator_t::FindShortestSeparator(std::__cxx11::string*, const leveldb::Slice&) const (_ZNK20leveldb_comparator_t21FindShortestSeparatorEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN7leveldb5SliceE, funcdef_no=1420, decl_uid=28844, cgraph_uid=527, symbol_order=530)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)

********** Pseudo live ranges #1: **********

New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


virtual void leveldb_comparator_t::FindShortestSeparator(std::__cxx11::string*, const leveldb::Slice&) const

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 18{16d,2u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 6 10 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 10 5 0 NOTE_INSN_DELETED)

;; Function virtual void leveldb_comparator_t::FindShortSuccessor(std::__cxx11::string*) const (_ZNK20leveldb_comparator_t18FindShortSuccessorEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, funcdef_no=1421, decl_uid=28847, cgraph_uid=528, symbol_order=531)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)

********** Pseudo live ranges #1: **********

New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


virtual void leveldb_comparator_t::FindShortSuccessor(std::__cxx11::string*) const

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 18{16d,2u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 5 9 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 9 4 0 NOTE_INSN_DELETED)

;; Function virtual const char* leveldb_filterpolicy_t::Name() const (_ZNK22leveldb_filterpolicy_t4NameEv, funcdef_no=1426, decl_uid=28915, cgraph_uid=533, symbol_order=536)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) UBsBz {*sibcall_value}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 9: point = 0
   Insn 8: point = 1
   Insn 7: point = 2
   Insn 6: point = 4
   Insn 2: point = 5
Compressing live ranges: from 6 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 7
changing reg in insn 6
changing reg in insn 6
changing reg in insn 8
changing reg in insn 7
changing reg in insn 9
deleting insn with uid = 8.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


virtual const char* leveldb_filterpolicy_t::Name() const

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 5[di] 7[sp]
;;  ref usage 	r0={4d,4u} r1={2d} r2={2d} r4={2d} r5={3d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 100{91d,9u,0e} in 4{3 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/f:DI 0 ax [orig:91 this ] [91])
        (reg:DI 5 di [ this ])) db/c.cc:104 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 5 di [orig:92 this_2(D)->state_ ] [92])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:91 this ] [91])
                (const_int 8 [0x8])) [3 this_2(D)->state_+0 S8 A64])) db/c.cc:105 89 {*movdi_internal}
     (nil))
(insn 7 6 9 2 (set (reg/f:DI 0 ax [orig:93 this_2(D)->name_ ] [93])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:91 this ] [91])
                (const_int 24 [0x18])) [3 this_2(D)->name_+0 S8 A64])) db/c.cc:105 89 {*movdi_internal}
     (nil))
(call_insn/j 9 7 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (reg/f:DI 0 ax [orig:93 this_2(D)->name_ ] [93]) [0 *_3 S1 A8])
            (const_int 0 [0]))) db/c.cc:105 671 {*sibcall_value}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 10 9 16)
(note 16 10 0 NOTE_INSN_DELETED)

;; Function virtual bool leveldb_filterpolicy_t::KeyMayMatch(const leveldb::Slice&, const leveldb::Slice&) const (_ZNK22leveldb_filterpolicy_t11KeyMayMatchERKN7leveldb5SliceES3_, funcdef_no=1428, decl_uid=28924, cgraph_uid=535, symbol_order=538)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
      Removing equiv init insn 9 (freq=1000)
    9: r100:DI=[r97:DI+0x8]
      REG_EQUIV [r97:DI+0x8]
deleting insn with uid = 9.
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
Changing pseudo 100 in operand 1 of insn 14 on equiv [r97:DI+0x8]
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =qm {*setcc_qi}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 2
   Insn 26: point = 0
   Insn 25: point = 0
   Insn 20: point = 1
   Insn 19: point = 2
   Insn 18: point = 3
   Insn 17: point = 4
   Insn 16: point = 5
   Insn 15: point = 6
   Insn 14: point = 7
   Insn 13: point = 7
   Insn 12: point = 8
   Insn 10: point = 8
   Insn 4: point = 9
   Insn 3: point = 10
   Insn 2: point = 11
 r89: [2..3]
 r96: [4..11]
 r97: [6..10]
 r98: [7..9]
 r101: [5..8]
 r104: [0..1]
Compressing live ranges: from 12 to 6 - 50%
Ranges after the compression:
 r89: [2..3]
 r96: [4..5]
 r97: [4..5]
 r98: [4..5]
 r101: [4..5]
 r104: [0..1]

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #2: **********

  BB 2
   Insn 26: point = 0
   Insn 25: point = 0
   Insn 20: point = 1
   Insn 19: point = 2
   Insn 18: point = 3
   Insn 17: point = 4
   Insn 16: point = 5
   Insn 15: point = 6
   Insn 14: point = 7
   Insn 13: point = 7
   Insn 12: point = 8
   Insn 10: point = 8
   Insn 4: point = 9
   Insn 3: point = 10
   Insn 2: point = 11
 r89: [2..3]
 r96: [4..11]
 r97: [6..10]
 r98: [7..9]
 r101: [5..8]
 r104: [0..1]
Compressing live ranges: from 12 to 6 - 50%
Ranges after the compression:
 r89: [2..3]
 r96: [4..5]
 r97: [4..5]
 r98: [4..5]
 r101: [4..5]
 r104: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=16)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 18
changing reg in insn 19
changing reg in insn 2
changing reg in insn 17
changing reg in insn 10
changing reg in insn 10
changing reg in insn 3
changing reg in insn 15
changing reg in insn 4
changing reg in insn 12
changing reg in insn 13
changing reg in insn 10
changing reg in insn 16
changing reg in insn 20
changing reg in insn 25
deleting insn with uid = 3.
deleting insn with uid = 4.
deleting insn with uid = 16.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


virtual bool leveldb_filterpolicy_t::KeyMayMatch(const leveldb::Slice&, const leveldb::Slice&) const

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={6d,7u,1e} r1={3d,3u} r2={3d,1u} r4={3d,3u} r5={3d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d,1u} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,1u} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 120{98d,21u,1e} in 12{11 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags] 37 [r8]
;; live  kill	
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 5 2 (set (reg/f:DI 0 ax [orig:96 this ] [96])
        (reg:DI 5 di [ this ])) db/c.cc:121 89 {*movdi_internal}
     (nil))
(note 5 2 8 2 NOTE_INSN_FUNCTION_BEG)
(note 8 5 9 2 NOTE_INSN_DELETED)
(note 9 8 10 2 NOTE_INSN_DELETED)
(insn 10 9 11 2 (set (reg/f:DI 5 di [orig:101 this_2(D)->state_ ] [101])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:96 this ] [96])
                (const_int 8 [0x8])) [3 this_2(D)->state_+0 S8 A64])) db/c.cc:122 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:96 this ] [96])
                (const_int 8 [0x8])) [3 this_2(D)->state_+0 S8 A64])
        (nil)))
(note 11 10 12 2 NOTE_INSN_DELETED)
(insn 12 11 13 2 (set (reg:DI 37 r8)
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:98 filter ] [98])
                (const_int 8 [0x8])) [9 MEM[(long unsigned int *)filter_4(D) + 8B]+0 S8 A64])) db/c.cc:122 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 2 cx)
        (mem/f:DI (reg/v/f:DI 1 dx [orig:98 filter ] [98]) [3 MEM[(const char * *)filter_4(D)]+0 S8 A64])) db/c.cc:122 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 1 dx)
        (mem:DI (plus:DI (reg/v/f:DI 4 si [orig:97 key ] [97])
                (const_int 8 [0x8])) [9 MEM[(long unsigned int *)key_5(D) + 8B]+0 S8 A64])) db/c.cc:122 89 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (set (reg:DI 4 si)
        (mem/f:DI (reg/v/f:DI 4 si [orig:97 key ] [97]) [3 MEM[(const char * *)key_5(D)]+0 S8 A64])) db/c.cc:122 89 {*movdi_internal}
     (nil))
(call_insn 17 15 18 2 (set (reg:QI 0 ax)
        (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:96 this ] [96])
                        (const_int 40 [0x28])) [3 this_2(D)->key_match_+0 S8 A64]) [0 *_3 S1 A8])
            (const_int 0 [0]))) db/c.cc:122 669 {*call_value}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
(insn 18 17 19 2 (set (reg:QI 0 ax [orig:89 D.36856 ] [89])
        (reg:QI 0 ax)) db/c.cc:122 93 {*movqi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:89 D.36856 ] [89])
            (const_int 0 [0]))) db/c.cc:123 1 {*cmpqi_ccno_1}
     (nil))
(insn 20 19 25 2 (set (reg:QI 0 ax [orig:104 D.36857 ] [104])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) db/c.cc:123 607 {*setcc_qi}
     (nil))
(insn 25 20 26 2 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:104 D.36857 ] [104])) db/c.cc:124 93 {*movqi_internal}
     (nil))
(insn 26 25 28 2 (use (reg/i:QI 0 ax)) db/c.cc:124 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 28 26 0 NOTE_INSN_DELETED)

;; Function virtual void leveldb_writebatch_iterate(leveldb_writebatch_t*, void*, void (*)(void*, const char*, size_t, const char*, size_t), void (*)(void*, const char*, size_t))::H::Put(const leveldb::Slice&, const leveldb::Slice&) (_ZZ26leveldb_writebatch_iterateEN1H3PutERKN7leveldb5SliceES3_, funcdef_no=1467, decl_uid=31691, cgraph_uid=573, symbol_order=576)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
      Removing equiv init insn 9 (freq=1000)
    9: r97:DI=[r94:DI+0x8]
      REG_EQUIV [r94:DI+0x8]
deleting insn with uid = 9.
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
Changing pseudo 97 in operand 1 of insn 14 on equiv [r94:DI+0x8]
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) UBsBz {*sibcall}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0
   Insn 16: point = 1
   Insn 15: point = 2
   Insn 14: point = 3
   Insn 13: point = 3
   Insn 12: point = 4
   Insn 11: point = 4
   Insn 10: point = 6
   Insn 4: point = 7
   Insn 3: point = 8
   Insn 2: point = 9
 r93: [5..9]
 r94: [2..8]
 r95: [3..7]
 r98: [1..6]
 r99: [0..4]
Compressing live ranges: from 10 to 4 - 40%
Ranges after the compression:
 r93: [2..3]
 r94: [0..3]
 r95: [0..3]
 r98: [0..3]
 r99: [0..1]

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #2: **********

  BB 2
   Insn 17: point = 0
   Insn 16: point = 1
   Insn 15: point = 2
   Insn 14: point = 3
   Insn 13: point = 3
   Insn 12: point = 4
   Insn 11: point = 4
   Insn 10: point = 6
   Insn 4: point = 7
   Insn 3: point = 8
   Insn 2: point = 9
 r93: [5..9]
 r94: [2..8]
 r95: [3..7]
 r98: [1..6]
 r99: [0..4]
Compressing live ranges: from 10 to 4 - 40%
Ranges after the compression:
 r93: [2..3]
 r94: [0..3]
 r95: [0..3]
 r98: [0..3]
 r99: [0..1]

********** Assignment #1: **********


********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=8)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 11
changing reg in insn 10
changing reg in insn 3
changing reg in insn 15
changing reg in insn 4
changing reg in insn 12
changing reg in insn 13
changing reg in insn 10
changing reg in insn 16
changing reg in insn 11
changing reg in insn 17
deleting insn with uid = 3.
deleting insn with uid = 4.
deleting insn with uid = 16.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


virtual void leveldb_writebatch_iterate(leveldb_writebatch_t*, void*, void (*)(void*, const char*, size_t, const char*, size_t), void (*)(void*, const char*, size_t))::H::Put(const leveldb::Slice&, const leveldb::Slice&)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 37[r8]
;;  ref usage 	r0={4d,3u} r1={3d,3u} r2={3d,1u} r4={3d,3u} r5={3d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={3d,1u} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 111{95d,16u,0e} in 8{7 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8]
;; live  kill	
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 6 5 2 (set (reg/f:DI 0 ax [orig:93 this ] [93])
        (reg:DI 5 di [ this ])) db/c.cc:372 89 {*movdi_internal}
     (nil))
(note 5 2 8 2 NOTE_INSN_FUNCTION_BEG)
(note 8 5 9 2 NOTE_INSN_DELETED)
(note 9 8 10 2 NOTE_INSN_DELETED)
(insn 10 9 11 2 (set (reg/f:DI 5 di [orig:98 this_2(D)->state_ ] [98])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:93 this ] [93])
                (const_int 8 [0x8])) [3 this_2(D)->state_+0 S8 A64])) db/c.cc:373 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [orig:99 this_2(D)->put_ ] [99])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:93 this ] [93])
                (const_int 16 [0x10])) [3 this_2(D)->put_+0 S8 A64])) db/c.cc:373 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg:DI 37 r8)
        (mem:DI (plus:DI (reg/v/f:DI 1 dx [orig:95 value ] [95])
                (const_int 8 [0x8])) [9 MEM[(long unsigned int *)value_4(D) + 8B]+0 S8 A64])) db/c.cc:373 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:DI 2 cx)
        (mem/f:DI (reg/v/f:DI 1 dx [orig:95 value ] [95]) [3 MEM[(const char * *)value_4(D)]+0 S8 A64])) db/c.cc:373 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (reg:DI 1 dx)
        (mem:DI (plus:DI (reg/v/f:DI 4 si [orig:94 key ] [94])
                (const_int 8 [0x8])) [9 MEM[(long unsigned int *)key_5(D) + 8B]+0 S8 A64])) db/c.cc:373 89 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (set (reg:DI 4 si)
        (mem/f:DI (reg/v/f:DI 4 si [orig:94 key ] [94]) [3 MEM[(const char * *)key_5(D)]+0 S8 A64])) db/c.cc:373 89 {*movdi_internal}
     (nil))
(call_insn/j 17 15 18 2 (call (mem:QI (reg/f:DI 0 ax [orig:99 this_2(D)->put_ ] [99]) [0 *_3 S1 A8])
        (const_int 0 [0])) db/c.cc:373 662 {*sibcall}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 18 17 21)
(note 21 18 0 NOTE_INSN_DELETED)

;; Function virtual void leveldb_writebatch_iterate(leveldb_writebatch_t*, void*, void (*)(void*, const char*, size_t, const char*, size_t), void (*)(void*, const char*, size_t))::H::Delete(const leveldb::Slice&) (_ZZ26leveldb_writebatch_iterateEN1H6DeleteERKN7leveldb5SliceE, funcdef_no=1468, decl_uid=31694, cgraph_uid=574, symbol_order=577)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 13: point = 0
   Insn 12: point = 1
   Insn 11: point = 2
   Insn 10: point = 3
   Insn 9: point = 4
   Insn 8: point = 6
   Insn 7: point = 7
   Insn 3: point = 8
   Insn 2: point = 9
Compressing live ranges: from 10 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 9
changing reg in insn 8
changing reg in insn 3
changing reg in insn 11
changing reg in insn 7
changing reg in insn 7
changing reg in insn 7
changing reg in insn 10
changing reg in insn 8
changing reg in insn 12
changing reg in insn 9
changing reg in insn 13
deleting insn with uid = 3.
deleting insn with uid = 10.
deleting insn with uid = 12.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 13.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


virtual void leveldb_writebatch_iterate(leveldb_writebatch_t*, void*, void (*)(void*, const char*, size_t, const char*, size_t), void (*)(void*, const char*, size_t))::H::Delete(const leveldb::Slice&)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 7[sp]
;;  ref usage 	r0={4d,3u} r1={3d,1u} r2={2d} r4={3d,3u,1e} r5={3d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 106{93d,12u,1e} in 6{5 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 4 2 (set (reg/f:DI 0 ax [orig:91 this ] [91])
        (reg:DI 5 di [ this ])) db/c.cc:375 89 {*movdi_internal}
     (nil))
(note 4 2 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 1 dx [orig:93 MEM[(long unsigned int *)key_4(D) + 8B] ] [93])
        (mem:DI (plus:DI (reg/v/f:DI 4 si [orig:92 key ] [92])
                (const_int 8 [0x8])) [9 MEM[(long unsigned int *)key_4(D) + 8B]+0 S8 A64])) db/c.cc:376 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg/v/f:DI 4 si [orig:92 key ] [92])
                (const_int 8 [0x8])) [9 MEM[(long unsigned int *)key_4(D) + 8B]+0 S8 A64])
        (nil)))
(insn 8 7 9 2 (set (reg/f:DI 5 di [orig:94 this_2(D)->state_ ] [94])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:91 this ] [91])
                (const_int 8 [0x8])) [3 this_2(D)->state_+0 S8 A64])) db/c.cc:376 89 {*movdi_internal}
     (nil))
(insn 9 8 11 2 (set (reg/f:DI 0 ax [orig:95 this_2(D)->deleted_ ] [95])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:91 this ] [91])
                (const_int 24 [0x18])) [3 this_2(D)->deleted_+0 S8 A64])) db/c.cc:376 89 {*movdi_internal}
     (nil))
(insn 11 9 13 2 (set (reg:DI 4 si)
        (mem/f:DI (reg/v/f:DI 4 si [orig:92 key ] [92]) [3 MEM[(const char * *)key_4(D)]+0 S8 A64])) db/c.cc:376 89 {*movdi_internal}
     (nil))
(call_insn/j 13 11 14 2 (call (mem:QI (reg/f:DI 0 ax [orig:95 this_2(D)->deleted_ ] [95]) [0 *_3 S1 A8])
        (const_int 0 [0])) db/c.cc:376 662 {*sibcall}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 14 13 17)
(note 17 14 0 NOTE_INSN_DELETED)

;; Function virtual const char* leveldb_filterpolicy_create_bloom(int)::Wrapper::Name() const (_ZZ33leveldb_filterpolicy_create_bloomENK7Wrapper4NameEv, funcdef_no=1514, decl_uid=31927, cgraph_uid=620, symbol_order=623)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) UBsBz {*sibcall_value}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 10: point = 0
   Insn 9: point = 1
   Insn 8: point = 2
   Insn 7: point = 4
   Insn 6: point = 5
   Insn 2: point = 7
Compressing live ranges: from 8 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 9
changing reg in insn 7
changing reg in insn 7
changing reg in insn 2
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 10
deleting insn with uid = 2.
deleting insn with uid = 9.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


virtual const char* leveldb_filterpolicy_create_bloom(int)::Wrapper::Name() const

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 5[di] 7[sp]
;;  ref usage 	r0={4d,3u} r1={2d} r2={2d} r4={2d} r5={3d,3u,1e} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 101{91d,9u,1e} in 4{3 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 5 di [orig:87 D.36874 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 5 di [orig:92 this ] [92])
                (const_int 48 [0x30])) [3 this_2(D)->rep_+0 S8 A64])) db/c.cc:506 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:93 _3->_vptr.FilterPolicy ] [93])
        (mem/f:DI (reg/f:DI 5 di [orig:87 D.36874 ] [87]) [3 _3->_vptr.FilterPolicy+0 S8 A64])) db/c.cc:506 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 5 di [orig:87 D.36874 ] [87]) [3 _3->_vptr.FilterPolicy+0 S8 A64])
        (nil)))
(insn 8 7 10 2 (set (reg/f:DI 0 ax [orig:94 MEM[(int (*__vtbl_ptr_type) () *)_4 + 16B] ] [94])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:93 _3->_vptr.FilterPolicy ] [93])
                (const_int 16 [0x10])) [3 MEM[(int (*__vtbl_ptr_type) () *)_4 + 16B]+0 S8 A64])) db/c.cc:506 89 {*movdi_internal}
     (nil))
(call_insn/j 10 8 11 2 (set (reg:DI 0 ax)
        (call (mem:QI (reg/f:DI 0 ax [orig:94 MEM[(int (*__vtbl_ptr_type) () *)_4 + 16B] ] [94]) [0 *OBJ_TYPE_REF(_5;(const struct FilterPolicy)_3->2) S1 A8])
            (const_int 0 [0]))) db/c.cc:506 671 {*sibcall_value}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 11 10 17)
(note 17 11 0 NOTE_INSN_DELETED)

;; Function virtual void leveldb_filterpolicy_create_bloom(int)::Wrapper::CreateFilter(const leveldb::Slice*, int, std::__cxx11::string*) const (_ZZ33leveldb_filterpolicy_create_bloomENK7Wrapper12CreateFilterEPKN7leveldb5SliceEiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, funcdef_no=1515, decl_uid=31932, cgraph_uid=621, symbol_order=624)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 16: point = 0
   Insn 15: point = 1
   Insn 14: point = 2
   Insn 13: point = 3
   Insn 12: point = 4
   Insn 11: point = 5
   Insn 10: point = 7
   Insn 9: point = 8
   Insn 5: point = 10
   Insn 4: point = 11
   Insn 3: point = 12
   Insn 2: point = 13
Compressing live ranges: from 14 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 9
changing reg in insn 15
changing reg in insn 10
changing reg in insn 10
changing reg in insn 2
changing reg in insn 9
changing reg in insn 3
changing reg in insn 14
changing reg in insn 4
changing reg in insn 13
changing reg in insn 5
changing reg in insn 12
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 16
deleting insn with uid = 2.
deleting insn with uid = 3.
deleting insn with uid = 4.
deleting insn with uid = 5.
deleting insn with uid = 12.
deleting insn with uid = 13.
deleting insn with uid = 14.
deleting insn with uid = 15.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


virtual void leveldb_filterpolicy_create_bloom(int)::Wrapper::CreateFilter(const leveldb::Slice*, int, std::__cxx11::string*) const

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp]
;;  ref usage 	r0={4d,2u} r1={2d,1u} r2={2d,1u} r4={2d,1u} r5={3d,3u,1e} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{91d,11u,1e} in 4{3 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 6 7 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg/f:DI 5 di [orig:87 D.36880 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 5 di [orig:90 this ] [90])
                (const_int 48 [0x30])) [3 this_2(D)->rep_+0 S8 A64])) db/c.cc:508 89 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [orig:94 _3->_vptr.FilterPolicy ] [94])
        (mem/f:DI (reg/f:DI 5 di [orig:87 D.36880 ] [87]) [3 _3->_vptr.FilterPolicy+0 S8 A64])) db/c.cc:508 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 5 di [orig:87 D.36880 ] [87]) [3 _3->_vptr.FilterPolicy+0 S8 A64])
        (nil)))
(insn 11 10 16 2 (set (reg/f:DI 0 ax [orig:95 MEM[(int (*__vtbl_ptr_type) () *)_4 + 24B] ] [95])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:94 _3->_vptr.FilterPolicy ] [94])
                (const_int 24 [0x18])) [3 MEM[(int (*__vtbl_ptr_type) () *)_4 + 24B]+0 S8 A64])) db/c.cc:508 89 {*movdi_internal}
     (nil))
(call_insn/j 16 11 17 2 (call (mem:QI (reg/f:DI 0 ax [orig:95 MEM[(int (*__vtbl_ptr_type) () *)_4 + 24B] ] [95]) [0 *OBJ_TYPE_REF(_5;(const struct FilterPolicy)_3->3) S1 A8])
        (const_int 0 [0])) db/c.cc:508 662 {*sibcall}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 17 16 20)
(note 20 17 0 NOTE_INSN_DELETED)

;; Function virtual bool leveldb_filterpolicy_create_bloom(int)::Wrapper::KeyMayMatch(const leveldb::Slice&, const leveldb::Slice&) const (_ZZ33leveldb_filterpolicy_create_bloomENK7Wrapper11KeyMayMatchERKN7leveldb5SliceES3_, funcdef_no=1516, decl_uid=31936, cgraph_uid=622, symbol_order=625)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) UBsBz {*sibcall_value}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0
   Insn 13: point = 1
   Insn 12: point = 2
   Insn 11: point = 3
   Insn 10: point = 4
   Insn 9: point = 6
   Insn 8: point = 7
   Insn 4: point = 9
   Insn 3: point = 10
   Insn 2: point = 11
Compressing live ranges: from 12 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 8
changing reg in insn 13
changing reg in insn 9
changing reg in insn 9
changing reg in insn 2
changing reg in insn 8
changing reg in insn 3
changing reg in insn 12
changing reg in insn 4
changing reg in insn 11
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 14
deleting insn with uid = 2.
deleting insn with uid = 3.
deleting insn with uid = 4.
deleting insn with uid = 11.
deleting insn with uid = 12.
deleting insn with uid = 13.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


virtual bool leveldb_filterpolicy_create_bloom(int)::Wrapper::KeyMayMatch(const leveldb::Slice&, const leveldb::Slice&) const

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 7[sp]
;;  ref usage 	r0={4d,3u} r1={2d,1u} r2={2d} r4={2d,1u} r5={3d,3u,1e} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{91d,11u,1e} in 4{3 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 6 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg/f:DI 5 di [orig:87 D.36885 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 5 di [orig:92 this ] [92])
                (const_int 48 [0x30])) [3 this_2(D)->rep_+0 S8 A64])) db/c.cc:511 89 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 0 ax [orig:95 _3->_vptr.FilterPolicy ] [95])
        (mem/f:DI (reg/f:DI 5 di [orig:87 D.36885 ] [87]) [3 _3->_vptr.FilterPolicy+0 S8 A64])) db/c.cc:511 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 5 di [orig:87 D.36885 ] [87]) [3 _3->_vptr.FilterPolicy+0 S8 A64])
        (nil)))
(insn 10 9 14 2 (set (reg/f:DI 0 ax [orig:96 MEM[(int (*__vtbl_ptr_type) () *)_4 + 32B] ] [96])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:95 _3->_vptr.FilterPolicy ] [95])
                (const_int 32 [0x20])) [3 MEM[(int (*__vtbl_ptr_type) () *)_4 + 32B]+0 S8 A64])) db/c.cc:511 89 {*movdi_internal}
     (nil))
(call_insn/j 14 10 15 2 (set (reg:QI 0 ax)
        (call (mem:QI (reg/f:DI 0 ax [orig:96 MEM[(int (*__vtbl_ptr_type) () *)_4 + 32B] ] [96]) [0 *OBJ_TYPE_REF(_5;(const struct FilterPolicy)_3->4) S1 A8])
            (const_int 0 [0]))) db/c.cc:511 671 {*sibcall_value}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 15 14 21)
(note 21 15 0 NOTE_INSN_DELETED)

;; Function static void leveldb_filterpolicy_create_bloom(int)::Wrapper::DoNothing(void*) (_ZZ33leveldb_filterpolicy_create_bloomEN7Wrapper9DoNothingEPv, funcdef_no=1517, decl_uid=31939, cgraph_uid=623, symbol_order=626)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)

********** Pseudo live ranges #1: **********

New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


static void leveldb_filterpolicy_create_bloom(int)::Wrapper::DoNothing(void*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d} r5={1d} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 18{16d,2u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 8 2 NOTE_INSN_FUNCTION_BEG)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 8 3 0 NOTE_INSN_DELETED)

;; Function leveldb_writebatch_iterate(leveldb_writebatch_t*, void*, void (*)(void*, const char*, size_t, const char*, size_t), void (*)(void*, const char*, size_t))::H::~H() (_ZZ26leveldb_writebatch_iterateEN1HD2Ev, funcdef_no=1839, decl_uid=31720, cgraph_uid=946, symbol_order=951)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) Ts {*leadi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 10: point = 0
   Insn 9: point = 0
   Insn 8: point = 1
   Insn 7: point = 2
   Insn 6: point = 4
   Insn 2: point = 5
Compressing live ranges: from 6 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 9
changing reg in insn 8
changing reg in insn 7
changing reg in insn 8
changing reg in insn 6
changing reg in insn 7
deleting insn with uid = 2.
deleting insn with uid = 9.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


leveldb_writebatch_iterate(leveldb_writebatch_t*, void*, void (*)(void*, const char*, size_t, const char*, size_t), void (*)(void*, const char*, size_t))::H::~H()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 5[di] 7[sp]
;;  ref usage 	r0={4d,2u} r1={2d} r2={2d} r4={2d} r5={2d,2u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 97{90d,7u,0e} in 4{3 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [90])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTVZ26leveldb_writebatch_iterateE1H")  <var_decl 0x7fb5373d9ab0 _ZTVZ26leveldb_writebatch_iterateE1H>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])) db/c.cc:367 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTVZ26leveldb_writebatch_iterateE1H")  <var_decl 0x7fb5373d9ab0 _ZTVZ26leveldb_writebatch_iterateE1H>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])
        (nil)))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [89])
        (plus:DI (reg:DI 0 ax [90])
            (const_int 16 [0x10]))) db/c.cc:367 214 {*leadi}
     (expr_list:REG_EQUIV (const:DI (plus:DI (symbol_ref/i:DI ("_ZTVZ26leveldb_writebatch_iterateE1H")  <var_decl 0x7fb5373d9ab0 _ZTVZ26leveldb_writebatch_iterateE1H>)
                (const_int 16 [0x10])))
        (nil)))
(insn 8 7 10 2 (set (mem/f:DI (reg/f:DI 5 di [orig:88 this ] [88]) [3 this_2(D)->D.31723._vptr.Handler+0 S8 A64])
        (reg/f:DI 0 ax [89])) db/c.cc:367 89 {*movdi_internal}
     (nil))
(call_insn/j 10 8 11 2 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb10WriteBatch7HandlerD2Ev") [flags 0x41]  <function_decl 0x7fb5376690d8 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) db/c.cc:367 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb10WriteBatch7HandlerD2Ev") [flags 0x41]  <function_decl 0x7fb5376690d8 __base_dtor >)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 11 10 14)
(note 14 11 0 NOTE_INSN_DELETED)

;; Function virtual leveldb_writebatch_iterate(leveldb_writebatch_t*, void*, void (*)(void*, const char*, size_t, const char*, size_t), void (*)(void*, const char*, size_t))::H::~H() (_ZZ26leveldb_writebatch_iterateEN1HD0Ev, funcdef_no=1841, decl_uid=31714, cgraph_uid=948, symbol_order=953)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) Ts {*leadi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 12: point = 0
   Insn 11: point = 0
   Insn 10: point = 1
   Insn 9: point = 1
   Insn 8: point = 1
   Insn 7: point = 2
   Insn 6: point = 4
   Insn 2: point = 5
Compressing live ranges: from 6 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 2
changing reg in insn 11
changing reg in insn 9
changing reg in insn 8
changing reg in insn 7
changing reg in insn 8
changing reg in insn 6
changing reg in insn 7


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 12.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


virtual leveldb_writebatch_iterate(leveldb_writebatch_t*, void*, void (*)(void*, const char*, size_t, const char*, size_t), void (*)(void*, const char*, size_t))::H::~H()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 5[di] 7[sp]
;;  ref usage 	r0={5d,2u} r1={3d} r2={3d} r3={1d,3u} r4={3d} r5={5d,3u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 177{165d,12u,0e} in 8{6 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di]
;; live  kill	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/f:DI 3 bx [orig:88 this ] [88])
        (reg:DI 5 di [ this ])) db/c.cc:367 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [90])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTVZ26leveldb_writebatch_iterateE1H")  <var_decl 0x7fb5373d9ab0 _ZTVZ26leveldb_writebatch_iterateE1H>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])) db/c.cc:367 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTVZ26leveldb_writebatch_iterateE1H")  <var_decl 0x7fb5373d9ab0 _ZTVZ26leveldb_writebatch_iterateE1H>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])
        (nil)))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [89])
        (plus:DI (reg:DI 0 ax [90])
            (const_int 16 [0x10]))) db/c.cc:367 214 {*leadi}
     (expr_list:REG_EQUIV (const:DI (plus:DI (symbol_ref/i:DI ("_ZTVZ26leveldb_writebatch_iterateE1H")  <var_decl 0x7fb5373d9ab0 _ZTVZ26leveldb_writebatch_iterateE1H>)
                (const_int 16 [0x10])))
        (nil)))
(insn 8 7 9 2 (set (mem/f:DI (reg/f:DI 3 bx [orig:88 this ] [88]) [3 this_2(D)->D.31723._vptr.Handler+0 S8 A64])
        (reg/f:DI 0 ax [89])) db/c.cc:367 89 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:88 this ] [88])) db/c.cc:367 89 {*movdi_internal}
     (nil))
(call_insn 10 9 11 2 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb10WriteBatch7HandlerD2Ev") [flags 0x41]  <function_decl 0x7fb5376690d8 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) db/c.cc:367 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb10WriteBatch7HandlerD2Ev") [flags 0x41]  <function_decl 0x7fb5376690d8 __base_dtor >)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 2 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:88 this ] [88])) db/c.cc:367 89 {*movdi_internal}
     (nil))
(call_insn/j 12 11 13 2 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) db/c.cc:367 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 13 12 16)
(note 16 13 0 NOTE_INSN_DELETED)

;; Function leveldb_comparator_t::~leveldb_comparator_t() (_ZN20leveldb_comparator_tD2Ev, funcdef_no=1415, decl_uid=28870, cgraph_uid=522, symbol_order=525)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) Ts {*leadi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0
   Insn 13: point = 0
   Insn 12: point = 1
   Insn 11: point = 1
   Insn 9: point = 2
   Insn 8: point = 3
   Insn 7: point = 4
   Insn 6: point = 6
   Insn 2: point = 7
Compressing live ranges: from 8 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 2
changing reg in insn 12
changing reg in insn 13
changing reg in insn 9
changing reg in insn 8
changing reg in insn 9
changing reg in insn 7
changing reg in insn 8
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 11
deleting insn with uid = 11.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 12.
verify found no changes in insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


leveldb_comparator_t::~leveldb_comparator_t()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 5[di] 7[sp]
;;  ref usage 	r0={5d,2u} r1={3d} r2={3d} r3={1d,4u,1e} r4={3d} r5={5d,3u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 179{165d,13u,1e} in 8{6 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di]
;; live  kill	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/f:DI 3 bx [orig:90 this ] [90])
        (reg:DI 5 di [ this ])) db/c.cc:69 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [92])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTV20leveldb_comparator_t")  <var_decl 0x7fb537667870 _ZTV20leveldb_comparator_t>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])) db/c.cc:69 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTV20leveldb_comparator_t")  <var_decl 0x7fb537667870 _ZTV20leveldb_comparator_t>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])
        (nil)))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [91])
        (plus:DI (reg:DI 0 ax [92])
            (const_int 16 [0x10]))) db/c.cc:69 214 {*leadi}
     (expr_list:REG_EQUIV (const:DI (plus:DI (symbol_ref/i:DI ("_ZTV20leveldb_comparator_t")  <var_decl 0x7fb537667870 _ZTV20leveldb_comparator_t>)
                (const_int 16 [0x10])))
        (nil)))
(insn 8 7 9 2 (set (mem/f:DI (reg/f:DI 3 bx [orig:90 this ] [90]) [3 this_2(D)->D.28873._vptr.Comparator+0 S8 A64])
        (reg/f:DI 0 ax [91])) db/c.cc:69 89 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 5 di [orig:93 this_2(D)->state_ ] [93])
        (mem/f:DI (plus:DI (reg/f:DI 3 bx [orig:90 this ] [90])
                (const_int 8 [0x8])) [3 this_2(D)->state_+0 S8 A64])) db/c.cc:70 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (plus:DI (reg/f:DI 3 bx [orig:90 this ] [90])
                (const_int 8 [0x8])) [3 this_2(D)->state_+0 S8 A64])
        (nil)))
(note 10 9 12 2 NOTE_INSN_DELETED)
(call_insn 12 10 13 2 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 3 bx [orig:90 this ] [90])
                    (const_int 16 [0x10])) [3 this_2(D)->destructor_+0 S8 A64]) [0 *_4 S1 A8])
        (const_int 0 [0])) db/c.cc:70 660 {*call}
     (expr_list:REG_CALL_DECL (nil)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:90 this ] [90])) db/c.cc:69 89 {*movdi_internal}
     (nil))
(call_insn/j 14 13 15 2 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb10ComparatorD2Ev") [flags 0x41]  <function_decl 0x7fb5377df6c0 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) db/c.cc:69 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb10ComparatorD2Ev") [flags 0x41]  <function_decl 0x7fb5377df6c0 __base_dtor >)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 15 14 18)
(note 18 15 0 NOTE_INSN_DELETED)

;; Function virtual leveldb_comparator_t::~leveldb_comparator_t() (_ZN20leveldb_comparator_tD0Ev, funcdef_no=1417, decl_uid=28864, cgraph_uid=524, symbol_order=527)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) Ts {*leadi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 16: point = 0
   Insn 15: point = 0
   Insn 14: point = 1
   Insn 13: point = 1
   Insn 12: point = 1
   Insn 11: point = 1
   Insn 9: point = 2
   Insn 8: point = 3
   Insn 7: point = 4
   Insn 6: point = 6
   Insn 2: point = 7
Compressing live ranges: from 8 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 2
changing reg in insn 12
changing reg in insn 15
changing reg in insn 13
changing reg in insn 9
changing reg in insn 8
changing reg in insn 9
changing reg in insn 7
changing reg in insn 8
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 11
deleting insn with uid = 11.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 12.
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


virtual leveldb_comparator_t::~leveldb_comparator_t()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 5[di] 7[sp]
;;  ref usage 	r0={6d,2u} r1={4d} r2={4d} r3={1d,5u,1e} r4={4d} r5={7d,4u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={3d} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 255{238d,16u,1e} in 10{7 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di]
;; live  kill	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/f:DI 3 bx [orig:90 this ] [90])
        (reg:DI 5 di [ this ])) db/c.cc:69 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [92])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTV20leveldb_comparator_t")  <var_decl 0x7fb537667870 _ZTV20leveldb_comparator_t>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])) db/c.cc:69 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTV20leveldb_comparator_t")  <var_decl 0x7fb537667870 _ZTV20leveldb_comparator_t>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])
        (nil)))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [91])
        (plus:DI (reg:DI 0 ax [92])
            (const_int 16 [0x10]))) db/c.cc:69 214 {*leadi}
     (expr_list:REG_EQUIV (const:DI (plus:DI (symbol_ref/i:DI ("_ZTV20leveldb_comparator_t")  <var_decl 0x7fb537667870 _ZTV20leveldb_comparator_t>)
                (const_int 16 [0x10])))
        (nil)))
(insn 8 7 9 2 (set (mem/f:DI (reg/f:DI 3 bx [orig:90 this ] [90]) [3 this_2(D)->D.28873._vptr.Comparator+0 S8 A64])
        (reg/f:DI 0 ax [91])) db/c.cc:69 89 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 5 di [orig:93 this_2(D)->state_ ] [93])
        (mem/f:DI (plus:DI (reg/f:DI 3 bx [orig:90 this ] [90])
                (const_int 8 [0x8])) [3 this_2(D)->state_+0 S8 A64])) db/c.cc:70 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (plus:DI (reg/f:DI 3 bx [orig:90 this ] [90])
                (const_int 8 [0x8])) [3 this_2(D)->state_+0 S8 A64])
        (nil)))
(note 10 9 12 2 NOTE_INSN_DELETED)
(call_insn 12 10 13 2 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 3 bx [orig:90 this ] [90])
                    (const_int 16 [0x10])) [3 this_2(D)->destructor_+0 S8 A64]) [0 *_5 S1 A8])
        (const_int 0 [0])) db/c.cc:70 660 {*call}
     (expr_list:REG_CALL_DECL (nil)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:90 this ] [90])) db/c.cc:69 89 {*movdi_internal}
     (nil))
(call_insn 14 13 15 2 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb10ComparatorD2Ev") [flags 0x41]  <function_decl 0x7fb5377df6c0 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) db/c.cc:69 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb10ComparatorD2Ev") [flags 0x41]  <function_decl 0x7fb5377df6c0 __base_dtor >)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:90 this ] [90])) db/c.cc:71 89 {*movdi_internal}
     (nil))
(call_insn/j 16 15 17 2 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) db/c.cc:71 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 17 16 20)
(note 20 17 0 NOTE_INSN_DELETED)

;; Function leveldb_filterpolicy_t::~leveldb_filterpolicy_t() (_ZN22leveldb_filterpolicy_tD2Ev, funcdef_no=1423, decl_uid=28947, cgraph_uid=530, symbol_order=533)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) Ts {*leadi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0
   Insn 13: point = 0
   Insn 12: point = 1
   Insn 11: point = 1
   Insn 9: point = 2
   Insn 8: point = 3
   Insn 7: point = 4
   Insn 6: point = 6
   Insn 2: point = 7
Compressing live ranges: from 8 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 2
changing reg in insn 12
changing reg in insn 13
changing reg in insn 9
changing reg in insn 8
changing reg in insn 9
changing reg in insn 7
changing reg in insn 8
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 11
deleting insn with uid = 11.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 12.
verify found no changes in insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


leveldb_filterpolicy_t::~leveldb_filterpolicy_t()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 5[di] 7[sp]
;;  ref usage 	r0={5d,2u} r1={3d} r2={3d} r3={1d,4u,1e} r4={3d} r5={5d,3u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 179{165d,13u,1e} in 8{6 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di]
;; live  kill	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/f:DI 3 bx [orig:90 this ] [90])
        (reg:DI 5 di [ this ])) db/c.cc:100 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [92])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTV22leveldb_filterpolicy_t")  <var_decl 0x7fb537682ab0 _ZTV22leveldb_filterpolicy_t>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])) db/c.cc:100 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTV22leveldb_filterpolicy_t")  <var_decl 0x7fb537682ab0 _ZTV22leveldb_filterpolicy_t>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])
        (nil)))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [91])
        (plus:DI (reg:DI 0 ax [92])
            (const_int 16 [0x10]))) db/c.cc:100 214 {*leadi}
     (expr_list:REG_EQUIV (const:DI (plus:DI (symbol_ref/i:DI ("_ZTV22leveldb_filterpolicy_t")  <var_decl 0x7fb537682ab0 _ZTV22leveldb_filterpolicy_t>)
                (const_int 16 [0x10])))
        (nil)))
(insn 8 7 9 2 (set (mem/f:DI (reg/f:DI 3 bx [orig:90 this ] [90]) [3 this_2(D)->D.28950._vptr.FilterPolicy+0 S8 A64])
        (reg/f:DI 0 ax [91])) db/c.cc:100 89 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 5 di [orig:93 this_2(D)->state_ ] [93])
        (mem/f:DI (plus:DI (reg/f:DI 3 bx [orig:90 this ] [90])
                (const_int 8 [0x8])) [3 this_2(D)->state_+0 S8 A64])) db/c.cc:101 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (plus:DI (reg/f:DI 3 bx [orig:90 this ] [90])
                (const_int 8 [0x8])) [3 this_2(D)->state_+0 S8 A64])
        (nil)))
(note 10 9 12 2 NOTE_INSN_DELETED)
(call_insn 12 10 13 2 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 3 bx [orig:90 this ] [90])
                    (const_int 16 [0x10])) [3 this_2(D)->destructor_+0 S8 A64]) [0 *_4 S1 A8])
        (const_int 0 [0])) db/c.cc:101 660 {*call}
     (expr_list:REG_CALL_DECL (nil)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:90 this ] [90])) db/c.cc:100 89 {*movdi_internal}
     (nil))
(call_insn/j 14 13 15 2 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb12FilterPolicyD2Ev") [flags 0x41]  <function_decl 0x7fb537663288 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) db/c.cc:100 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb12FilterPolicyD2Ev") [flags 0x41]  <function_decl 0x7fb537663288 __base_dtor >)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 15 14 18)
(note 18 15 0 NOTE_INSN_DELETED)

;; Function virtual leveldb_filterpolicy_t::~leveldb_filterpolicy_t() (_ZN22leveldb_filterpolicy_tD0Ev, funcdef_no=1425, decl_uid=28941, cgraph_uid=532, symbol_order=535)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) Ts {*leadi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 16: point = 0
   Insn 15: point = 0
   Insn 14: point = 1
   Insn 13: point = 1
   Insn 12: point = 1
   Insn 11: point = 1
   Insn 9: point = 2
   Insn 8: point = 3
   Insn 7: point = 4
   Insn 6: point = 6
   Insn 2: point = 7
Compressing live ranges: from 8 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 2
changing reg in insn 12
changing reg in insn 15
changing reg in insn 13
changing reg in insn 9
changing reg in insn 8
changing reg in insn 9
changing reg in insn 7
changing reg in insn 8
changing reg in insn 6
changing reg in insn 7
changing reg in insn 9
changing reg in insn 11
deleting insn with uid = 11.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 12.
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


virtual leveldb_filterpolicy_t::~leveldb_filterpolicy_t()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 5[di] 7[sp]
;;  ref usage 	r0={6d,2u} r1={4d} r2={4d} r3={1d,5u,1e} r4={4d} r5={7d,4u} r7={1d,5u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={3d} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 255{238d,16u,1e} in 10{7 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di]
;; live  kill	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/f:DI 3 bx [orig:90 this ] [90])
        (reg:DI 5 di [ this ])) db/c.cc:100 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [92])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTV22leveldb_filterpolicy_t")  <var_decl 0x7fb537682ab0 _ZTV22leveldb_filterpolicy_t>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])) db/c.cc:100 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTV22leveldb_filterpolicy_t")  <var_decl 0x7fb537682ab0 _ZTV22leveldb_filterpolicy_t>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])
        (nil)))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [91])
        (plus:DI (reg:DI 0 ax [92])
            (const_int 16 [0x10]))) db/c.cc:100 214 {*leadi}
     (expr_list:REG_EQUIV (const:DI (plus:DI (symbol_ref/i:DI ("_ZTV22leveldb_filterpolicy_t")  <var_decl 0x7fb537682ab0 _ZTV22leveldb_filterpolicy_t>)
                (const_int 16 [0x10])))
        (nil)))
(insn 8 7 9 2 (set (mem/f:DI (reg/f:DI 3 bx [orig:90 this ] [90]) [3 this_2(D)->D.28950._vptr.FilterPolicy+0 S8 A64])
        (reg/f:DI 0 ax [91])) db/c.cc:100 89 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 5 di [orig:93 this_2(D)->state_ ] [93])
        (mem/f:DI (plus:DI (reg/f:DI 3 bx [orig:90 this ] [90])
                (const_int 8 [0x8])) [3 this_2(D)->state_+0 S8 A64])) db/c.cc:101 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (plus:DI (reg/f:DI 3 bx [orig:90 this ] [90])
                (const_int 8 [0x8])) [3 this_2(D)->state_+0 S8 A64])
        (nil)))
(note 10 9 12 2 NOTE_INSN_DELETED)
(call_insn 12 10 13 2 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 3 bx [orig:90 this ] [90])
                    (const_int 16 [0x10])) [3 this_2(D)->destructor_+0 S8 A64]) [0 *_5 S1 A8])
        (const_int 0 [0])) db/c.cc:101 660 {*call}
     (expr_list:REG_CALL_DECL (nil)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:90 this ] [90])) db/c.cc:100 89 {*movdi_internal}
     (nil))
(call_insn 14 13 15 2 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb12FilterPolicyD2Ev") [flags 0x41]  <function_decl 0x7fb537663288 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) db/c.cc:100 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb12FilterPolicyD2Ev") [flags 0x41]  <function_decl 0x7fb537663288 __base_dtor >)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 2 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:90 this ] [90])) db/c.cc:102 89 {*movdi_internal}
     (nil))
(call_insn/j 16 15 17 2 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) db/c.cc:102 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 17 16 20)
(note 20 17 0 NOTE_INSN_DELETED)

;; Function leveldb_filterpolicy_create_bloom(int)::Wrapper::~Wrapper() (_ZZ33leveldb_filterpolicy_create_bloomEN7WrapperD2Ev, funcdef_no=1511, decl_uid=31952, cgraph_uid=617, symbol_order=620)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) Ts {*leadi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) Ts {*leadi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 4
   Insn 27: point = 0
   Insn 26: point = 0
   Insn 25: point = 1
   Insn 24: point = 1
   Insn 22: point = 2
   Insn 21: point = 3
   Insn 20: point = 4
   Insn 19: point = 6
  BB 3
   Insn 16: point = 8
   Insn 15: point = 9
   Insn 13: point = 10
  BB 2
   Insn 11: point = 12
   Insn 10: point = 12
   Insn 9: point = 12
   Insn 8: point = 13
   Insn 7: point = 14
   Insn 6: point = 16
   Insn 2: point = 17
Compressing live ranges: from 18 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 9
changing reg in insn 15
changing reg in insn 13
changing reg in insn 10
changing reg in insn 2
changing reg in insn 25
changing reg in insn 26
changing reg in insn 22
changing reg in insn 21
changing reg in insn 9
changing reg in insn 8
changing reg in insn 22
changing reg in insn 7
changing reg in insn 8
changing reg in insn 6
changing reg in insn 7
changing reg in insn 13
changing reg in insn 16
changing reg in insn 20
changing reg in insn 21
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 24
deleting insn with uid = 15.
deleting insn with uid = 24.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 16.
rescanning insn with uid = 25.
verify found no changes in insn with uid = 27.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)


leveldb_filterpolicy_create_bloom(int)::Wrapper::~Wrapper()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={9d,5u} r1={4d} r2={4d} r3={1d,6u,1e} r4={4d} r5={7d,6u} r7={1d,7u} r8={3d} r9={3d} r10={3d} r11={3d} r12={3d} r13={3d} r14={3d} r15={3d} r17={4d,1u} r18={3d} r19={3d} r21={4d} r22={4d} r23={4d} r24={4d} r25={4d} r26={4d} r27={4d} r28={4d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={4d} r38={4d} r39={3d} r40={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} 
;;    total ref usage 268{242d,25u,1e} in 16{13 regular + 3 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 17 [flags]
;; live  kill	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/f:DI 3 bx [orig:93 this ] [93])
        (reg:DI 5 di [ this ])) db/c.cc:505 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [95])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTVZ33leveldb_filterpolicy_create_bloomE7Wrapper")  <var_decl 0x7fb537404870 _ZTVZ33leveldb_filterpolicy_create_bloomE7Wrapper>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])) db/c.cc:505 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTVZ33leveldb_filterpolicy_create_bloomE7Wrapper")  <var_decl 0x7fb537404870 _ZTVZ33leveldb_filterpolicy_create_bloomE7Wrapper>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])
        (nil)))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [94])
        (plus:DI (reg:DI 0 ax [95])
            (const_int 16 [0x10]))) db/c.cc:505 214 {*leadi}
     (expr_list:REG_EQUIV (const:DI (plus:DI (symbol_ref/i:DI ("_ZTVZ33leveldb_filterpolicy_create_bloomE7Wrapper")  <var_decl 0x7fb537404870 _ZTVZ33leveldb_filterpolicy_create_bloomE7Wrapper>)
                (const_int 16 [0x10])))
        (nil)))
(insn 8 7 9 2 (set (mem/f:DI (reg/f:DI 3 bx [orig:93 this ] [93]) [3 this_3(D)->D.31955.D.28950._vptr.FilterPolicy+0 S8 A64])
        (reg/f:DI 0 ax [94])) db/c.cc:505 89 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 5 di [orig:87 D.36927 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 3 bx [orig:93 this ] [93])
                (const_int 48 [0x30])) [3 this_3(D)->rep_+0 S8 A64])) db/c.cc:505 89 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:87 D.36927 ] [87])
            (const_int 0 [0]))) db/c.cc:505 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 17)
            (pc))) db/c.cc:505 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 17)
;;  succ:       3 [78.3%]  (FALLTHRU)
;;              4 [21.6%] 
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 7835, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [78.3%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg/f:DI 0 ax [orig:96 MEM[(struct FilterPolicy *)_5]._vptr.FilterPolicy ] [96])
        (mem/f:DI (reg/f:DI 5 di [orig:87 D.36927 ] [87]) [3 MEM[(struct FilterPolicy *)_5]._vptr.FilterPolicy+0 S8 A64])) db/c.cc:505 89 {*movdi_internal}
     (nil))
(note 14 13 16 3 NOTE_INSN_DELETED)
(call_insn 16 14 17 3 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:96 MEM[(struct FilterPolicy *)_5]._vptr.FilterPolicy ] [96])
                    (const_int 8 [0x8])) [3 MEM[(int (*__vtbl_ptr_type) () *)_6 + 8B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_7;(struct FilterPolicy)_5->1) S1 A8])
        (const_int 0 [0])) db/c.cc:505 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (expr_list:REG_CALL_DECL (nil)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 3, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [21.6%] 
;;              3 [100.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(code_label 17 16 18 4 26 "" [1 uses])
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg:DI 0 ax [99])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTV22leveldb_filterpolicy_t")  <var_decl 0x7fb537682ab0 _ZTV22leveldb_filterpolicy_t>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])) db/c.cc:100 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTV22leveldb_filterpolicy_t")  <var_decl 0x7fb537682ab0 _ZTV22leveldb_filterpolicy_t>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])
        (nil)))
(insn 20 19 21 4 (set (reg/f:DI 0 ax [98])
        (plus:DI (reg:DI 0 ax [99])
            (const_int 16 [0x10]))) db/c.cc:100 214 {*leadi}
     (expr_list:REG_EQUIV (const:DI (plus:DI (symbol_ref/i:DI ("_ZTV22leveldb_filterpolicy_t")  <var_decl 0x7fb537682ab0 _ZTV22leveldb_filterpolicy_t>)
                (const_int 16 [0x10])))
        (nil)))
(insn 21 20 22 4 (set (mem/f:DI (reg/f:DI 3 bx [orig:93 this ] [93]) [3 MEM[(struct leveldb_filterpolicy_t *)this_3(D)].D.28950._vptr.FilterPolicy+0 S8 A64])
        (reg/f:DI 0 ax [98])) db/c.cc:100 89 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (set (reg/f:DI 5 di [orig:100 MEM[(struct leveldb_filterpolicy_t *)this_3(D)].state_ ] [100])
        (mem/f:DI (plus:DI (reg/f:DI 3 bx [orig:93 this ] [93])
                (const_int 8 [0x8])) [3 MEM[(struct leveldb_filterpolicy_t *)this_3(D)].state_+0 S8 A64])) db/c.cc:101 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (plus:DI (reg/f:DI 3 bx [orig:93 this ] [93])
                (const_int 8 [0x8])) [3 MEM[(struct leveldb_filterpolicy_t *)this_3(D)].state_+0 S8 A64])
        (nil)))
(note 23 22 25 4 NOTE_INSN_DELETED)
(call_insn 25 23 26 4 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 3 bx [orig:93 this ] [93])
                    (const_int 16 [0x10])) [3 MEM[(struct leveldb_filterpolicy_t *)this_3(D)].destructor_+0 S8 A64]) [0 *_11 S1 A8])
        (const_int 0 [0])) db/c.cc:101 660 {*call}
     (expr_list:REG_CALL_DECL (nil)
        (expr_list:REG_EH_REGION (const_int -2 [0xfffffffffffffffe])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 26 25 27 4 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:93 this ] [93])) db/c.cc:100 89 {*movdi_internal}
     (nil))
(call_insn/j 27 26 28 4 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb12FilterPolicyD2Ev") [flags 0x41]  <function_decl 0x7fb537663288 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) db/c.cc:100 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb12FilterPolicyD2Ev") [flags 0x41]  <function_decl 0x7fb537663288 __base_dtor >)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 28 27 38)
(note 38 28 0 NOTE_INSN_DELETED)

;; Function bool SaveError(char**, const leveldb::Status&) (SaveError, funcdef_no=1429, decl_uid=31234, cgraph_uid=536, symbol_order=539)

      Creating newreg=112
Removing SCRATCH in insn #6 (nop 2)
rescanning insn with uid = 6.
      Creating newreg=113
Removing SCRATCH in insn #73 (nop 3)
rescanning insn with uid = 73.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r112
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 12:  (0) ?mr {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 28:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 31:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) rBwBz {*call}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 9:  (0) q  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 50:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 54:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 55:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 58:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) rBwBz {*call}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 8:  (0) q  (1) qn {*movqi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) q  (1) qn {*movqi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r113
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 12
   Insn 75: point = 0
  BB 13
   Insn 78: point = 0
  BB 11
   Insn 74: point = 0
   Insn 73: point = 0
   Insn 71: point = 1
  BB 9
   Insn 88: point = 3
   Insn 8: point = 3
  BB 8
   Insn 62: point = 4
   Insn 61: point = 4
  BB 7
   Insn 59: point = 6
   Insn 58: point = 6
   Insn 57: point = 7
   Insn 55: point = 9
   Insn 54: point = 10
   Insn 52: point = 11
   Insn 51: point = 12
   Insn 50: point = 12
   Insn 48: point = 12
   Insn 47: point = 12
   Insn 46: point = 12
   Insn 45: point = 13
   Insn 44: point = 14
   Insn 43: point = 14
  BB 6
   Insn 86: point = 16
   Insn 9: point = 16
  BB 5
   Insn 36: point = 17
   Insn 35: point = 17
  BB 4
   Insn 33: point = 19
   Insn 32: point = 19
   Insn 31: point = 20
   Insn 29: point = 22
   Insn 28: point = 23
   Insn 26: point = 24
   Insn 25: point = 25
   Insn 24: point = 25
   Insn 22: point = 25
   Insn 21: point = 25
   Insn 20: point = 25
   Insn 19: point = 26
  BB 3
   Insn 17: point = 28
   Insn 16: point = 28
   Insn 15: point = 28
  BB 10
   Insn 7: point = 30
  BB 2
   Insn 13: point = 31
   Insn 12: point = 31
   Insn 6: point = 31
   Insn 3: point = 33
   Insn 2: point = 34
 r87: [30..30] [16..16] [1..3]
 r88: [28..28] [14..15]
 r92: [4..9]
 r95: [17..22]
 r97: [31..34] [23..29] [10..15]
 r98: [31..33] [25..29] [12..15]
 r100: [21..26]
 r102: [23..24]
 r104: [19..20]
 r105: [8..13]
 r107: [10..11]
 r109: [6..7]
 r112: [31..32]
 r113: [0..0]
Compressing live ranges: from 35 to 27 - 77%
Ranges after the compression:
 r87: [24..24] [13..13] [1..2]
 r88: [22..22] [11..12]
 r92: [3..6]
 r95: [14..17]
 r97: [25..26] [18..23] [7..12]
 r98: [25..26] [20..23] [9..12]
 r100: [16..21]
 r102: [18..19]
 r104: [14..15]
 r105: [5..10]
 r107: [7..8]
 r109: [3..4]
 r112: [25..26]
 r113: [0..0]

********** Inheritance #1: **********

EBB 2 3
EBB 4 5
EBB 6
EBB 7 8
EBB 9
EBB 10
EBB 11
EBB 12
EBB 13

********** Pseudo live ranges #2: **********

  BB 12
   Insn 75: point = 0
  BB 13
   Insn 78: point = 0
  BB 11
   Insn 74: point = 0
   Insn 73: point = 0
   Insn 71: point = 1
  BB 9
   Insn 88: point = 3
   Insn 8: point = 3
  BB 8
   Insn 62: point = 4
   Insn 61: point = 4
  BB 7
   Insn 59: point = 6
   Insn 58: point = 6
   Insn 57: point = 7
   Insn 55: point = 9
   Insn 54: point = 10
   Insn 52: point = 11
   Insn 51: point = 12
   Insn 50: point = 12
   Insn 48: point = 12
   Insn 47: point = 12
   Insn 46: point = 12
   Insn 45: point = 13
   Insn 44: point = 14
   Insn 43: point = 14
  BB 6
   Insn 86: point = 16
   Insn 9: point = 16
  BB 5
   Insn 36: point = 17
   Insn 35: point = 17
  BB 4
   Insn 33: point = 19
   Insn 32: point = 19
   Insn 31: point = 20
   Insn 29: point = 22
   Insn 28: point = 23
   Insn 26: point = 24
   Insn 25: point = 25
   Insn 24: point = 25
   Insn 22: point = 25
   Insn 21: point = 25
   Insn 20: point = 25
   Insn 19: point = 26
  BB 3
   Insn 17: point = 28
   Insn 16: point = 28
   Insn 15: point = 28
  BB 10
   Insn 7: point = 30
  BB 2
   Insn 13: point = 31
   Insn 12: point = 31
   Insn 6: point = 31
   Insn 3: point = 33
   Insn 2: point = 34
 r87: [30..30] [16..16] [1..3]
 r88: [28..28] [14..15]
 r92: [4..9]
 r95: [17..22]
 r97: [31..34] [23..29] [10..15]
 r98: [31..33] [25..29] [12..15]
 r100: [21..26]
 r102: [23..24]
 r104: [19..20]
 r105: [8..13]
 r107: [10..11]
 r109: [6..7]
 r112: [31..32]
 r113: [0..0]
Compressing live ranges: from 35 to 27 - 77%
Ranges after the compression:
 r87: [24..24] [13..13] [1..2]
 r88: [22..22] [11..12]
 r92: [3..6]
 r95: [14..17]
 r97: [25..26] [18..23] [7..12]
 r98: [25..26] [20..23] [9..12]
 r100: [16..21]
 r102: [18..19]
 r104: [14..15]
 r105: [5..10]
 r107: [7..8]
 r109: [3..4]
 r112: [25..26]
 r113: [0..0]

********** Assignment #1: **********

	 Assigning to 112 (cl=INDEX_REGS, orig=112, freq=1000, tfirst=112, tfreq=1000)...
	   Assign 0 to reload r112 (freq=1000)
	 Assigning to 113 (cl=INDEX_REGS, orig=113, freq=1000, tfirst=113, tfreq=1000)...
	   Assign 1 to reload r113 (freq=1000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=80, prev_offset=80)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=48, prev_offset=48)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
changing reg in insn 7
changing reg in insn 8
changing reg in insn 9
changing reg in insn 71
changing reg in insn 15
changing reg in insn 43
changing reg in insn 16
changing reg in insn 55
changing reg in insn 61
changing reg in insn 58
changing reg in insn 29
changing reg in insn 35
changing reg in insn 32
changing reg in insn 2
changing reg in insn 54
changing reg in insn 28
changing reg in insn 15
changing reg in insn 52
changing reg in insn 26
changing reg in insn 3
changing reg in insn 46
changing reg in insn 20
changing reg in insn 12
changing reg in insn 19
changing reg in insn 31
changing reg in insn 21
changing reg in insn 26
changing reg in insn 28
changing reg in insn 31
changing reg in insn 32
changing reg in insn 45
changing reg in insn 57
changing reg in insn 47
changing reg in insn 52
changing reg in insn 54
changing reg in insn 57
changing reg in insn 58
changing reg in insn 6
changing reg in insn 73
deleting insn with uid = 35.
deleting insn with uid = 43.
deleting insn with uid = 61.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 51.
verify found no changes in insn with uid = 62.
verify found no changes in insn with uid = 75.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 17 count 14 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 17 count 14 (    1)


bool SaveError(char**, const leveldb::Status&)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 41[r12]
;;  ref usage 	r0={16d,7u} r1={10d} r2={9d} r3={4d,6u} r4={11d,3u} r5={16d,11u} r6={1d,3u} r7={1d,29u} r8={8d} r9={8d} r10={8d} r11={8d} r12={8d} r13={8d} r14={8d} r15={8d} r17={16d,5u} r18={8d} r19={8d} r20={4e} r21={9d} r22={9d} r23={9d} r24={9d} r25={9d} r26={9d} r27={9d} r28={9d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={9d} r38={9d} r39={8d} r40={8d} r41={1d,3u,2e} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} 
;;    total ref usage 696{623d,67u,6e} in 45{37 regular + 8 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 6 [bp] 17 [flags] 41 [r12]
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 6 [bp] 17 [flags] 41 [r12]
;; live  kill	 17 [flags]
(note 10 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 10 3 2 (set (reg/v/f:DI 41 r12 [orig:97 errptr ] [97])
        (reg:DI 5 di [ errptr ])) db/c.cc:132 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg/v/f:DI 6 bp [orig:98 s ] [98])
        (reg:DI 4 si [ s ])) db/c.cc:132 89 {*movdi_internal}
     (nil))
(note 4 3 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 4 12 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                        (const_int 40 [0x28])) [3 D.36951+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [112])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) db/c.cc:132 986 {stack_tls_protect_set_di}
     (nil))
(insn 12 6 13 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem/f:DI (reg/v/f:DI 6 bp [orig:98 s ] [98]) [3 s_4(D)->state_+0 S8 A128])
            (const_int 0 [0]))) db/c.cc:134 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 13 12 14 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 83)
            (pc))) db/c.cc:134 612 {*jcc_1}
     (int_list:REG_BR_PROB 1014 (nil))
 -> 83)
;;  succ:       10 [10.1%] 
;;              3 [89.9%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 6 [bp] 7 [sp] 41 [r12]

;; basic block 3, loop depth 0, count 0, freq 8986, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [89.9%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 7 [sp] 41 [r12]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 15 14 16 3 (set (reg/f:DI 5 di [orig:88 D.36948 ] [88])
        (mem/f:DI (reg/v/f:DI 41 r12 [orig:97 errptr ] [97]) [3 *errptr_5(D)+0 S8 A64])) db/c.cc:136 89 {*movdi_internal}
     (nil))
(insn 16 15 17 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:88 D.36948 ] [88])
            (const_int 0 [0]))) db/c.cc:136 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 17 16 18 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 41)
            (pc))) db/c.cc:136 612 {*jcc_1}
     (int_list:REG_BR_PROB 8500 (nil))
 -> 41)
;;  succ:       4 [15.0%]  (FALLTHRU)
;;              7 [85.0%] 
;; lr  out 	 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 5 [di] 6 [bp] 7 [sp] 41 [r12]

;; basic block 4, loop depth 0, count 0, freq 1348, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [15.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg/f:DI 3 bx [100])
        (reg/f:DI 7 sp)) db/c.cc:137 89 {*movdi_internal}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(insn 20 19 21 4 (set (reg:DI 4 si)
        (reg/v/f:DI 6 bp [orig:98 s ] [98])) db/c.cc:137 89 {*movdi_internal}
     (nil))
(insn 21 20 22 4 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [100])) db/c.cc:137 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(call_insn 22 21 24 4 (call (mem:QI (symbol_ref:DI ("_ZNK7leveldb6Status8ToStringB5cxx11Ev") [flags 0x41]  <function_decl 0x7fb5377e65e8 ToString>) [0 ToString S1 A8])
        (const_int 0 [0])) db/c.cc:137 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZNK7leveldb6Status8ToStringB5cxx11Ev") [flags 0x41]  <function_decl 0x7fb5377e65e8 ToString>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 24 22 25 4 (set (reg:DI 5 di)
        (mem/f/c:DI (reg/f:DI 7 sp) [3 MEM[(char * *)&D.36936]+0 S8 A128])) db/c.cc:137 89 {*movdi_internal}
     (nil))
(call_insn 25 24 26 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strdup") [flags 0x41]  <function_decl 0x7fb5388ada20 strdup>) [0 strdup S1 A8])
            (const_int 0 [0]))) db/c.cc:137 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("strdup") [flags 0x41]  <function_decl 0x7fb5388ada20 strdup>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 26 25 28 4 (set (reg/f:DI 0 ax [102])
        (reg:DI 0 ax)) db/c.cc:137 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/v/f:DI 41 r12 [orig:97 errptr ] [97]) [3 *errptr_5(D)+0 S8 A64])
        (expr_list:REG_NOALIAS (reg/f:DI 0 ax [102])
            (nil))))
(insn 28 26 29 4 (set (mem/f:DI (reg/v/f:DI 41 r12 [orig:97 errptr ] [97]) [3 *errptr_5(D)+0 S8 A64])
        (reg/f:DI 0 ax [102])) db/c.cc:137 89 {*movdi_internal}
     (nil))
(insn 29 28 31 4 (set (reg/f:DI 5 di [orig:95 D.36948 ] [95])
        (mem/f/c:DI (reg/f:DI 7 sp) [3 MEM[(char * *)&D.36936]+0 S8 A128])) 89 {*movdi_internal}
     (nil))
(insn 31 29 32 4 (parallel [
            (set (reg/f:DI 3 bx [104])
                (plus:DI (reg/f:DI 3 bx [100])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:179 218 {*adddi_1}
     (nil))
(insn 32 31 33 4 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:95 D.36948 ] [95])
            (reg/f:DI 3 bx [104]))) /usr/include/c++/5/bits/basic_string.h:179 8 {*cmpdi_1}
     (nil))
(jump_insn 33 32 34 4 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 37)
            (pc))) /usr/include/c++/5/bits/basic_string.h:179 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 37)
;;  succ:       5 [78.3%]  (FALLTHRU)
;;              6 [21.6%] 
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 1056, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [78.3%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 34 33 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(call_insn 36 34 37 5 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/ext/new_allocator.h:110 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 1348, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [21.6%] 
;;              5 [100.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 37 36 38 6 35 "" [1 uses])
(note 38 37 9 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 9 38 86 6 (set (reg:QI 0 ax [orig:87 D.36947 ] [87])
        (const_int 1 [0x1])) db/c.cc:137 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(jump_insn 86 9 87 6 (set (pc)
        (label_ref 65)) 654 {jump}
     (nil)
 -> 65)
;;  succ:       11 [100.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 87 86 41)
;; basic block 7, loop depth 0, count 0, freq 7638, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [85.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 41 87 42 7 34 "" [1 uses])
(note 42 41 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(call_insn 44 42 45 7 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fb538d19ca8 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) db/c.cc:140 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fb538d19ca8 free>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 45 44 46 7 (set (reg/f:DI 3 bx [105])
        (reg/f:DI 7 sp)) db/c.cc:141 89 {*movdi_internal}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(insn 46 45 47 7 (set (reg:DI 4 si)
        (reg/v/f:DI 6 bp [orig:98 s ] [98])) db/c.cc:141 89 {*movdi_internal}
     (nil))
(insn 47 46 48 7 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [105])) db/c.cc:141 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(call_insn 48 47 50 7 (call (mem:QI (symbol_ref:DI ("_ZNK7leveldb6Status8ToStringB5cxx11Ev") [flags 0x41]  <function_decl 0x7fb5377e65e8 ToString>) [0 ToString S1 A8])
        (const_int 0 [0])) db/c.cc:141 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZNK7leveldb6Status8ToStringB5cxx11Ev") [flags 0x41]  <function_decl 0x7fb5377e65e8 ToString>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 50 48 51 7 (set (reg:DI 5 di)
        (mem/f/c:DI (reg/f:DI 7 sp) [3 MEM[(char * *)&D.31237]+0 S8 A128])) db/c.cc:141 89 {*movdi_internal}
     (nil))
(call_insn 51 50 52 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strdup") [flags 0x41]  <function_decl 0x7fb5388ada20 strdup>) [0 strdup S1 A8])
            (const_int 0 [0]))) db/c.cc:141 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("strdup") [flags 0x41]  <function_decl 0x7fb5388ada20 strdup>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 52 51 54 7 (set (reg/f:DI 0 ax [107])
        (reg:DI 0 ax)) db/c.cc:141 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/v/f:DI 41 r12 [orig:97 errptr ] [97]) [3 *errptr_5(D)+0 S8 A64])
        (expr_list:REG_NOALIAS (reg/f:DI 0 ax [107])
            (nil))))
(insn 54 52 55 7 (set (mem/f:DI (reg/v/f:DI 41 r12 [orig:97 errptr ] [97]) [3 *errptr_5(D)+0 S8 A64])
        (reg/f:DI 0 ax [107])) db/c.cc:141 89 {*movdi_internal}
     (nil))
(insn 55 54 57 7 (set (reg/f:DI 5 di [orig:92 D.36948 ] [92])
        (mem/f/c:DI (reg/f:DI 7 sp) [3 MEM[(char * *)&D.31237]+0 S8 A128])) 89 {*movdi_internal}
     (nil))
(insn 57 55 58 7 (parallel [
            (set (reg/f:DI 3 bx [109])
                (plus:DI (reg/f:DI 3 bx [105])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:179 218 {*adddi_1}
     (nil))
(insn 58 57 59 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:92 D.36948 ] [92])
            (reg/f:DI 3 bx [109]))) /usr/include/c++/5/bits/basic_string.h:179 8 {*cmpdi_1}
     (nil))
(jump_insn 59 58 60 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 63)
            (pc))) /usr/include/c++/5/bits/basic_string.h:179 612 {*jcc_1}
     (int_list:REG_BR_PROB 3017 (nil))
 -> 63)
;;  succ:       8 [69.8%]  (FALLTHRU)
;;              9 [30.2%] 
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

;; basic block 8, loop depth 0, count 0, freq 5334, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [69.8%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 60 59 62 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(call_insn 62 60 63 8 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/ext/new_allocator.h:110 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       9 [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 9, loop depth 0, count 0, freq 7638, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [30.2%] 
;;              8 [100.0%]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 63 62 64 9 36 "" [1 uses])
(note 64 63 8 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 8 64 88 9 (set (reg:QI 0 ax [orig:87 D.36947 ] [87])
        (const_int 1 [0x1])) db/c.cc:143 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(jump_insn 88 8 89 9 (set (pc)
        (label_ref 65)) 654 {jump}
     (nil)
 -> 65)
;;  succ:       11 [100.0%] 
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 89 88 83)
;; basic block 10, loop depth 0, count 0, freq 1014, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [10.1%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 83 89 82 10 38 "" [1 uses])
(note 82 83 7 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 7 82 65 10 (set (reg:QI 0 ax [orig:87 D.36947 ] [87])
        (const_int 0 [0])) db/c.cc:135 93 {*movqi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
;;  succ:       11 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 11, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [100.0%]  (FALLTHRU)
;;              6 [100.0%] 
;;              9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 1 [dx]
(code_label 65 7 66 11 33 "" [2 uses])
(note 66 65 71 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 71 66 73 11 (set (reg/i:QI 0 ax)
        (reg:QI 0 ax [orig:87 D.36947 ] [87])) db/c.cc:144 93 {*movqi_internal}
     (nil))
(insn 73 71 74 11 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                                (const_int 40 [0x28])) [3 D.36951+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 1 dx [113]))
        ]) db/c.cc:144 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 74 73 84 11 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 77)
            (pc))) db/c.cc:144 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 77)
;;  succ:       13 [100.0%] 
;;              12 [0.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 12, loop depth 0, count 0, freq 4
;;  prev block 11, next block 13, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [0.0%]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 84 74 75 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(call_insn 75 84 76 12 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) db/c.cc:144 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 76 75 77)
;; basic block 13, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 12, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 77 76 85 13 37 "" [1 uses])
(note 85 77 78 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 78 85 90 13 (use (reg/i:QI 0 ax)) db/c.cc:144 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 90 78 0 NOTE_INSN_DELETED)

;; Function virtual void leveldb_filterpolicy_t::CreateFilter(const leveldb::Slice*, int, std::__cxx11::string*) const (_ZNK22leveldb_filterpolicy_t12CreateFilterEPKN7leveldb5SliceEiPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE, funcdef_no=1427, decl_uid=28920, cgraph_uid=534, symbol_order=537)

      Creating newreg=148
Removing SCRATCH in insn #30 (nop 2)
rescanning insn with uid = 30.
      Creating newreg=149
Removing SCRATCH in insn #169 (nop 3)
rescanning insn with uid = 169.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-56, prev_offset=0)
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 25:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r148
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 38:  (0) r  (1) rm {*extendsidi2_rex64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 42:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) rBwBz {*call}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 50:  (0) r  (1) l  (2) M {*ashldi3_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 31:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 56:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 57:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 59:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 34:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 32:  (0) r  (1) Z {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 33:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 110:  (0) r  (1) i {*movdi_internal}
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 111:  (0) r  (1) 0  (2) rm {*subdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) rm  (1) re {*cmpdi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 84:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 85:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 86:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 35:  (0) r  (1) Z {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 95:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 96:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 98:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 99:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 100:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 101:  (0) rm  (1) re {*cmpsi_1}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 115:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 123:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 127:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 131:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 134:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 138:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 145:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 149:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 154:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 160:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 165:  (0) rBwBz {*call}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r149
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 171:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 4
   Insn 46: point = 0
  BB 31
   Insn 165: point = 0
   Insn 164: point = 0
  BB 28
   Insn 233: point = 2
  BB 30
   Insn 160: point = 3
   Insn 159: point = 3
  BB 27
   Insn 155: point = 5
   Insn 154: point = 5
   Insn 152: point = 5
  BB 26
   Insn 149: point = 8
   Insn 148: point = 8
  BB 25
   Insn 146: point = 10
   Insn 145: point = 10
  BB 24
   Insn 184: point = 11
  BB 18
   Insn 116: point = 13
   Insn 115: point = 13
  BB 12
   Insn 225: point = 14
  BB 29
   Insn 188: point = 15
  BB 33
   Insn 171: point = 17
  BB 34
  BB 32
   Insn 170: point = 17
   Insn 169: point = 17
  BB 23
   Insn 230: point = 18
   Insn 138: point = 18
   Insn 137: point = 18
  BB 22
   Insn 135: point = 20
   Insn 134: point = 20
  BB 21
   Insn 131: point = 21
   Insn 130: point = 21
  BB 20
   Insn 128: point = 23
   Insn 127: point = 23
   Insn 126: point = 23
   Insn 125: point = 23
  BB 19
   Insn 123: point = 25
   Insn 122: point = 25
   Insn 121: point = 26
   Insn 120: point = 26
  BB 11
   Insn 113: point = 28
   Insn 112: point = 28
   Insn 111: point = 29
   Insn 110: point = 31
   Insn 109: point = 32
   Insn 79: point = 33
  BB 10
   Insn 78: point = 35
   Insn 77: point = 36
   Insn 76: point = 37
   Insn 75: point = 37
   Insn 74: point = 37
   Insn 73: point = 38
   Insn 71: point = 38
  BB 17
   Insn 228: point = 40
  BB 16
   Insn 102: point = 41
   Insn 101: point = 41
   Insn 100: point = 41
   Insn 99: point = 41
   Insn 98: point = 41
   Insn 97: point = 42
   Insn 96: point = 43
   Insn 95: point = 44
  BB 15
   Insn 35: point = 46
   Insn 92: point = 47
  BB 9
   Insn 33: point = 50
   Insn 32: point = 51
  BB 14
   Insn 90: point = 53
   Insn 89: point = 53
  BB 13
   Insn 87: point = 54
   Insn 86: point = 54
   Insn 85: point = 54
   Insn 84: point = 54
  BB 8
   Insn 221: point = 55
   Insn 34: point = 55
   Insn 64: point = 56
  BB 7
   Insn 63: point = 58
   Insn 62: point = 58
  BB 6
   Insn 60: point = 60
   Insn 59: point = 60
   Insn 57: point = 60
   Insn 56: point = 60
  BB 5
   Insn 31: point = 61
   Insn 53: point = 62
   Insn 52: point = 63
   Insn 51: point = 63
   Insn 50: point = 63
  BB 3
   Insn 44: point = 65
   Insn 43: point = 65
   Insn 42: point = 66
  BB 2
   Insn 40: point = 68
   Insn 39: point = 68
   Insn 38: point = 68
   Insn 30: point = 69
   Insn 27: point = 71
   Insn 26: point = 72
   Insn 25: point = 73
   Insn 24: point = 74
 r109: [54..68]
 r110: [58..63]
 r111: [54..55]
 r114: [23..33]
 r115: [26..32]
 r120: [41..47]
 r121: [41..46]
 r123: [53..62] [18..50] [3..16]
 r124: [53..56] [21..51] [8..14]
 r127: [60..61]
 r128: [35..74]
 r129: [53..73] [48..49]
 r130: [37..72]
 r131: [25..71]
 r133: [65..66]
 r137: [36..38]
 r139: [43..44]
 r140: [41..42]
 r141: [28..29]
 r142: [30..31]
 r143: [15..15] [0..5]
 r144: [6..11]
 r148: [69..70]
 r149: [17..17]
Compressing live ranges: from 75 to 27 - 36%
Ranges after the compression:
 r109: [19..24]
 r110: [21..22]
 r111: [19..20]
 r114: [7..10]
 r115: [7..10]
 r120: [13..16]
 r121: [13..16]
 r123: [7..22] [0..5]
 r124: [7..20] [2..3]
 r127: [21..22]
 r128: [11..26]
 r129: [17..26]
 r130: [11..26]
 r131: [7..26]
 r133: [23..24]
 r137: [11..12]
 r139: [15..16]
 r140: [13..14]
 r141: [7..8]
 r142: [9..10]
 r143: [4..4] [0..1]
 r144: [2..3]
 r148: [25..26]
 r149: [6..6]

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5
EBB 6
EBB 7 8
EBB 9
EBB 10 11
EBB 12
EBB 13
EBB 14 15
EBB 16
EBB 17
EBB 18
EBB 19 20 21
EBB 22 23
EBB 24
EBB 25 26
EBB 27
EBB 28
EBB 29
EBB 30
EBB 31
EBB 32
EBB 33
EBB 34

********** Pseudo live ranges #2: **********

  BB 4
   Insn 46: point = 0
  BB 31
   Insn 165: point = 0
   Insn 164: point = 0
  BB 28
   Insn 233: point = 2
  BB 30
   Insn 160: point = 3
   Insn 159: point = 3
  BB 27
   Insn 155: point = 5
   Insn 154: point = 5
   Insn 152: point = 5
  BB 26
   Insn 149: point = 8
   Insn 148: point = 8
  BB 25
   Insn 146: point = 10
   Insn 145: point = 10
  BB 24
   Insn 184: point = 11
  BB 18
   Insn 116: point = 13
   Insn 115: point = 13
  BB 12
   Insn 225: point = 14
  BB 29
   Insn 188: point = 15
  BB 33
   Insn 171: point = 17
  BB 34
  BB 32
   Insn 170: point = 17
   Insn 169: point = 17
  BB 23
   Insn 230: point = 18
   Insn 138: point = 18
   Insn 137: point = 18
  BB 22
   Insn 135: point = 20
   Insn 134: point = 20
  BB 21
   Insn 131: point = 21
   Insn 130: point = 21
  BB 20
   Insn 128: point = 23
   Insn 127: point = 23
   Insn 126: point = 23
   Insn 125: point = 23
  BB 19
   Insn 123: point = 25
   Insn 122: point = 25
   Insn 121: point = 26
   Insn 120: point = 26
  BB 11
   Insn 113: point = 28
   Insn 112: point = 28
   Insn 111: point = 29
   Insn 110: point = 31
   Insn 109: point = 32
   Insn 79: point = 33
  BB 10
   Insn 78: point = 35
   Insn 77: point = 36
   Insn 76: point = 37
   Insn 75: point = 37
   Insn 74: point = 37
   Insn 73: point = 38
   Insn 71: point = 38
  BB 17
   Insn 228: point = 40
  BB 16
   Insn 102: point = 41
   Insn 101: point = 41
   Insn 100: point = 41
   Insn 99: point = 41
   Insn 98: point = 41
   Insn 97: point = 42
   Insn 96: point = 43
   Insn 95: point = 44
  BB 15
   Insn 35: point = 46
   Insn 92: point = 47
  BB 9
   Insn 33: point = 50
   Insn 32: point = 51
  BB 14
   Insn 90: point = 53
   Insn 89: point = 53
  BB 13
   Insn 87: point = 54
   Insn 86: point = 54
   Insn 85: point = 54
   Insn 84: point = 54
  BB 8
   Insn 221: point = 55
   Insn 34: point = 55
   Insn 64: point = 56
  BB 7
   Insn 63: point = 58
   Insn 62: point = 58
  BB 6
   Insn 60: point = 60
   Insn 59: point = 60
   Insn 57: point = 60
   Insn 56: point = 60
  BB 5
   Insn 31: point = 61
   Insn 53: point = 62
   Insn 52: point = 63
   Insn 51: point = 63
   Insn 50: point = 63
  BB 3
   Insn 44: point = 65
   Insn 43: point = 65
   Insn 42: point = 66
  BB 2
   Insn 40: point = 68
   Insn 39: point = 68
   Insn 38: point = 68
   Insn 30: point = 69
   Insn 27: point = 71
   Insn 26: point = 72
   Insn 25: point = 73
   Insn 24: point = 74
 r109: [54..68]
 r110: [58..63]
 r111: [54..55]
 r114: [23..33]
 r115: [26..32]
 r120: [41..47]
 r121: [41..46]
 r123: [53..62] [18..50] [3..16]
 r124: [53..56] [21..51] [8..14]
 r127: [60..61]
 r128: [35..74]
 r129: [53..73] [48..49]
 r130: [37..72]
 r131: [25..71]
 r133: [65..66]
 r137: [36..38]
 r139: [43..44]
 r140: [41..42]
 r141: [28..29]
 r142: [30..31]
 r143: [15..15] [0..5]
 r144: [6..11]
 r148: [69..70]
 r149: [17..17]
Compressing live ranges: from 75 to 27 - 36%
Ranges after the compression:
 r109: [19..24]
 r110: [21..22]
 r111: [19..20]
 r114: [7..10]
 r115: [7..10]
 r120: [13..16]
 r121: [13..16]
 r123: [7..22] [0..5]
 r124: [7..20] [2..3]
 r127: [21..22]
 r128: [11..26]
 r129: [17..26]
 r130: [11..26]
 r131: [7..26]
 r133: [23..24]
 r137: [11..12]
 r139: [15..16]
 r140: [13..14]
 r141: [7..8]
 r142: [9..10]
 r143: [4..4] [0..1]
 r144: [2..3]
 r148: [25..26]
 r149: [6..6]

********** Assignment #1: **********

	 Assigning to 148 (cl=INDEX_REGS, orig=148, freq=90, tfirst=148, tfreq=90)...
	   Assign 0 to reload r148 (freq=90)
	 Assigning to 149 (cl=INDEX_REGS, orig=149, freq=90, tfirst=149, tfreq=90)...
	   Assign 0 to reload r149 (freq=90)
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7

******** Rematerialization #1: ********

df_worklist_dataflow_doublequeue:n_basic_blocks 35 n_edges 46 count 35 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 35 n_edges 46 count 35 (    1)

Cands:

BB 2:
  register live in: 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109 128 129 130 131
  changed regs: 109 128 129 130 131 148
  dead regs: 1 [dx] 2 [cx] 4 [si] 5 [di] 17 [flags] 20 [frame]

BB 3:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109 128 129 130 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109 128 129 130 131
  changed regs: 133
  dead regs: 17 [flags] 133

BB 4:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  register live out: 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 5:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109 128 129 130 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109 110 123 127 128 129 130 131
  changed regs: 0 [ax] 5 [di] 110 123 127
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 6:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109 110 123 127 128 129 130 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109 110 123 127 128 129 130 131
  changed regs: 127
  dead regs: 17 [flags]

BB 7:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109 110 123 128 129 130 131
  register live out: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109 123 128 129 130 131
  changed regs: 0 [ax] 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 110

BB 8:
  register live in: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109 123 128 129 130 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109 111 123 124 128 129 130 131
  changed regs: 111 124
  dead regs: 0 [ax]

BB 9:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 128 130 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 124 128 130 131
  changed regs: 123 124
  dead regs:

BB 10:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 124 128 130 131
  register live out: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 124 131
  changed regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8] 137
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 128 130 137

BB 11:
  register live in: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 124 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 114 115 123 124 131
  changed regs: 114 115 141 142
  dead regs: 0 [ax] 17 [flags] 20 [frame] 141 142

BB 12:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 124
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 124
  changed regs:
  dead regs:

BB 13:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109 111 123 124 128 129 130 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 109 111 123 124 128 129 130 131
  changed regs: 111
  dead regs: 17 [flags]

BB 14:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 124 128 129 130 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 124 128 129 130 131
  changed regs:
  dead regs: 17 [flags]

BB 15:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 124 128 129 130 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 120 121 123 124 128 130 131
  changed regs: 120 121
  dead regs: 129

BB 16:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 120 121 123 124 128 130 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 120 121 123 124 128 130 131
  changed regs: 120 121 139 140
  dead regs: 17 [flags] 139 140

BB 17:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 124 128 130 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 124 128 130 131
  changed regs:
  dead regs:

BB 18:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 124
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 124
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 19:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 114 115 123 124 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 114 123 124
  changed regs: 0 [ax] 1 [dx] 4 [si] 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 115 131

BB 20:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 114 123 124
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 124
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 114

BB 21:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 124
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 124

BB 22:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123
  changed regs:
  dead regs: 17 [flags]

BB 23:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 123

BB 24:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 124
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 124 144
  changed regs: 144
  dead regs: 0 [ax]

BB 25:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 124 144
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 124 144
  changed regs:
  dead regs: 17 [flags]

BB 26:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 124 144
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 144
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 124

BB 27:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 144
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 143
  changed regs: 143
  dead regs: 17 [flags] 144

BB 28:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143
  changed regs:
  dead regs:

BB 29:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 143
  changed regs: 143
  dead regs: 0 [ax]

BB 30:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 123 143
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 123

BB 31:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 143
  register live out: 7 [sp] 16 [argp] 20 [frame]
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 143

BB 32:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs: 17 [flags] 149
  dead regs: 17 [flags] 20 [frame]

BB 33:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  register live out: 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 34:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs:
subreg regs:
  Slot 0 regnos (width = 8):	 129
Changing spilled pseudos to memory in insn #25
Changing spilled pseudos to memory in insn #92
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=96, prev_offset=80)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=32, prev_offset=16)
Can eliminate 20 to 6 (offset=-56, prev_offset=0)

********** Local #3: **********

	   Spilling non-eliminable hard regs: 7
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 169:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 73:  (0) =r  (1) Ts {*leadi}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 92:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 25:  (0) m  (1) re {*movdi_internal}
New elimination table:
Can eliminate 16 to 7 (offset=96, prev_offset=96)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=32, prev_offset=32)
Can eliminate 20 to 6 (offset=-56, prev_offset=0)
changing reg in insn 38
changing reg in insn 86
changing reg in insn 59
changing reg in insn 50
changing reg in insn 43
changing reg in insn 39
changing reg in insn 43
changing reg in insn 50
changing reg in insn 62
changing reg in insn 51
changing reg in insn 85
changing reg in insn 34
changing reg in insn 86
changing reg in insn 85
changing reg in insn 84
changing reg in insn 79
changing reg in insn 125
changing reg in insn 121
changing reg in insn 109
changing reg in insn 120
changing reg in insn 112
changing reg in insn 100
changing reg in insn 92
changing reg in insn 97
changing reg in insn 95
changing reg in insn 100
changing reg in insn 97
changing reg in insn 95
changing reg in insn 99
changing reg in insn 35
changing reg in insn 99
changing reg in insn 98
changing reg in insn 96
changing reg in insn 53
changing reg in insn 33
changing reg in insn 159
changing reg in insn 154
changing reg in insn 137
changing reg in insn 134
changing reg in insn 96
changing reg in insn 76
changing reg in insn 56
changing reg in insn 64
changing reg in insn 32
changing reg in insn 148
changing reg in insn 145
changing reg in insn 130
changing reg in insn 127
changing reg in insn 98
changing reg in insn 84
changing reg in insn 75
changing reg in insn 57
changing reg in insn 31
changing reg in insn 59
changing reg in insn 57
changing reg in insn 56
changing reg in insn 24
changing reg in insn 78
changing reg in insn 71
changing reg in insn 71
changing reg in insn 26
changing reg in insn 101
changing reg in insn 89
changing reg in insn 74
changing reg in insn 38
changing reg in insn 27
changing reg in insn 122
changing reg in insn 111
changing reg in insn 111
changing reg in insn 42
changing reg in insn 43
changing reg in insn 71
changing reg in insn 77
changing reg in insn 95
changing reg in insn 96
changing reg in insn 97
changing reg in insn 98
changing reg in insn 111
changing reg in insn 112
changing reg in insn 110
changing reg in insn 111
changing reg in insn 188
changing reg in insn 152
changing reg in insn 164
changing reg in insn 184
changing reg in insn 152
changing reg in insn 30
changing reg in insn 169
deleting insn with uid = 77.
deleting insn with uid = 120.
deleting insn with uid = 152.


try_optimize_cfg iteration 1

Forwarding edge 11->12 to 18 failed.
Forwarding edge 16->17 to 10 failed.
Forwarding edge 27->28 to 31 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 63.
rescanning insn with uid = 78.
verify found no changes in insn with uid = 116.
verify found no changes in insn with uid = 123.
verify found no changes in insn with uid = 126.
verify found no changes in insn with uid = 131.
verify found no changes in insn with uid = 138.
verify found no changes in insn with uid = 149.
verify found no changes in insn with uid = 160.
verify found no changes in insn with uid = 165.
verify found no changes in insn with uid = 171.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 35 n_edges 46 count 38 (  1.1)
df_worklist_dataflow_doublequeue:n_basic_blocks 35 n_edges 46 count 38 (  1.1)


virtual void leveldb_filterpolicy_t::CreateFilter(const leveldb::Slice*, int, std::__cxx11::string*) const

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={27d,18u} r1={20d,7u,2e} r2={17d,4u} r3={4d,8u,1e} r4={16d,3u} r5={25d,12u} r6={2d,7u} r7={1d,53u} r8={13d} r9={13d} r10={13d} r11={13d} r12={13d} r13={13d} r14={13d} r15={13d} r16={2u} r17={32d,12u} r18={13d} r19={13d} r21={14d} r22={14d} r23={14d} r24={14d} r25={14d} r26={14d} r27={14d} r28={14d} r29={13d} r30={13d} r31={13d} r32={13d} r33={13d} r34={13d} r35={13d} r36={13d} r37={15d,1u} r38={14d} r39={13d} r40={13d} r41={3d,9u} r42={1d,4u} r43={1d,2u,1e} r44={1d,2u,1e} r45={13d} r46={13d} r47={13d} r48={13d} r49={13d} r50={13d} r51={13d} r52={13d} r53={13d} r54={13d} r55={13d} r56={13d} r57={13d} r58={13d} r59={13d} r60={13d} r61={13d} r62={13d} r63={13d} r64={13d} r65={13d} r66={13d} r67={13d} r68={13d} r69={13d} r70={13d} r71={13d} r72={13d} r73={13d} r74={13d} r75={13d} r76={13d} r77={13d} r78={13d} r79={13d} r80={13d} 
;;    total ref usage 1168{1019d,144u,5e} in 90{77 regular + 13 call} insns.
(note 23 0 36 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 16 [argp]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 17 [flags] 42 [r13] 43 [r14] 44 [r15]
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 17 [flags] 42 [r13] 43 [r14] 44 [r15]
;; live  kill	 17 [flags]
(note 36 23 24 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 24 36 25 2 (set (reg/f:DI 43 r14 [orig:128 this ] [128])
        (reg:DI 5 di [ this ])) db/c.cc:108 89 {*movdi_internal}
     (nil))
(insn 25 24 26 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [46 %sfp+-24 S8 A64])
        (reg:DI 4 si [ keys ])) db/c.cc:108 89 {*movdi_internal}
     (nil))
(insn 26 25 27 2 (set (reg/v:SI 42 r13 [orig:130 n ] [130])
        (reg:SI 1 dx [ n ])) db/c.cc:108 90 {*movsi_internal}
     (nil))
(insn 27 26 28 2 (set (reg/v/f:DI 44 r15 [orig:131 dst ] [131])
        (reg:DI 2 cx [ dst ])) db/c.cc:108 89 {*movdi_internal}
     (nil))
(note 28 27 30 2 NOTE_INSN_FUNCTION_BEG)
(insn 30 28 38 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                        (const_int 24 [0x18])) [3 D.37019+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [148])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) db/c.cc:108 986 {stack_tls_protect_set_di}
     (nil))
(insn 38 30 39 2 (set (reg/v:DI 3 bx [orig:109 __n ] [109])
        (sign_extend:DI (reg/v:SI 42 r13 [orig:130 n ] [130]))) db/c.cc:109 142 {*extendsidi2_rex64}
     (nil))
(insn 39 38 40 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 3 bx [orig:109 __n ] [109])
            (const_int 0 [0]))) /usr/include/c++/5/bits/stl_vector.h:170 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 40 39 41 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 176)
            (pc))) /usr/include/c++/5/bits/stl_vector.h:170 612 {*jcc_1}
     (int_list:REG_BR_PROB 1000 (nil))
 -> 176)
;;  succ:       3 [90.0%]  (FALLTHRU)
;;              9 [10.0%] 
;; lr  out 	 3 [bx] 7 [sp] 16 [argp] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 7 [sp] 42 [r13] 43 [r14] 44 [r15]

;; basic block 3, loop depth 0, count 0, freq 810, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [90.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 16 [argp] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 3 [bx] 7 [sp] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(note 41 40 42 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 42 41 43 3 (set (reg:DI 0 ax [133])
        (const_int 2305843009213693951 [0x1fffffffffffffff])) /usr/include/c++/5/ext/new_allocator.h:101 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int 2305843009213693951 [0x1fffffffffffffff])
        (nil)))
(insn 43 42 44 3 (set (reg:CC 17 flags)
        (compare:CC (reg/v:DI 3 bx [orig:109 __n ] [109])
            (reg:DI 0 ax [133]))) /usr/include/c++/5/ext/new_allocator.h:101 8 {*cmpdi_1}
     (expr_list:REG_EQUAL (compare:CC (reg/v:DI 3 bx [orig:109 __n ] [109])
            (const_int 2305843009213693951 [0x1fffffffffffffff]))
        (nil)))
(jump_insn 44 43 45 3 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) /usr/include/c++/5/ext/new_allocator.h:101 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 48)
;;  succ:       4 [0.0%]  (FALLTHRU)
;;              5 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp] 16 [argp] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 7 [sp] 42 [r13] 43 [r14] 44 [r15]

;; basic block 4, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [0.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 45 44 46 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn 46 45 47 4 (call (mem:QI (symbol_ref:DI ("_ZSt17__throw_bad_allocv") [flags 0x41]  <function_decl 0x7fb5388d8438 __throw_bad_alloc>) [0 __throw_bad_alloc S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/ext/new_allocator.h:102 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZSt17__throw_bad_allocv") [flags 0x41]  <function_decl 0x7fb5388d8438 __throw_bad_alloc>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 47 46 48)
;; basic block 5, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 16 [argp] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 6 [bp] 41 [r12]
;; live  kill	 17 [flags]
(code_label 48 47 49 5 46 "" [1 uses])
(note 49 48 50 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 50 49 51 5 (parallel [
            (set (reg:DI 41 r12 [orig:110 D.37015 ] [110])
                (ashift:DI (reg/v:DI 3 bx [orig:109 __n ] [109])
                    (const_int 3 [0x3])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/ext/new_allocator.h:104 512 {*ashldi3_1}
     (nil))
(insn 51 50 52 5 (set (reg:DI 5 di)
        (reg:DI 41 r12 [orig:110 D.37015 ] [110])) /usr/include/c++/5/ext/new_allocator.h:104 89 {*movdi_internal}
     (nil))
(call_insn 52 51 53 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>) [0 operator new S1 A8])
            (const_int 0 [0]))) /usr/include/c++/5/ext/new_allocator.h:104 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 53 52 31 5 (set (reg/f:DI 6 bp [orig:123 key_pointers$_M_impl$_M_start ] [123])
        (reg:DI 0 ax)) /usr/include/c++/5/ext/new_allocator.h:104 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 134)
        (nil)))
(insn 31 53 58 5 (set (reg:DI 0 ax [orig:127 ivtmp.359 ] [127])
        (const_int 0 [0])) /usr/include/c++/5/ext/new_allocator.h:104 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
;;  succ:       6 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 6, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       5 [100.0%]  (FALLTHRU)
;;              6 [91.0%]  (DFS_BACK)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
(code_label 58 31 55 6 47 "" [1 uses])
(note 55 58 56 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 56 55 57 6 (set (mem/f:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:127 ivtmp.359 ] [127])
                    (const_int 8 [0x8]))
                (reg/f:DI 6 bp [orig:123 key_pointers$_M_impl$_M_start ] [123])) [3 MEM[base: key_pointers$_M_impl$_M_start_78, index: ivtmp.359_107, step: 8, offset: 0B]+0 S8 A64])
        (const_int 0 [0])) /usr/include/c++/5/bits/stl_algobase.h:770 89 {*movdi_internal}
     (nil))
(insn 57 56 59 6 (parallel [
            (set (reg:DI 0 ax [orig:127 ivtmp.359 ] [127])
                (plus:DI (reg:DI 0 ax [orig:127 ivtmp.359 ] [127])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 59 57 60 6 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 3 bx [orig:109 __n ] [109])
            (reg:DI 0 ax [orig:127 ivtmp.359 ] [127]))) /usr/include/c++/5/bits/stl_algobase.h:768 8 {*cmpdi_1}
     (nil))
(jump_insn 60 59 61 6 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 58)
            (pc))) /usr/include/c++/5/bits/stl_algobase.h:768 612 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 58)
;;  succ:       7 [9.0%]  (FALLTHRU,LOOP_EXIT)
;;              6 [91.0%]  (DFS_BACK)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 7, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       6 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(note 61 60 62 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 62 61 63 7 (set (reg:DI 5 di)
        (reg:DI 41 r12 [orig:110 D.37015 ] [110])) /usr/include/c++/5/ext/new_allocator.h:104 89 {*movdi_internal}
     (nil))
(call_insn 63 62 179 7 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>) [0 operator new S1 A8])
            (const_int 0 [0]))) /usr/include/c++/5/ext/new_allocator.h:104 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 7 [0x7])
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       29 (ABNORMAL,ABNORMAL_CALL,EH)
;;              8 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14] 44 [r15]

;; basic block 8, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       7 [100.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 41 [r12]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 41 [r12]
;; live  kill	
(note 179 63 64 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 64 179 34 8 (set (reg/v/f:DI 41 r12 [orig:124 __first ] [124])
        (reg:DI 0 ax)) /usr/include/c++/5/ext/new_allocator.h:104 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 135)
        (nil)))
(insn 34 64 221 8 (set (reg:DI 0 ax [orig:111 ivtmp.351 ] [111])
        (const_int 0 [0])) /usr/include/c++/5/ext/new_allocator.h:104 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(jump_insn 221 34 222 8 (set (pc)
        (label_ref 82)) 654 {jump}
     (nil)
 -> 82)
;;  succ:       13 [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 222 221 176)
;; basic block 9, loop depth 0, count 0, freq 90, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       2 [10.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 16 [argp] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 6 [bp] 41 [r12]
;; live  in  	 7 [sp] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 6 [bp] 41 [r12]
;; live  kill	
(code_label 176 222 175 9 59 "" [1 uses])
(note 175 176 32 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 32 175 33 9 (set (reg/v/f:DI 41 r12 [orig:124 __first ] [124])
        (const_int 0 [0])) /usr/include/c++/5/bits/stl_vector.h:170 89 {*movdi_internal}
     (nil))
(insn 33 32 68 9 (set (reg/f:DI 6 bp [orig:123 key_pointers$_M_impl$_M_start ] [123])
        (const_int 0 [0])) /usr/include/c++/5/bits/stl_vector.h:170 89 {*movdi_internal}
     (nil))
;;  succ:       10 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 10, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       14
;;              9 [100.0%]  (FALLTHRU)
;;              17 [100.0%]  (LOOP_EXIT)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 37 [r8]
;; live  kill	
(code_label 68 33 69 10 45 "" [2 uses])
(note 69 68 70 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(note 70 69 71 10 NOTE_INSN_DELETED)
(insn 71 70 72 10 (set (reg/f:DI 5 di [orig:137 this_21(D)->state_ ] [137])
        (mem/f:DI (plus:DI (reg/f:DI 43 r14 [orig:128 this ] [128])
                (const_int 8 [0x8])) [3 this_21(D)->state_+0 S8 A64])) db/c.cc:116 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (plus:DI (reg/f:DI 43 r14 [orig:128 this ] [128])
                (const_int 8 [0x8])) [3 this_21(D)->state_+0 S8 A64])
        (nil)))
(note 72 71 73 10 NOTE_INSN_DELETED)
(insn 73 72 74 10 (set (reg:DI 37 r8)
        (plus:DI (reg/f:DI 7 sp)
            (const_int 16 [0x10]))) db/c.cc:116 214 {*leadi}
     (nil))
(insn 74 73 75 10 (set (reg:SI 2 cx)
        (reg/v:SI 42 r13 [orig:130 n ] [130])) db/c.cc:116 90 {*movsi_internal}
     (nil))
(insn 75 74 76 10 (set (reg:DI 1 dx)
        (reg/v/f:DI 41 r12 [orig:124 __first ] [124])) db/c.cc:116 89 {*movdi_internal}
     (nil))
(insn 76 75 78 10 (set (reg:DI 4 si)
        (reg/f:DI 6 bp [orig:123 key_pointers$_M_impl$_M_start ] [123])) db/c.cc:116 89 {*movdi_internal}
     (nil))
(call_insn 78 76 180 10 (set (reg:DI 0 ax)
        (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 43 r14 [orig:128 this ] [128])
                        (const_int 32 [0x20])) [3 this_21(D)->create_+0 S8 A64]) [0 *_22 S1 A8])
            (const_int 0 [0]))) db/c.cc:116 669 {*call_value}
     (expr_list:REG_CALL_DECL (nil)
        (expr_list:REG_EH_REGION (const_int 5 [0x5])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:SI (use (reg:SI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
;;  succ:       24 (ABNORMAL,ABNORMAL_CALL,EH)
;;              11 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 44 [r15]
;; live  out 	 0 [ax] 6 [bp] 7 [sp] 41 [r12] 44 [r15]

;; basic block 11, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 [100.0%]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 17 [flags]
;; live  in  	 0 [ax] 6 [bp] 7 [sp] 41 [r12] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 17 [flags]
;; live  kill	 17 [flags]
(note 180 78 79 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 79 180 109 11 (set (reg/v/f:DI 3 bx [orig:114 filter ] [114])
        (reg:DI 0 ax)) db/c.cc:116 89 {*movdi_internal}
     (nil))
(insn 109 79 110 11 (set (reg:DI 1 dx [orig:115 D.37015 ] [115])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [9 len+0 S8 A64])) db/c.cc:117 89 {*movdi_internal}
     (nil))
(insn 110 109 111 11 (set (reg:DI 0 ax [142])
        (const_int 9223372036854775807 [0x7fffffffffffffff])) /usr/include/c++/5/bits/basic_string.h:270 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int 9223372036854775807 [0x7fffffffffffffff])
        (nil)))
(insn 111 110 112 11 (parallel [
            (set (reg:DI 0 ax [orig:141 D.37015 ] [141])
                (minus:DI (reg:DI 0 ax [142])
                    (mem:DI (plus:DI (reg/v/f:DI 44 r15 [orig:131 dst ] [131])
                            (const_int 8 [0x8])) [9 MEM[(long unsigned int *)dst_28(D) + 8B]+0 S8 A64])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:270 261 {*subdi_1}
     (expr_list:REG_EQUAL (minus:DI (const_int 9223372036854775807 [0x7fffffffffffffff])
            (mem:DI (plus:DI (reg/v/f:DI 44 r15 [orig:131 dst ] [131])
                    (const_int 8 [0x8])) [9 MEM[(long unsigned int *)dst_28(D) + 8B]+0 S8 A64]))
        (nil)))
(insn 112 111 113 11 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 1 dx [orig:115 D.37015 ] [115])
            (reg:DI 0 ax [orig:141 D.37015 ] [141]))) /usr/include/c++/5/bits/basic_string.h:270 8 {*cmpdi_1}
     (nil))
(jump_insn 113 112 223 11 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 118)
            (pc))) /usr/include/c++/5/bits/basic_string.h:270 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 118)
;;  succ:       12 [0.0%]  (FALLTHRU)
;;              19 [100.0%] 
;; lr  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 44 [r15]
;; live  out 	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 44 [r15]

;; basic block 12, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 11, next block 13, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       11 [0.0%]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 41 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	
;; live  kill	
(note 223 113 225 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(jump_insn 225 223 226 12 (set (pc)
        (label_ref 224)) 654 {jump}
     (nil)
 -> 224)
;;  succ:       18 [100.0%] 
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 41 [r12]
;; live  out 	 6 [bp] 7 [sp] 41 [r12]

(barrier 226 225 82)
;; basic block 13, loop depth 0, count 0, freq 9097, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       13 [91.0%]  (DFS_BACK)
;;              8 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 3 [bx] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 17 [flags]
(code_label 82 226 83 13 48 "" [2 uses])
(note 83 82 84 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 84 83 85 13 (set (mem:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:111 ivtmp.351 ] [111])
                    (const_int 8 [0x8]))
                (reg/v/f:DI 41 r12 [orig:124 __first ] [124])) [9 MEM[base: __first_81, index: ivtmp.351_100, step: 8, offset: 0B]+0 S8 A64])
        (const_int 0 [0])) /usr/include/c++/5/bits/stl_algobase.h:770 89 {*movdi_internal}
     (nil))
(insn 85 84 86 13 (parallel [
            (set (reg:DI 0 ax [orig:111 ivtmp.351 ] [111])
                (plus:DI (reg:DI 0 ax [orig:111 ivtmp.351 ] [111])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 86 85 87 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v:DI 3 bx [orig:109 __n ] [109])
            (reg:DI 0 ax [orig:111 ivtmp.351 ] [111]))) /usr/include/c++/5/bits/stl_algobase.h:768 8 {*cmpdi_1}
     (nil))
(jump_insn 87 86 88 13 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 82)
            (pc))) /usr/include/c++/5/bits/stl_algobase.h:768 612 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 82)
;;  succ:       14 [9.0%]  (FALLTHRU,LOOP_EXIT)
;;              13 [91.0%]  (DFS_BACK)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 14, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       13 [9.0%]  (FALLTHRU,LOOP_EXIT)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 42 [r13]
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(note 88 87 89 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 14 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 42 r13 [orig:130 n ] [130])
            (const_int 0 [0]))) db/c.cc:111 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 90 89 91 14 (set (pc)
        (if_then_else (le (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref 68)
            (pc))) db/c.cc:111 612 {*jcc_1}
     (int_list:REG_BR_PROB 0 (nil))
 -> 68)
;;  succ:       10
;;              15 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 15, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       14 [100.0%]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx]
;; live  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx]
;; live  kill	
(note 91 90 92 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 92 91 35 15 (set (reg:DI 1 dx [orig:120 ivtmp.343 ] [120])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [46 %sfp+-24 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 35 92 103 15 (set (reg:DI 0 ax [orig:121 ivtmp.341 ] [121])
        (const_int 0 [0])) db/c.cc:111 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
;;  succ:       16 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 16, loop depth 0, count 0, freq 9097, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       15 [100.0%]  (FALLTHRU)
;;              16 [91.0%]  (DFS_BACK)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 17 [flags]
;; live  kill	 17 [flags]
(code_label 103 35 93 16 50 "" [1 uses])
(note 93 103 95 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(insn 95 93 96 16 (set (reg/f:DI 2 cx [orig:139 MEM[base: _50, offset: 0B] ] [139])
        (mem/f:DI (reg:DI 1 dx [orig:120 ivtmp.343 ] [120]) [3 MEM[base: _50, offset: 0B]+0 S8 A64])) db/c.cc:112 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg:DI 1 dx [orig:120 ivtmp.343 ] [120]) [3 MEM[base: _50, offset: 0B]+0 S8 A64])
        (nil)))
(insn 96 95 97 16 (set (mem/f:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:121 ivtmp.341 ] [121])
                    (const_int 8 [0x8]))
                (reg/f:DI 6 bp [orig:123 key_pointers$_M_impl$_M_start ] [123])) [3 MEM[base: key_pointers$_M_impl$_M_start_78, index: ivtmp.341_102, step: 8, offset: 0]+0 S8 A64])
        (reg/f:DI 2 cx [orig:139 MEM[base: _50, offset: 0B] ] [139])) db/c.cc:112 89 {*movdi_internal}
     (nil))
(insn 97 96 98 16 (set (reg:DI 2 cx [orig:140 MEM[base: _50, offset: 8B] ] [140])
        (mem:DI (plus:DI (reg:DI 1 dx [orig:120 ivtmp.343 ] [120])
                (const_int 8 [0x8])) [9 MEM[base: _50, offset: 8B]+0 S8 A64])) db/c.cc:113 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (reg:DI 1 dx [orig:120 ivtmp.343 ] [120])
                (const_int 8 [0x8])) [9 MEM[base: _50, offset: 8B]+0 S8 A64])
        (nil)))
(insn 98 97 99 16 (set (mem:DI (plus:DI (mult:DI (reg:DI 0 ax [orig:121 ivtmp.341 ] [121])
                    (const_int 8 [0x8]))
                (reg/v/f:DI 41 r12 [orig:124 __first ] [124])) [9 MEM[base: __first_81, index: ivtmp.341_102, step: 8, offset: 0]+0 S8 A64])
        (reg:DI 2 cx [orig:140 MEM[base: _50, offset: 8B] ] [140])) db/c.cc:113 89 {*movdi_internal}
     (nil))
(insn 99 98 100 16 (parallel [
            (set (reg:DI 0 ax [orig:121 ivtmp.341 ] [121])
                (plus:DI (reg:DI 0 ax [orig:121 ivtmp.341 ] [121])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 100 99 101 16 (parallel [
            (set (reg:DI 1 dx [orig:120 ivtmp.343 ] [120])
                (plus:DI (reg:DI 1 dx [orig:120 ivtmp.343 ] [120])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 101 100 102 16 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 42 r13 [orig:130 n ] [130])
            (reg:SI 0 ax [orig:121 ivtmp.341 ] [121]))) db/c.cc:111 7 {*cmpsi_1}
     (nil))
(jump_insn 102 101 227 16 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 103)
            (pc))) db/c.cc:111 612 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 103)
;;  succ:       17 [9.0%]  (FALLTHRU)
;;              16 [91.0%]  (DFS_BACK)
;; lr  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 1 [dx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 17, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 16, next block 18, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       16 [9.0%]  (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(note 227 102 228 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(jump_insn 228 227 229 17 (set (pc)
        (label_ref 68)) 654 {jump}
     (nil)
 -> 68)
;;  succ:       10 [100.0%]  (LOOP_EXIT)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 229 228 224)
;; basic block 18, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 17, next block 19, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       12 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 41 [r12]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 224 229 114 18 77 "" [1 uses])
(note 114 224 115 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 115 114 116 18 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC20") [flags 0x2]  <var_decl 0x7fb536e1f1b0 *.LC20>)) /usr/include/c++/5/bits/basic_string.h:271 89 {*movdi_internal}
     (nil))
(call_insn 116 115 117 18 (call (mem:QI (symbol_ref:DI ("_ZSt20__throw_length_errorPKc") [flags 0x41]  <function_decl 0x7fb5388d8948 __throw_length_error>) [0 __throw_length_error S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/bits/basic_string.h:271 660 {*call}
     (expr_list:REG_EH_REGION (const_int 5 [0x5])
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZSt20__throw_length_errorPKc") [flags 0x41]  <function_decl 0x7fb5388d8948 __throw_length_error>)
            (expr_list:REG_ARGS_SIZE (const_int 0 [0])
                (expr_list:REG_NORETURN (const_int 0 [0])
                    (nil)))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       24 [100.0%]  (ABNORMAL,ABNORMAL_CALL,EH)
;; lr  out 	 6 [bp] 7 [sp] 16 [argp] 41 [r12]
;; live  out 	 6 [bp] 7 [sp] 41 [r12]

(barrier 117 116 118)
;; basic block 19, loop depth 0, count 0, freq 899, maybe hot
;;  prev block 18, next block 20, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       11 [100.0%] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 44 [r15]
;; lr  use 	 1 [dx] 3 [bx] 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 44 [r15]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	
(code_label 118 117 119 19 51 "" [1 uses])
(note 119 118 121 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 121 119 122 19 (set (reg:DI 4 si)
        (reg/v/f:DI 3 bx [orig:114 filter ] [114])) /usr/include/c++/5/bits/basic_string.h:1015 89 {*movdi_internal}
     (nil))
(insn 122 121 123 19 (set (reg:DI 5 di)
        (reg/v/f:DI 44 r15 [orig:131 dst ] [131])) /usr/include/c++/5/bits/basic_string.h:1015 89 {*movdi_internal}
     (nil))
(call_insn 123 122 124 19 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm") [flags 0x41]  <function_decl 0x7fb537cf7bd0 _M_append>) [0 _M_append S1 A8])
            (const_int 0 [0]))) /usr/include/c++/5/bits/basic_string.h:1015 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 5 [0x5])
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcm") [flags 0x41]  <function_decl 0x7fb537cf7bd0 _M_append>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       20 [100.0%]  (FALLTHRU)
;;              24 (ABNORMAL,ABNORMAL_CALL,EH)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

;; basic block 20, loop depth 0, count 0, freq 899, maybe hot
;;  prev block 19, next block 21, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       19 [100.0%]  (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(note 124 123 125 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(insn 125 124 126 20 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:114 filter ] [114])) db/c.cc:118 89 {*movdi_internal}
     (nil))
(call_insn 126 125 127 20 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fb538d19ca8 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) db/c.cc:118 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fb538d19ca8 free>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 127 126 128 20 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 41 r12 [orig:124 __first ] [124])
            (const_int 0 [0]))) /usr/include/c++/5/bits/stl_vector.h:177 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 128 127 129 20 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 132)
            (pc))) /usr/include/c++/5/bits/stl_vector.h:177 612 {*jcc_1}
     (int_list:REG_BR_PROB 3017 (nil))
 -> 132)
;;  succ:       21 [69.8%]  (FALLTHRU)
;;              22 [30.2%] 
;; lr  out 	 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 6 [bp] 7 [sp] 41 [r12]

;; basic block 21, loop depth 0, count 0, freq 628, maybe hot
;;  prev block 20, next block 22, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       20 [69.8%]  (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 5 [di]
;; live  kill	
(note 129 128 130 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 130 129 131 21 (set (reg:DI 5 di)
        (reg/v/f:DI 41 r12 [orig:124 __first ] [124])) /usr/include/c++/5/ext/new_allocator.h:110 89 {*movdi_internal}
     (nil))
(call_insn 131 130 132 21 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/ext/new_allocator.h:110 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       22 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

;; basic block 22, loop depth 0, count 0, freq 899, maybe hot
;;  prev block 21, next block 23, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       20 [30.2%] 
;;              21 [100.0%]  (FALLTHRU)
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 132 131 133 22 52 "" [1 uses])
(note 133 132 134 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 134 133 135 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 6 bp [orig:123 key_pointers$_M_impl$_M_start ] [123])
            (const_int 0 [0]))) /usr/include/c++/5/bits/stl_vector.h:177 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 135 134 136 22 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 167)
            (pc))) /usr/include/c++/5/bits/stl_vector.h:177 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 167)
;;  succ:       23 [78.3%]  (FALLTHRU)
;;              32 [21.6%] 
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

;; basic block 23, loop depth 0, count 0, freq 705, maybe hot
;;  prev block 22, next block 24, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       22 [78.3%]  (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(note 136 135 137 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 137 136 138 23 (set (reg:DI 5 di)
        (reg/f:DI 6 bp [orig:123 key_pointers$_M_impl$_M_start ] [123])) /usr/include/c++/5/ext/new_allocator.h:110 89 {*movdi_internal}
     (nil))
(call_insn 138 137 230 23 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/ext/new_allocator.h:110 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 230 138 231 23 (set (pc)
        (label_ref 167)) db/c.cc:119 654 {jump}
     (nil)
 -> 167)
;;  succ:       32 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 231 230 183)
;; basic block 24, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 23, next block 25, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       10 (ABNORMAL,ABNORMAL_CALL,EH)
;;              18 [100.0%]  (ABNORMAL,ABNORMAL_CALL,EH)
;;              19 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 24 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 24 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp] 41 [r12]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx]
;; live  in  	 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx]
;; live  kill	
(code_label/s 183 231 186 24 61 "" [1 uses])
(note 186 183 184 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 184 186 143 24 (set (reg:DI 3 bx [144])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (nil))
;;  succ:       25 [100.0%]  (FALLTHRU,PRESERVE)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

;; basic block 25, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 24, next block 26, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       24 [100.0%]  (FALLTHRU,PRESERVE)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 7 [sp] 41 [r12]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 143 184 144 25 54 "" [0 uses])
(note 144 143 145 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 145 144 146 25 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 41 r12 [orig:124 __first ] [124])
            (const_int 0 [0]))) /usr/include/c++/5/bits/stl_vector.h:177 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 146 145 147 25 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 150)
            (pc))) /usr/include/c++/5/bits/stl_vector.h:177 612 {*jcc_1}
     (int_list:REG_BR_PROB 3017 (nil))
 -> 150)
;;  succ:       26 [69.8%]  (FALLTHRU)
;;              27 [30.2%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

;; basic block 26, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 25, next block 27, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       25 [69.8%]  (FALLTHRU)
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 5 [di]
;; live  kill	
(note 147 146 148 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 148 147 149 26 (set (reg:DI 5 di)
        (reg/v/f:DI 41 r12 [orig:124 __first ] [124])) /usr/include/c++/5/ext/new_allocator.h:110 89 {*movdi_internal}
     (nil))
(call_insn 149 148 150 26 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/ext/new_allocator.h:110 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       27 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 27, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 26, next block 28, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       25 [30.2%] 
;;              26 [100.0%]  (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 150 149 151 27 55 "" [1 uses])
(note 151 150 154 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(insn 154 151 155 27 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 6 bp [orig:123 key_pointers$_M_impl$_M_start ] [123])
            (const_int 0 [0]))) /usr/include/c++/5/bits/stl_vector.h:177 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 155 154 232 27 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 157)
            (pc))) /usr/include/c++/5/bits/stl_vector.h:177 612 {*jcc_1}
     (int_list:REG_BR_PROB 6983 (nil))
 -> 157)
;;  succ:       30 [69.8%] 
;;              28 [30.2%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 28, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 27, next block 29, flags: (NEW, REACHABLE, RTL, MODIFIED)
;;  pred:       27 [30.2%]  (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	
;; live  kill	
(note 232 155 233 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(jump_insn 233 232 234 28 (set (pc)
        (label_ref 161)) 654 {jump}
     (nil)
 -> 161)
;;  succ:       31 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 234 233 187)
;; basic block 29, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 28, next block 30, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       7 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 29 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 29 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 6 [bp] 7 [sp] 16 [argp]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx]
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx]
;; live  kill	
(code_label/s 187 234 192 29 62 "" [1 uses])
(note 192 187 188 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 188 192 157 29 (set (reg:DI 3 bx [143])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (nil))
;;  succ:       30 [100.0%]  (FALLTHRU,PRESERVE)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 30, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 29, next block 31, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       29 [100.0%]  (FALLTHRU,PRESERVE)
;;              27 [69.8%] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 157 188 158 30 57 "" [1 uses])
(note 158 157 159 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(insn 159 158 160 30 (set (reg:DI 5 di)
        (reg/f:DI 6 bp [orig:123 key_pointers$_M_impl$_M_start ] [123])) /usr/include/c++/5/ext/new_allocator.h:110 89 {*movdi_internal}
     (nil))
(call_insn 160 159 161 30 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/ext/new_allocator.h:110 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       31 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 31, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 30, next block 32, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       30 [100.0%]  (FALLTHRU)
;;              28 [100.0%] 
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 161 160 162 31 56 "" [1 uses])
(note 162 161 164 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 164 162 165 31 (set (reg:DI 5 di)
        (reg:DI 3 bx [143])) 89 {*movdi_internal}
     (nil))
(call_insn 165 164 166 31 (call (mem:QI (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>) [0 __builtin_unwind_resume S1 A8])
        (const_int 0 [0])) 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 166 165 167)
;; basic block 32, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 31, next block 33, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       22 [21.6%] 
;;              23 [100.0%] 
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	 0 [ax]
(code_label 167 166 174 32 44 "" [2 uses])
(note 174 167 169 32 [bb 32] NOTE_INSN_BASIC_BLOCK)
(insn 169 174 170 32 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                                (const_int 24 [0x18])) [3 D.37019+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 0 ax [149]))
        ]) db/c.cc:119 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 170 169 181 32 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 173)
            (pc))) db/c.cc:119 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 173)
;;  succ:       34 [100.0%] 
;;              33 [0.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 33, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 32, next block 34, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       32 [0.0%]  (FALLTHRU)
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 181 170 171 33 [bb 33] NOTE_INSN_BASIC_BLOCK)
(call_insn 171 181 172 33 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) db/c.cc:119 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 172 171 173)
;; basic block 34, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 33, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       32 [100.0%] 
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 173 172 182 34 58 "" [1 uses])
(note 182 173 235 34 [bb 34] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 235 182 0 NOTE_INSN_DELETED)

;; Function virtual leveldb_filterpolicy_create_bloom(int)::Wrapper::~Wrapper() (_ZZ33leveldb_filterpolicy_create_bloomEN7WrapperD0Ev, funcdef_no=1513, decl_uid=31946, cgraph_uid=619, symbol_order=622)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =r  (1) Ts {*leadi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) =r  (1) Ts {*leadi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 4
   Insn 29: point = 0
   Insn 28: point = 0
   Insn 27: point = 1
   Insn 26: point = 1
   Insn 25: point = 1
   Insn 24: point = 1
   Insn 22: point = 2
   Insn 21: point = 3
   Insn 20: point = 4
   Insn 19: point = 6
  BB 3
   Insn 16: point = 8
   Insn 15: point = 9
   Insn 13: point = 10
  BB 2
   Insn 11: point = 12
   Insn 10: point = 12
   Insn 9: point = 12
   Insn 8: point = 13
   Insn 7: point = 14
   Insn 6: point = 16
   Insn 2: point = 17
Compressing live ranges: from 18 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 9
changing reg in insn 15
changing reg in insn 13
changing reg in insn 10
changing reg in insn 2
changing reg in insn 25
changing reg in insn 28
changing reg in insn 26
changing reg in insn 22
changing reg in insn 21
changing reg in insn 9
changing reg in insn 8
changing reg in insn 22
changing reg in insn 7
changing reg in insn 8
changing reg in insn 6
changing reg in insn 7
changing reg in insn 13
changing reg in insn 16
changing reg in insn 20
changing reg in insn 21
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 24
deleting insn with uid = 15.
deleting insn with uid = 24.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 16.
rescanning insn with uid = 25.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 29.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)


virtual leveldb_filterpolicy_create_bloom(int)::Wrapper::~Wrapper()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={10d,5u} r1={5d} r2={5d} r3={1d,7u,1e} r4={5d} r5={9d,7u} r7={1d,8u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={5d,1u} r18={4d} r19={4d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 344{315d,28u,1e} in 18{14 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 17 [flags]
;; live  kill	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/f:DI 3 bx [orig:93 this ] [93])
        (reg:DI 5 di [ this ])) db/c.cc:505 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 0 ax [95])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTVZ33leveldb_filterpolicy_create_bloomE7Wrapper")  <var_decl 0x7fb537404870 _ZTVZ33leveldb_filterpolicy_create_bloomE7Wrapper>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])) db/c.cc:505 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTVZ33leveldb_filterpolicy_create_bloomE7Wrapper")  <var_decl 0x7fb537404870 _ZTVZ33leveldb_filterpolicy_create_bloomE7Wrapper>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])
        (nil)))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [94])
        (plus:DI (reg:DI 0 ax [95])
            (const_int 16 [0x10]))) db/c.cc:505 214 {*leadi}
     (expr_list:REG_EQUIV (const:DI (plus:DI (symbol_ref/i:DI ("_ZTVZ33leveldb_filterpolicy_create_bloomE7Wrapper")  <var_decl 0x7fb537404870 _ZTVZ33leveldb_filterpolicy_create_bloomE7Wrapper>)
                (const_int 16 [0x10])))
        (nil)))
(insn 8 7 9 2 (set (mem/f:DI (reg/f:DI 3 bx [orig:93 this ] [93]) [3 this_2(D)->D.31955.D.28950._vptr.FilterPolicy+0 S8 A64])
        (reg/f:DI 0 ax [94])) db/c.cc:505 89 {*movdi_internal}
     (nil))
(insn 9 8 10 2 (set (reg/f:DI 5 di [orig:87 D.37025 ] [87])
        (mem/f:DI (plus:DI (reg/f:DI 3 bx [orig:93 this ] [93])
                (const_int 48 [0x30])) [3 this_2(D)->rep_+0 S8 A64])) db/c.cc:505 89 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:87 D.37025 ] [87])
            (const_int 0 [0]))) db/c.cc:505 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 11 10 12 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 17)
            (pc))) db/c.cc:505 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 17)
;;  succ:       3 [78.3%]  (FALLTHRU)
;;              4 [21.6%] 
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 7835, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [78.3%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 12 11 13 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 3 (set (reg/f:DI 0 ax [orig:96 MEM[(struct FilterPolicy *)_5]._vptr.FilterPolicy ] [96])
        (mem/f:DI (reg/f:DI 5 di [orig:87 D.37025 ] [87]) [3 MEM[(struct FilterPolicy *)_5]._vptr.FilterPolicy+0 S8 A64])) db/c.cc:505 89 {*movdi_internal}
     (nil))
(note 14 13 16 3 NOTE_INSN_DELETED)
(call_insn 16 14 17 3 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:96 MEM[(struct FilterPolicy *)_5]._vptr.FilterPolicy ] [96])
                    (const_int 8 [0x8])) [3 MEM[(int (*__vtbl_ptr_type) () *)_6 + 8B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_7;(struct FilterPolicy)_5->1) S1 A8])
        (const_int 0 [0])) db/c.cc:505 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (expr_list:REG_CALL_DECL (nil)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 3, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [21.6%] 
;;              3 [100.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(code_label 17 16 18 4 84 "" [1 uses])
(note 18 17 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 4 (set (reg:DI 0 ax [99])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTV22leveldb_filterpolicy_t")  <var_decl 0x7fb537682ab0 _ZTV22leveldb_filterpolicy_t>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])) db/c.cc:100 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTV22leveldb_filterpolicy_t")  <var_decl 0x7fb537682ab0 _ZTV22leveldb_filterpolicy_t>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])
        (nil)))
(insn 20 19 21 4 (set (reg/f:DI 0 ax [98])
        (plus:DI (reg:DI 0 ax [99])
            (const_int 16 [0x10]))) db/c.cc:100 214 {*leadi}
     (expr_list:REG_EQUIV (const:DI (plus:DI (symbol_ref/i:DI ("_ZTV22leveldb_filterpolicy_t")  <var_decl 0x7fb537682ab0 _ZTV22leveldb_filterpolicy_t>)
                (const_int 16 [0x10])))
        (nil)))
(insn 21 20 22 4 (set (mem/f:DI (reg/f:DI 3 bx [orig:93 this ] [93]) [3 MEM[(struct leveldb_filterpolicy_t *)this_2(D)].D.28950._vptr.FilterPolicy+0 S8 A64])
        (reg/f:DI 0 ax [98])) db/c.cc:100 89 {*movdi_internal}
     (nil))
(insn 22 21 23 4 (set (reg/f:DI 5 di [orig:100 MEM[(struct leveldb_filterpolicy_t *)this_2(D)].state_ ] [100])
        (mem/f:DI (plus:DI (reg/f:DI 3 bx [orig:93 this ] [93])
                (const_int 8 [0x8])) [3 MEM[(struct leveldb_filterpolicy_t *)this_2(D)].state_+0 S8 A64])) db/c.cc:101 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (plus:DI (reg/f:DI 3 bx [orig:93 this ] [93])
                (const_int 8 [0x8])) [3 MEM[(struct leveldb_filterpolicy_t *)this_2(D)].state_+0 S8 A64])
        (nil)))
(note 23 22 25 4 NOTE_INSN_DELETED)
(call_insn 25 23 26 4 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 3 bx [orig:93 this ] [93])
                    (const_int 16 [0x10])) [3 MEM[(struct leveldb_filterpolicy_t *)this_2(D)].destructor_+0 S8 A64]) [0 *_8 S1 A8])
        (const_int 0 [0])) db/c.cc:101 660 {*call}
     (expr_list:REG_CALL_DECL (nil)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 26 25 27 4 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:93 this ] [93])) db/c.cc:100 89 {*movdi_internal}
     (nil))
(call_insn 27 26 28 4 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb12FilterPolicyD2Ev") [flags 0x41]  <function_decl 0x7fb537663288 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) db/c.cc:100 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb12FilterPolicyD2Ev") [flags 0x41]  <function_decl 0x7fb537663288 __base_dtor >)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 28 27 29 4 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:93 this ] [93])) db/c.cc:505 89 {*movdi_internal}
     (nil))
(call_insn/j 29 28 30 4 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) db/c.cc:505 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 30 29 39)
(note 39 30 0 NOTE_INSN_DELETED)

;; Function leveldb_t* leveldb_open(const leveldb_options_t*, const char*, char**) (leveldb_open, funcdef_no=1431, decl_uid=2156, cgraph_uid=538, symbol_order=541)

      Creating newreg=143
Removing SCRATCH in insn #7 (nop 2)
rescanning insn with uid = 7.
      Creating newreg=144
Removing SCRATCH in insn #161 (nop 3)
rescanning insn with uid = 161.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=128, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-56, prev_offset=0)
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r143
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 16:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 17:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 27:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 28:  (0) rm  (1) re {*cmpdi_1}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 31:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 33:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 38:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 40:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) rm  (1) re {*cmpdi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 48:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 49:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =r  (1) Ts {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =r  (1) Ts {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =r  (1) Ts {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 69:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 76:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 77:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 103:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 108:  (0) rBwBz {*call}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 12:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 111:  (0) q {*cmpqi_ccno_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 114:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 115:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 119:  (0) m  (1) re {*movdi_internal}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r144
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 132:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 139:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 141:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 142:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 151:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 155:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 156:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 163:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 28
   Insn 151: point = 0
   Insn 150: point = 0
  BB 27
   Insn 146: point = 2
   Insn 145: point = 2
  BB 26
   Insn 143: point = 4
   Insn 142: point = 4
   Insn 141: point = 5
   Insn 139: point = 7
  BB 24
   Insn 220: point = 9
   Insn 135: point = 9
  BB 23
   Insn 132: point = 12
   Insn 131: point = 12
  BB 22
   Insn 129: point = 14
   Insn 128: point = 14
   Insn 127: point = 14
  BB 21
   Insn 184: point = 16
  BB 25
   Insn 178: point = 18
  BB 29
   Insn 156: point = 20
   Insn 155: point = 20
  BB 30
   Insn 163: point = 20
  BB 20
   Insn 218: point = 20
  BB 31
   Insn 166: point = 20
  BB 19
   Insn 162: point = 20
   Insn 161: point = 20
   Insn 159: point = 21
  BB 18
   Insn 13: point = 23
   Insn 119: point = 25
   Insn 118: point = 26
   Insn 116: point = 27
   Insn 115: point = 28
   Insn 114: point = 28
  BB 17
   Insn 112: point = 28
   Insn 111: point = 28
   Insn 12: point = 29
  BB 16
   Insn 108: point = 31
   Insn 107: point = 31
  BB 15
   Insn 105: point = 33
   Insn 104: point = 33
   Insn 103: point = 34
   Insn 101: point = 36
  BB 14
   Insn 98: point = 38
   Insn 97: point = 38
  BB 13
   Insn 95: point = 40
   Insn 94: point = 40
   Insn 93: point = 40
   Insn 91: point = 41
  BB 12
   Insn 90: point = 43
   Insn 89: point = 43
   Insn 88: point = 44
  BB 11
   Insn 85: point = 46
   Insn 84: point = 46
   Insn 83: point = 46
   Insn 82: point = 47
   Insn 81: point = 47
   Insn 78: point = 48
   Insn 77: point = 49
   Insn 76: point = 50
  BB 8
   Insn 214: point = 51
   Insn 197: point = 51
   Insn 58: point = 52
  BB 6
   Insn 212: point = 55
   Insn 196: point = 55
   Insn 11: point = 56
   Insn 49: point = 58
   Insn 48: point = 59
  BB 10
   Insn 73: point = 62
   Insn 72: point = 63
   Insn 69: point = 64
   Insn 68: point = 64
   Insn 67: point = 65
   Insn 66: point = 66
  BB 4
   Insn 210: point = 68
   Insn 40: point = 68
   Insn 39: point = 69
   Insn 38: point = 70
   Insn 37: point = 70
   Insn 36: point = 71
   Insn 35: point = 71
   Insn 34: point = 71
   Insn 33: point = 71
   Insn 31: point = 71
  BB 9
   Insn 198: point = 73
   Insn 9: point = 74
  BB 7
   Insn 55: point = 77
   Insn 54: point = 77
  BB 5
   Insn 46: point = 78
   Insn 45: point = 78
  BB 3
   Insn 29: point = 79
   Insn 28: point = 79
   Insn 27: point = 79
   Insn 26: point = 79
   Insn 24: point = 80
   Insn 23: point = 81
   Insn 22: point = 81
  BB 2
   Insn 20: point = 82
   Insn 19: point = 82
   Insn 18: point = 82
   Insn 17: point = 82
   Insn 16: point = 83
   Insn 7: point = 84
   Insn 4: point = 86
   Insn 3: point = 87
   Insn 2: point = 88
 r87: [28..29] [21..23]
 r89: [28..41]
 r90: [12..14]
 r91: [38..40]
 r94: [2..7]
 r95: [31..36]
 r96: [77..79] [49..63]
 r97: [62..62] [55..56] [49..52]
 r98: [73..74] [64..70]
 r104: [46..88]
 r105: [65..87] [60..61]
 r106: [43..86]
 r111: [75..82] [57..61] [53..54]
 r113: [66..80]
 r117: [68..69]
 r118: [58..59]
 r129: [33..34]
 r130: [24..27]
 r131: [25..26]
 r133: [18..18] [0..9]
 r134: [10..16]
 r138: [4..5]
 r140: [44..48]
 r141: [73..73] [62..71] [55..55] [47..51]
 r142: [35..83] [6..19]
 r143: [84..85]
 r144: [20..20]
Compressing live ranges: from 89 to 43 - 48%
Ranges after the compression:
 r87: [13..14] [9..10]
 r89: [13..20]
 r90: [4..5]
 r91: [19..20]
 r94: [0..3]
 r95: [15..18]
 r96: [39..40] [23..34]
 r97: [33..33] [27..28] [23..24]
 r98: [35..38]
 r104: [21..42]
 r105: [35..42] [31..32]
 r106: [21..42]
 r111: [39..40] [29..32] [25..26]
 r113: [35..40]
 r117: [35..36]
 r118: [29..30]
 r129: [15..16]
 r130: [11..12]
 r131: [11..12]
 r133: [6..6] [0..3]
 r134: [4..5]
 r138: [0..1]
 r140: [21..22]
 r141: [33..37] [27..27] [21..24]
 r142: [17..40] [2..7]
 r143: [41..42]
 r144: [8..8]

********** Inheritance #1: **********

EBB 2 3
EBB 4
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=145, assigning class NO_REGS to save r145
  210: pc=L61
    Add reg<-save before:
  224: r141:DI=r145:DI

   34: si:DI=r141:DI
      REG_EQUAL frame:DI-0x38
    Add save<-reg after:
  223: r145:DI=r141:DI

	  ))))))))))))))))))))))))))))))))))))))))))))))))
EBB 5
EBB 6
EBB 7 8
EBB 9
EBB 10
  ----------------------------------
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=146, assigning class NO_REGS to save r146
   73: r97:DI=[frame:DI+0x10]
      REG_DEAD frame:DI
    Add reg<-save after:
  226: r141:DI=r146:DI

   62: NOTE_INSN_BASIC_BLOCK 10
    Add save<-reg after:
  225: r146:DI=r141:DI

	  ))))))))))))))))))))))))))))))))))))))))))))))))
EBB 11 12 13 14
EBB 15 16
EBB 17 18
EBB 19
EBB 20
EBB 21
EBB 22 23
EBB 24
EBB 25
EBB 26 27
EBB 28
EBB 29
EBB 30
EBB 31

********** Pseudo live ranges #2: **********

  BB 28
   Insn 151: point = 0
   Insn 150: point = 0
  BB 27
   Insn 146: point = 2
   Insn 145: point = 2
  BB 26
   Insn 143: point = 4
   Insn 142: point = 4
   Insn 141: point = 5
   Insn 139: point = 7
  BB 24
   Insn 220: point = 9
   Insn 135: point = 9
  BB 23
   Insn 132: point = 12
   Insn 131: point = 12
  BB 22
   Insn 129: point = 14
   Insn 128: point = 14
   Insn 127: point = 14
  BB 21
   Insn 184: point = 16
  BB 25
   Insn 178: point = 18
  BB 29
   Insn 156: point = 20
   Insn 155: point = 20
  BB 30
   Insn 163: point = 20
  BB 20
   Insn 218: point = 20
  BB 31
   Insn 166: point = 20
  BB 19
   Insn 162: point = 20
   Insn 161: point = 20
   Insn 159: point = 21
  BB 18
   Insn 13: point = 23
   Insn 119: point = 25
   Insn 118: point = 26
   Insn 116: point = 27
   Insn 115: point = 28
   Insn 114: point = 28
  BB 17
   Insn 112: point = 28
   Insn 111: point = 28
   Insn 12: point = 29
  BB 16
   Insn 108: point = 31
   Insn 107: point = 31
  BB 15
   Insn 105: point = 33
   Insn 104: point = 33
   Insn 103: point = 34
   Insn 101: point = 36
  BB 14
   Insn 98: point = 38
   Insn 97: point = 38
  BB 13
   Insn 95: point = 40
   Insn 94: point = 40
   Insn 93: point = 40
   Insn 91: point = 41
  BB 12
   Insn 90: point = 43
   Insn 89: point = 43
   Insn 88: point = 44
  BB 11
   Insn 85: point = 46
   Insn 84: point = 46
   Insn 83: point = 46
   Insn 82: point = 47
   Insn 81: point = 47
   Insn 78: point = 48
   Insn 77: point = 49
   Insn 76: point = 50
  BB 8
   Insn 214: point = 51
   Insn 197: point = 51
   Insn 58: point = 52
  BB 6
   Insn 212: point = 55
   Insn 196: point = 55
   Insn 11: point = 56
   Insn 49: point = 58
   Insn 48: point = 59
  BB 10
   Insn 226: point = 62
	Hard reg 2 is preferable by r146 with profit 312
   Insn 73: point = 64
   Insn 72: point = 65
   Insn 69: point = 66
   Insn 68: point = 66
   Insn 67: point = 67
   Insn 66: point = 68
   Insn 225: point = 69
	Hard reg 2 is preferable by r146 with profit 624
  BB 4
   Insn 210: point = 72
   Insn 224: point = 72
	Hard reg 2 is preferable by r145 with profit 289
   Insn 40: point = 74
   Insn 39: point = 75
   Insn 38: point = 76
   Insn 37: point = 76
   Insn 36: point = 77
   Insn 35: point = 77
   Insn 223: point = 77
	Hard reg 2 is preferable by r145 with profit 578
   Insn 34: point = 79
   Insn 33: point = 79
   Insn 31: point = 79
  BB 9
   Insn 198: point = 81
   Insn 9: point = 82
  BB 7
   Insn 55: point = 85
   Insn 54: point = 85
  BB 5
   Insn 46: point = 86
   Insn 45: point = 86
  BB 3
   Insn 29: point = 87
   Insn 28: point = 87
   Insn 27: point = 87
   Insn 26: point = 87
   Insn 24: point = 88
   Insn 23: point = 89
   Insn 22: point = 89
  BB 2
   Insn 20: point = 90
   Insn 19: point = 90
   Insn 18: point = 90
   Insn 17: point = 90
   Insn 16: point = 91
   Insn 7: point = 92
   Insn 4: point = 94
   Insn 3: point = 95
   Insn 2: point = 96
 r87: [28..29] [21..23]
 r89: [28..41]
 r90: [12..14]
 r91: [38..40]
 r94: [2..7]
 r95: [31..36]
 r96: [85..87] [49..65]
 r97: [62..64] [55..56] [49..52]
 r98: [81..82] [66..76]
 r104: [46..96]
 r105: [67..95] [60..61]
 r106: [43..94]
 r111: [83..90] [57..61] [53..54]
 r113: [68..88]
 r117: [74..75]
 r118: [58..59]
 r129: [33..34]
 r130: [24..27]
 r131: [25..26]
 r133: [18..18] [0..9]
 r134: [10..16]
 r138: [4..5]
 r140: [44..48]
 r141: [81..81] [78..79] [70..72] [62..62] [55..55] [47..51]
 r142: [35..91] [6..19]
 r143: [92..93]
 r144: [20..20]
 r145: [73..77]
 r146: [63..69]
Compressing live ranges: from 97 to 50 - 51%
Ranges after the compression:
 r87: [13..14] [9..10]
 r89: [13..20]
 r90: [4..5]
 r91: [19..20]
 r94: [0..3]
 r95: [15..18]
 r96: [46..47] [23..35]
 r97: [33..35] [27..28] [23..24]
 r98: [44..45] [36..41]
 r104: [21..49]
 r105: [36..49] [31..32]
 r106: [21..49]
 r111: [46..47] [29..32] [25..26]
 r113: [36..47]
 r117: [40..41]
 r118: [29..30]
 r129: [15..16]
 r130: [11..12]
 r131: [11..12]
 r133: [6..6] [0..3]
 r134: [4..5]
 r138: [0..1]
 r140: [21..22]
 r141: [42..44] [38..39] [33..33] [27..27] [21..24]
 r142: [17..47] [2..7]
 r143: [48..49]
 r144: [8..8]
 r145: [40..41]
 r146: [34..37]

********** Assignment #1: **********

	 Assigning to 143 (cl=INDEX_REGS, orig=143, freq=1000, tfirst=143, tfreq=1000)...
	   Assign 0 to reload r143 (freq=1000)
	 Assigning to 144 (cl=INDEX_REGS, orig=144, freq=999, tfirst=144, tfreq=999)...
	   Assign 4 to reload r144 (freq=999)

********** Undoing inheritance #1: **********

	     Keep split r145 (orig=r141)
	     Keep split r146 (orig=r141)
Split 2 out of 2 (100.00%)

********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 225:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 226:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 223:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 224:  (0) r  (1) rem {*movdi_internal}

******** Rematerialization #1: ********

df_worklist_dataflow_doublequeue:n_basic_blocks 32 n_edges 40 count 32 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 32 n_edges 40 count 32 (    1)

Cands:

BB 2:
  register live in: 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 105 106 111 142
  changed regs: 104 105 106 111 142 143
  dead regs: 1 [dx] 4 [si] 5 [di] 17 [flags] 20 [frame]

BB 3:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 105 106 111 142
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 104 105 106 111 113 142
  changed regs: 0 [ax] 5 [di] 96 113
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 4:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 105 106 113 142
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 104 105 106 113 141 142
  changed regs: 0 [ax] 1 [dx] 4 [si] 5 [di] 98 117 141 145
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 117 141 145

BB 5:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 104 105 106 111 113 142
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 104 105 106 111 113 142
  changed regs:
  dead regs: 17 [flags]

BB 6:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 104 105 106 111 142
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 104 106 141 142
  changed regs: 97 118 141
  dead regs: 20 [frame] 105 111 118

BB 7:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 104 105 106 111 113 142
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 104 105 106 111 113 142
  changed regs:
  dead regs: 17 [flags]

BB 8:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 104 106 111 142
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 104 106 141 142
  changed regs: 97 141
  dead regs: 20 [frame] 111

BB 9:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 104 105 106 111 113 142
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 104 105 106 113 141 142
  changed regs: 98 141
  dead regs: 20 [frame] 111

BB 10:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 98 104 105 106 113 141 142
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 104 106 141 142
  changed regs: 0 [ax] 1 [dx] 4 [si] 5 [di] 96 97 141 146
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 98 105 113 141 146

BB 11:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 96 97 104 106 141 142
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 106 140 142
  changed regs: 1 [dx] 2 [cx] 4 [si] 5 [di] 140
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 96 97 104 141

BB 12:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 106 140 142
  register live out: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 142
  changed regs: 0 [ax] 4 [si] 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 106 140

BB 13:
  register live in: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 142
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 142
  changed regs: 89 91
  dead regs: 0 [ax] 17 [flags] 20 [frame]

BB 14:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 142
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 142
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91

BB 15:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 142
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 95
  changed regs: 95 129
  dead regs: 17 [flags] 20 [frame] 129 142

BB 16:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 95
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 95

BB 17:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
  changed regs: 87
  dead regs: 17 [flags] 89

BB 18:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
  changed regs: 0 [ax] 5 [di] 87 130 131
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 130 131

BB 19:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 87
  register live out: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs: 0 [ax] 17 [flags] 144
  dead regs: 17 [flags] 20 [frame] 87

BB 20:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs:

BB 21:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 142
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 134 142
  changed regs: 134
  dead regs: 0 [ax]

BB 22:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 134 142
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90 134 142
  changed regs: 90
  dead regs: 17 [flags] 20 [frame]

BB 23:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90 134 142
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 134 142
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 90

BB 24:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 134 142
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 133 142
  changed regs: 133
  dead regs: 134

BB 25:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 142
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 133 142
  changed regs: 133
  dead regs: 0 [ax]

BB 26:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 133 142
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94 133
  changed regs: 94 138
  dead regs: 17 [flags] 20 [frame] 138 142

BB 27:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94 133
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 133
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 94

BB 28:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 133
  register live out: 7 [sp] 16 [argp] 20 [frame]
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 133

BB 29:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  register live out: 7 [sp] 16 [argp] 20 [frame]
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 30:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  register live out: 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 31:
  register live in: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  register live out: 0 [ax] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs:
subreg regs:
  Slot 0 regnos (width = 8):	 146	 145
Changing spilled pseudos to memory in insn #223
Changing spilled pseudos to memory in insn #224
Changing spilled pseudos to memory in insn #225
Changing spilled pseudos to memory in insn #226
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=144, prev_offset=128)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=80, prev_offset=64)
Can eliminate 20 to 6 (offset=-56, prev_offset=0)

********** Local #3: **********

	   Spilling non-eliminable hard regs: 7
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 198:  (0) =r  (1) Ts {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 197:  (0) =r  (1) Ts {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 196:  (0) =r  (1) Ts {*leadi}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 161:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 139:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 127:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 101:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 93:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 78:  (0) =r  (1) Ts {*leadi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 76:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 49:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 40:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 38:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 31:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 27:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 16:  (0) r  (1) r  (2) le {*adddi_1}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 226:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 225:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 224:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 223:  (0) m  (1) re {*movdi_internal}
New elimination table:
Can eliminate 16 to 7 (offset=144, prev_offset=144)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=80, prev_offset=80)
Can eliminate 20 to 6 (offset=-56, prev_offset=0)
changing reg in insn 13
changing reg in insn 12
changing reg in insn 159
changing reg in insn 91
changing reg in insn 111
changing reg in insn 127
changing reg in insn 131
changing reg in insn 128
changing reg in insn 93
changing reg in insn 97
changing reg in insn 94
changing reg in insn 139
changing reg in insn 145
changing reg in insn 142
changing reg in insn 101
changing reg in insn 107
changing reg in insn 104
changing reg in insn 26
changing reg in insn 72
changing reg in insn 54
changing reg in insn 45
changing reg in insn 77
changing reg in insn 76
changing reg in insn 58
changing reg in insn 11
changing reg in insn 73
changing reg in insn 77
changing reg in insn 9
changing reg in insn 37
changing reg in insn 68
changing reg in insn 38
changing reg in insn 2
changing reg in insn 83
changing reg in insn 3
changing reg in insn 67
changing reg in insn 48
changing reg in insn 22
changing reg in insn 19
changing reg in insn 4
changing reg in insn 89
changing reg in insn 17
changing reg in insn 58
changing reg in insn 11
changing reg in insn 9
changing reg in insn 18
changing reg in insn 24
changing reg in insn 66
changing reg in insn 28
changing reg in insn 27
changing reg in insn 26
changing reg in insn 39
changing reg in insn 40
changing reg in insn 48
changing reg in insn 49
changing reg in insn 103
changing reg in insn 104
changing reg in insn 116
changing reg in insn 119
changing reg in insn 13
changing reg in insn 118
changing reg in insn 119
changing reg in insn 178
changing reg in insn 135
changing reg in insn 150
changing reg in insn 184
changing reg in insn 135
changing reg in insn 141
changing reg in insn 142
changing reg in insn 78
changing reg in insn 88
changing reg in insn 84
changing reg in insn 198
changing reg in insn 197
changing reg in insn 196
changing reg in insn 31
changing reg in insn 81
changing reg in insn 34
changing reg in insn 16
changing reg in insn 35
changing reg in insn 141
changing reg in insn 103
changing reg in insn 82
changing reg in insn 17
changing reg in insn 7
changing reg in insn 161
deleting insn with uid = 11.
deleting insn with uid = 58.
deleting insn with uid = 68.
deleting insn with uid = 81.
deleting insn with uid = 97.
deleting insn with uid = 107.
deleting insn with uid = 131.
deleting insn with uid = 135.
deleting insn with uid = 145.


try_optimize_cfg iteration 1

Forwarding edge 19->20 to 30 failed.
Merging block 22 into block 21...
changing bb of uid 127
  from 22 to 21
changing bb of uid 128
  from 22 to 21
changing bb of uid 129
  from 22 to 21
Merged blocks 21 and 22.
Merged 21 and 22 without moving.
Edge 21->24 redirected to 26
Merging block 24 into block 23...
changing bb of uid 220
  from 24 to 23
Merged blocks 23 and 24.
Merged 23 and 24 without moving.


try_optimize_cfg iteration 2

Forwarding edge 19->20 to 30 failed.


try_optimize_cfg iteration 1

Forwarding edge 19->20 to 30 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 85.
verify found no changes in insn with uid = 90.
verify found no changes in insn with uid = 98.
verify found no changes in insn with uid = 108.
verify found no changes in insn with uid = 115.
verify found no changes in insn with uid = 132.
verify found no changes in insn with uid = 146.
verify found no changes in insn with uid = 151.
verify found no changes in insn with uid = 156.
verify found no changes in insn with uid = 163.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 30 n_edges 38 count 30 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 30 n_edges 38 count 30 (    1)


leveldb_t* leveldb_open(const leveldb_options_t*, const char*, char**)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={24d,16u} r1={21d,6u} r2={20d,4u} r3={3d,7u} r4={19d,5u} r5={27d,18u} r6={6d,7u} r7={1d,68u} r8={13d} r9={13d} r10={13d} r11={13d} r12={13d} r13={13d} r14={13d} r15={13d} r16={2u} r17={29d,10u} r18={13d} r19={13d} r20={14e} r21={14d} r22={14d} r23={14d} r24={14d} r25={14d} r26={14d} r27={14d} r28={14d} r29={13d} r30={13d} r31={13d} r32={13d} r33={13d} r34={13d} r35={13d} r36={13d} r37={14d} r38={14d} r39={13d} r40={13d} r41={1d,1u} r42={1d,1u} r43={1d,4u} r44={1d,4u} r45={13d} r46={13d} r47={13d} r48={13d} r49={13d} r50={13d} r51={13d} r52={13d} r53={13d} r54={13d} r55={13d} r56={13d} r57={13d} r58={13d} r59={13d} r60={13d} r61={13d} r62={13d} r63={13d} r64={13d} r65={13d} r66={13d} r67={13d} r68={13d} r69={13d} r70={13d} r71={13d} r72={13d} r73={13d} r74={13d} r75={13d} r76={13d} r77={13d} r78={13d} r79={13d} r80={13d} 
;;    total ref usage 1189{1022d,153u,14e} in 98{85 regular + 13 call} insns.
(note 1 0 14 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 7 [sp] 16 [argp]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 6 [bp] 17 [flags] 41 [r12] 42 [r13] 44 [r15]
;; live  in  	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 6 [bp] 17 [flags] 41 [r12] 42 [r13] 44 [r15]
;; live  kill	 17 [flags]
(note 14 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 14 3 2 (set (reg/v/f:DI 42 r13 [orig:104 options ] [104])
        (reg:DI 5 di [ options ])) db/c.cc:155 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg/v/f:DI 44 r15 [orig:105 name ] [105])
        (reg:DI 4 si [ name ])) db/c.cc:155 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (reg/v/f:DI 41 r12 [orig:106 errptr ] [106])
        (reg:DI 1 dx [ errptr ])) db/c.cc:155 89 {*movdi_internal}
     (nil))
(note 5 4 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 5 16 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                        (const_int 72 [0x48])) [3 D.37054+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [143])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) db/c.cc:155 986 {stack_tls_protect_set_di}
     (nil))
(insn 16 7 17 2 (parallel [
            (set (reg/f:DI 3 bx [142])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:109 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(insn 17 16 18 2 (parallel [
            (set (reg/f:DI 6 bp [111])
                (plus:DI (reg/f:DI 3 bx [142])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:109 218 {*adddi_1}
     (nil))
(insn 18 17 19 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [3 MEM[(struct _Alloc_hider *)&D.31250]._M_p+0 S8 A128])
        (reg/f:DI 6 bp [111])) /usr/include/c++/5/bits/basic_string.h:109 89 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 44 r15 [orig:105 name ] [105])
            (const_int 0 [0]))) /usr/include/c++/5/bits/basic_string.h:456 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 20 19 21 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 153)
            (pc))) /usr/include/c++/5/bits/basic_string.h:456 612 {*jcc_1}
     (int_list:REG_BR_PROB 2163 (nil))
 -> 153)
;;  succ:       3 [78.4%]  (FALLTHRU)
;;              29 [21.6%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 3, loop depth 0, count 0, freq 9996, maybe hot
;; Invalid sum of incoming frequencies 7837, should be 9996
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [78.4%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 43 [r14] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 43 [r14]
;; live  kill	
(note 21 20 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 22 21 23 3 (set (reg:DI 5 di)
        (reg/v/f:DI 44 r15 [orig:105 name ] [105])) /usr/include/c++/5/bits/char_traits.h:267 89 {*movdi_internal}
     (nil))
(call_insn/i 23 22 24 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7fb538cf5870 __builtin_strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) /usr/include/c++/5/bits/char_traits.h:267 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7fb538cf5870 __builtin_strlen>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 24 23 26 3 (set (reg:DI 43 r14 [113])
        (reg:DI 0 ax)) /usr/include/c++/5/bits/char_traits.h:267 89 {*movdi_internal}
     (nil))
(insn 26 24 27 3 (set (reg:DI 0 ax [orig:96 D.37051 ] [96])
        (reg:DI 43 r14 [113])) /usr/include/c++/5/bits/char_traits.h:267 89 {*movdi_internal}
     (nil))
(insn 27 26 28 3 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [9 __dnew+0 S8 A64])
        (reg:DI 43 r14 [113])) /usr/include/c++/5/bits/basic_string.tcc:219 89 {*movdi_internal}
     (nil))
(insn 28 27 29 3 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 43 r14 [113])
            (const_int 15 [0xf]))) /usr/include/c++/5/bits/basic_string.tcc:221 8 {*cmpdi_1}
     (nil))
(jump_insn 29 28 30 3 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 43)
            (pc))) /usr/include/c++/5/bits/basic_string.tcc:221 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 43)
;;  succ:       4 [29.0%]  (FALLTHRU)
;;              5 [71.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 4, loop depth 0, count 0, freq 2899, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [29.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di]
;; live  kill	 17 [flags]
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 31 30 33 4 (parallel [
            (set (reg/f:DI 2 cx [141])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 24 [0x18])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.tcc:223 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -56 [0xffffffffffffffc8]))
        (nil)))
(insn 33 31 34 4 (set (reg:DI 1 dx)
        (const_int 0 [0])) /usr/include/c++/5/bits/basic_string.tcc:223 89 {*movdi_internal}
     (nil))
(insn 34 33 223 4 (set (reg:DI 4 si)
        (reg/f:DI 2 cx [141])) /usr/include/c++/5/bits/basic_string.tcc:223 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -56 [0xffffffffffffffc8]))
        (nil)))
(insn 223 34 35 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [46 %sfp+-72 S8 A64])
        (reg/f:DI 2 cx [141])) /usr/include/c++/5/bits/basic_string.tcc:223 89 {*movdi_internal}
     (nil))
(insn 35 223 36 4 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [142])) /usr/include/c++/5/bits/basic_string.tcc:223 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(call_insn 36 35 37 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm") [flags 0x41]  <function_decl 0x7fb537cba5e8 _M_create>) [0 _M_create S1 A8])
            (const_int 0 [0]))) /usr/include/c++/5/bits/basic_string.tcc:223 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm") [flags 0x41]  <function_decl 0x7fb537cba5e8 _M_create>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 37 36 38 4 (set (reg/f:DI 5 di [orig:98 D.37050 ] [98])
        (reg:DI 0 ax)) /usr/include/c++/5/bits/basic_string.tcc:223 89 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [3 MEM[(char * *)&D.31250]+0 S8 A128])
        (reg/f:DI 5 di [orig:98 D.37050 ] [98])) /usr/include/c++/5/bits/basic_string.h:127 89 {*movdi_internal}
     (nil))
(insn 39 38 40 4 (set (reg:DI 0 ax [orig:117 __dnew ] [117])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [9 __dnew+0 S8 A64])) /usr/include/c++/5/bits/basic_string.h:159 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [9 __dnew+0 S8 A64])
        (nil)))
(insn 40 39 224 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [9 MEM[(size_type *)&D.31250 + 16B]+0 S8 A128])
        (reg:DI 0 ax [orig:117 __dnew ] [117])) /usr/include/c++/5/bits/basic_string.h:159 89 {*movdi_internal}
     (nil))
(insn 224 40 210 4 (set (reg/f:DI 2 cx [141])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [46 %sfp+-72 S8 A64])) 89 {*movdi_internal}
     (nil))
(jump_insn 210 224 211 4 (set (pc)
        (label_ref 61)) 654 {jump}
     (nil)
 -> 61)
;;  succ:       10 [100.0%] 
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 211 210 43)
;; basic block 5, loop depth 0, count 0, freq 7097, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [71.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 43 211 44 5 91 "" [1 uses])
(note 44 43 45 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 45 44 46 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:96 D.37051 ] [96])
            (const_int 1 [0x1]))) /usr/include/c++/5/bits/basic_string.h:296 8 {*cmpdi_1}
     (nil))
(jump_insn 46 45 47 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 52)
            (pc))) /usr/include/c++/5/bits/basic_string.h:296 612 {*jcc_1}
     (int_list:REG_BR_PROB 7196 (nil))
 -> 52)
;;  succ:       6 [28.0%]  (FALLTHRU)
;;              7 [72.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 6, loop depth 0, count 0, freq 1990, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [28.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 7 [sp] 44 [r15]
;; lr  def 	 1 [dx] 2 [cx]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 1 [dx] 2 [cx]
;; live  kill	
(note 47 46 48 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 48 47 49 6 (set (reg:QI 1 dx [orig:118 MEM[(const char_type &)name_5(D)] ] [118])
        (mem:QI (reg/v/f:DI 44 r15 [orig:105 name ] [105]) [0 MEM[(const char_type &)name_5(D)]+0 S1 A8])) /usr/include/c++/5/bits/char_traits.h:243 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 MEM[(char_type &)&D.31250 + 16]+0 S1 A128])
        (nil)))
(insn 49 48 196 6 (set (mem/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [0 MEM[(char_type &)&D.31250 + 16]+0 S1 A128])
        (reg:QI 1 dx [orig:118 MEM[(const char_type &)name_5(D)] ] [118])) /usr/include/c++/5/bits/char_traits.h:243 93 {*movqi_internal}
     (nil))
(insn 196 49 212 6 (set (reg/f:DI 2 cx [141])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 24 [0x18]))) 214 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -56 [0xffffffffffffffc8]))
        (nil)))
(jump_insn 212 196 213 6 (set (pc)
        (label_ref 74)) 654 {jump}
     (nil)
 -> 74)
;;  succ:       11 [100.0%] 
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

(barrier 213 212 52)
;; basic block 7, loop depth 0, count 0, freq 5107, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [72.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 52 213 53 7 93 "" [1 uses])
(note 53 52 54 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 54 53 55 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:96 D.37051 ] [96])
            (const_int 0 [0]))) /usr/include/c++/5/bits/char_traits.h:288 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 55 54 56 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 169)
            (pc))) /usr/include/c++/5/bits/char_traits.h:288 612 {*jcc_1}
     (int_list:REG_BR_PROB 434 (nil))
 -> 169)
;;  succ:       8 [95.7%]  (FALLTHRU)
;;              9 [4.3%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 8, loop depth 0, count 0, freq 4885, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [95.7%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 2 [cx]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 2 [cx]
;; live  kill	
(note 56 55 197 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 197 56 214 8 (set (reg/f:DI 2 cx [141])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 24 [0x18]))) 214 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -56 [0xffffffffffffffc8]))
        (nil)))
(jump_insn 214 197 215 8 (set (pc)
        (label_ref 74)) 654 {jump}
     (nil)
 -> 74)
;;  succ:       11 [100.0%] 
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

(barrier 215 214 169)
;; basic block 9, loop depth 0, count 0, freq 222, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [4.3%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 2 [cx] 5 [di]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 2 [cx] 5 [di]
;; live  kill	
(code_label 169 215 168 9 103 "" [1 uses])
(note 168 169 9 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 9 168 198 9 (set (reg/f:DI 5 di [orig:98 D.37050 ] [98])
        (reg/f:DI 6 bp [111])) /usr/include/c++/5/bits/char_traits.h:288 89 {*movdi_internal}
     (nil))
(insn 198 9 61 9 (set (reg/f:DI 2 cx [141])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 24 [0x18]))) 214 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -56 [0xffffffffffffffc8]))
        (nil)))
;;  succ:       10 [100.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 10, loop depth 0, count 0, freq 3121, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [100.0%]  (FALLTHRU)
;;              4 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 2 [cx] 5 [di] 7 [sp] 43 [r14] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 2 [cx] 3 [bx] 5 [di] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 6 [bp]
;; live  kill	
(code_label 61 198 62 10 92 "" [1 uses])
(note 62 61 225 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 225 62 66 10 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [46 %sfp+-72 S8 A64])
        (reg/f:DI 2 cx [141])) 89 {*movdi_internal}
     (nil))
(insn 66 225 67 10 (set (reg:DI 1 dx)
        (reg:DI 43 r14 [113])) /usr/include/c++/5/bits/char_traits.h:290 89 {*movdi_internal}
     (nil))
(insn 67 66 69 10 (set (reg:DI 4 si)
        (reg/v/f:DI 44 r15 [orig:105 name ] [105])) /usr/include/c++/5/bits/char_traits.h:290 89 {*movdi_internal}
     (nil))
(call_insn 69 67 72 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x41]  <function_decl 0x7fb5372f5948 memcpy>) [0 memcpy S1 A8])
            (const_int 0 [0]))) /usr/include/c++/5/bits/char_traits.h:290 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("memcpy") [flags 0x41]  <function_decl 0x7fb5372f5948 memcpy>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 72 69 73 10 (set (reg:DI 0 ax [orig:96 D.37051 ] [96])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [9 __dnew+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 73 72 226 10 (set (reg/f:DI 6 bp [orig:97 D.37050 ] [97])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [3 MEM[(char * *)&D.31250]+0 S8 A128])) 89 {*movdi_internal}
     (nil))
(insn 226 73 74 10 (set (reg/f:DI 2 cx [141])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [46 %sfp+-72 S8 A64])) 89 {*movdi_internal}
     (nil))
;;  succ:       11 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13]
;; live  out 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

;; basic block 11, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [100.0%]  (FALLTHRU)
;;              6 [100.0%] 
;;              8 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13]
;; lr  use 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 42 [r13]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx] 4 [si] 5 [di] 6 [bp]
;; live  kill	
(code_label 74 226 75 11 94 "" [2 uses])
(note 75 74 76 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 76 75 77 11 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [9 MEM[(size_type *)&D.31250 + 8B]+0 S8 A64])
        (reg:DI 0 ax [orig:96 D.37051 ] [96])) /usr/include/c++/5/bits/basic_string.h:131 89 {*movdi_internal}
     (nil))
(insn 77 76 78 11 (set (mem:QI (plus:DI (reg/f:DI 6 bp [orig:97 D.37050 ] [97])
                (reg:DI 0 ax [orig:96 D.37051 ] [96])) [0 MEM[(char_type &)_55]+0 S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/bits/char_traits.h:243 93 {*movqi_internal}
     (nil))
(insn 78 77 82 11 (set (reg/f:DI 6 bp [140])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 16 [0x10]))) db/c.cc:157 214 {*leadi}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
(insn 82 78 83 11 (set (reg:DI 1 dx)
        (reg/f:DI 3 bx [142])) db/c.cc:157 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(insn 83 82 84 11 (set (reg:DI 4 si)
        (reg/v/f:DI 42 r13 [orig:104 options ] [104])) db/c.cc:157 89 {*movdi_internal}
     (nil))
(insn 84 83 85 11 (set (reg:DI 5 di)
        (reg/f:DI 6 bp [140])) db/c.cc:157 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
(call_insn 85 84 86 11 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb2DB4OpenERKNS_7OptionsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPPS0_") [flags 0x41]  <function_decl 0x7fb537815a20 Open>) [0 Open S1 A8])
        (const_int 0 [0])) db/c.cc:157 660 {*call}
     (expr_list:REG_EH_REGION (const_int 2 [0x2])
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb2DB4OpenERKNS_7OptionsERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEPPS0_") [flags 0x41]  <function_decl 0x7fb537815a20 Open>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
;;  succ:       25 (ABNORMAL,ABNORMAL_CALL,EH)
;;              12 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

;; basic block 12, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [100.0%]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12]
;; lr  use 	 6 [bp] 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	
(note 86 85 88 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 88 86 89 12 (set (reg:DI 4 si)
        (reg/f:DI 6 bp [140])) db/c.cc:157 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
(insn 89 88 90 12 (set (reg:DI 5 di)
        (reg/v/f:DI 41 r12 [orig:106 errptr ] [106])) db/c.cc:157 89 {*movdi_internal}
     (nil))
(call_insn 90 89 174 12 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("SaveError") [flags 0x3]  <function_decl 0x7fb53738c798 SaveError>) [0 SaveError S1 A8])
            (const_int 0 [0]))) db/c.cc:157 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("SaveError") [flags 0x3]  <function_decl 0x7fb53738c798 SaveError>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       21 (ABNORMAL,ABNORMAL_CALL,EH)
;;              13 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 16 [argp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

;; basic block 13, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       12 [100.0%]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 5 [di] 6 [bp] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	 5 [di] 6 [bp] 17 [flags]
;; live  kill	
(note 174 90 91 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 91 174 93 13 (set (reg:QI 6 bp [orig:89 D.37047 ] [89])
        (reg:QI 0 ax)) db/c.cc:157 93 {*movqi_internal}
     (nil))
(insn 93 91 94 13 (set (reg/f:DI 5 di [orig:91 D.37048 ] [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [3 D.31251.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn 94 93 95 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:91 D.37048 ] [91])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 95 94 96 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 99)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (int_list:REG_BR_PROB 3017 (nil))
 -> 99)
;;  succ:       14 [69.8%]  (FALLTHRU)
;;              15 [30.2%] 
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 14, loop depth 0, count 0, freq 6980, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       13 [69.8%]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(note 96 95 98 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(call_insn 98 96 99 14 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       15 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 15, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       13 [30.2%] 
;;              14 [100.0%]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 3 [bx] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 3 [bx] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 99 98 100 15 95 "" [1 uses])
(note 100 99 101 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 101 100 103 15 (set (reg/f:DI 5 di [orig:95 D.37050 ] [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [3 MEM[(char * *)&D.31250]+0 S8 A128])) 89 {*movdi_internal}
     (nil))
(insn 103 101 104 15 (parallel [
            (set (reg/f:DI 3 bx [129])
                (plus:DI (reg/f:DI 3 bx [142])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:179 218 {*adddi_1}
     (nil))
(insn 104 103 105 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:95 D.37050 ] [95])
            (reg/f:DI 3 bx [129]))) /usr/include/c++/5/bits/basic_string.h:179 8 {*cmpdi_1}
     (nil))
(jump_insn 105 104 106 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 109)
            (pc))) /usr/include/c++/5/bits/basic_string.h:179 612 {*jcc_1}
     (int_list:REG_BR_PROB 3017 (nil))
 -> 109)
;;  succ:       16 [69.8%]  (FALLTHRU)
;;              17 [30.2%] 
;; lr  out 	 5 [di] 6 [bp] 7 [sp]
;; live  out 	 5 [di] 6 [bp] 7 [sp]

;; basic block 16, loop depth 0, count 0, freq 6980, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [69.8%]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(note 106 105 108 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(call_insn 108 106 109 16 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/ext/new_allocator.h:110 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       17 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

;; basic block 17, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 16, next block 18, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [30.2%] 
;;              16 [100.0%]  (FALLTHRU)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(code_label 109 108 110 17 96 "" [1 uses])
(note 110 109 12 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 12 110 111 17 (set (reg/f:DI 0 ax [orig:87 D.37045 ] [87])
        (const_int 0 [0])) db/c.cc:158 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 111 12 112 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 6 bp [orig:89 D.37047 ] [89])
            (const_int 0 [0]))) db/c.cc:157 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 112 111 113 17 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 120)
            (pc))) db/c.cc:157 612 {*jcc_1}
     (int_list:REG_BR_PROB 2139 (nil))
 -> 120)
;;  succ:       19 [21.4%] 
;;              18 [78.6%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 18, loop depth 0, count 0, freq 7858, maybe hot
;;  prev block 17, next block 19, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       17 [78.6%]  (FALLTHRU)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 5 [di]
;; live  kill	
(note 113 112 114 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 114 113 115 18 (set (reg:DI 5 di)
        (const_int 8 [0x8])) db/c.cc:160 89 {*movdi_internal}
     (nil))
(call_insn 115 114 116 18 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>) [0 operator new S1 A8])
            (const_int 0 [0]))) db/c.cc:160 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 116 115 118 18 (set (reg/f:DI 0 ax [130])
        (reg:DI 0 ax)) db/c.cc:160 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [130])
        (nil)))
(insn 118 116 119 18 (set (reg/f:DI 1 dx [orig:131 db ] [131])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [3 db+0 S8 A64])) db/c.cc:161 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [3 db+0 S8 A64])
        (nil)))
(insn 119 118 13 18 (set (mem/f:DI (reg/f:DI 0 ax [130]) [3 result_18->rep+0 S8 A64])
        (reg/f:DI 1 dx [orig:131 db ] [131])) db/c.cc:161 89 {*movdi_internal}
     (nil))
(insn 13 119 120 18 (set (reg/f:DI 0 ax [orig:87 D.37045 ] [87])
        (reg/f:DI 0 ax [130])) db/c.cc:162 89 {*movdi_internal}
     (nil))
;;  succ:       19 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 19, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 18, next block 20, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       17 [21.4%] 
;;              18 [100.0%]  (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 4 [si] 17 [flags]
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 4 [si]
(code_label 120 13 121 19 97 "" [1 uses])
(note 121 120 159 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 159 121 161 19 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [orig:87 D.37045 ] [87])) db/c.cc:163 89 {*movdi_internal}
     (nil))
(insn 161 159 162 19 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                                (const_int 72 [0x48])) [3 D.37054+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 4 si [144]))
        ]) db/c.cc:163 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 162 161 216 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 165)
            (pc))) db/c.cc:163 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 165)
;;  succ:       31 [100.0%] 
;;              20 [0.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 20, loop depth 0, count 0, freq 4
;;  prev block 19, next block 21, flags: (NEW, REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       19 [0.0%]  (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 216 162 218 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(jump_insn 218 216 219 20 (set (pc)
        (label_ref 217)) 654 {jump}
     (nil)
 -> 217)
;;  succ:       30 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 219 218 183)
;; basic block 21, loop depth 0, count 0, freq 0
;;  prev block 20, next block 23, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       12 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 21 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 21 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 3 [bx] 7 [sp] 16 [argp]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	
(code_label/s 183 219 186 21 106 "" [1 uses])
(note 186 183 184 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 184 186 127 21 (set (reg:DI 6 bp [134])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (nil))
(insn 127 184 128 21 (set (reg/f:DI 5 di [orig:90 D.37048 ] [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [3 D.31251.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn 128 127 129 21 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:90 D.37048 ] [90])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 129 128 130 21 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 137)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (int_list:REG_BR_PROB 3017 (nil))
 -> 137)
;;  succ:       23 [69.8%]  (FALLTHRU)
;;              26 [30.2%] 
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 23, loop depth 0, count 0, freq 0
;;  prev block 21, next block 25, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       21 [69.8%]  (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(note 130 129 132 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(call_insn 132 130 220 23 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 220 132 221 23 (set (pc)
        (label_ref 137)) 654 {jump}
     (nil)
 -> 137)
;;  succ:       26 [100.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

(barrier 221 220 177)
;; basic block 25, loop depth 0, count 0, freq 0
;;  prev block 23, next block 26, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 25 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 25 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 3 [bx] 7 [sp] 16 [argp]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 6 [bp]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 6 [bp]
;; live  kill	
(code_label/s 177 221 182 25 105 "" [1 uses])
(note 182 177 178 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 178 182 137 25 (set (reg:DI 6 bp [133])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (nil))
;;  succ:       26 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 26, loop depth 0, count 0, freq 0
;;  prev block 25, next block 27, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       25 [100.0%]  (FALLTHRU)
;;              23 [100.0%] 
;;              21 [30.2%] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 3 [bx] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 3 [bx] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 137 178 138 26 100 "" [2 uses])
(note 138 137 139 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 141 26 (set (reg/f:DI 5 di [orig:94 D.37050 ] [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [3 MEM[(char * *)&D.31250]+0 S8 A128])) 89 {*movdi_internal}
     (nil))
(insn 141 139 142 26 (parallel [
            (set (reg/f:DI 3 bx [138])
                (plus:DI (reg/f:DI 3 bx [142])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:179 218 {*adddi_1}
     (nil))
(insn 142 141 143 26 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:94 D.37050 ] [94])
            (reg/f:DI 3 bx [138]))) /usr/include/c++/5/bits/basic_string.h:179 8 {*cmpdi_1}
     (nil))
(jump_insn 143 142 144 26 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 147)
            (pc))) /usr/include/c++/5/bits/basic_string.h:179 612 {*jcc_1}
     (int_list:REG_BR_PROB 3017 (nil))
 -> 147)
;;  succ:       27 [69.8%]  (FALLTHRU)
;;              28 [30.2%] 
;; lr  out 	 5 [di] 6 [bp] 7 [sp]
;; live  out 	 5 [di] 6 [bp] 7 [sp]

;; basic block 27, loop depth 0, count 0, freq 0
;;  prev block 26, next block 28, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       26 [69.8%]  (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(note 144 143 146 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(call_insn 146 144 147 27 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/ext/new_allocator.h:110 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       28 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

;; basic block 28, loop depth 0, count 0, freq 0
;;  prev block 27, next block 29, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       26 [30.2%] 
;;              27 [100.0%]  (FALLTHRU)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 147 146 148 28 101 "" [1 uses])
(note 148 147 150 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
(insn 150 148 151 28 (set (reg:DI 5 di)
        (reg:DI 6 bp [133])) 89 {*movdi_internal}
     (nil))
(call_insn 151 150 152 28 (call (mem:QI (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>) [0 __builtin_unwind_resume S1 A8])
        (const_int 0 [0])) 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 152 151 153)
;; basic block 29, loop depth 0, count 0, freq 1275, maybe hot
;; Invalid sum of incoming frequencies 2163, should be 1275
;;  prev block 28, next block 30, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [21.6%] 
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 153 152 154 29 90 "" [1 uses])
(note 154 153 155 29 [bb 29] NOTE_INSN_BASIC_BLOCK)
(insn 155 154 156 29 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7fb536e46480 *.LC23>)) /usr/include/c++/5/bits/basic_string.tcc:216 89 {*movdi_internal}
     (nil))
(call_insn 156 155 157 29 (call (mem:QI (symbol_ref:DI ("_ZSt19__throw_logic_errorPKc") [flags 0x41]  <function_decl 0x7fb5388d86c0 __throw_logic_error>) [0 __throw_logic_error S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/bits/basic_string.tcc:216 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZSt19__throw_logic_errorPKc") [flags 0x41]  <function_decl 0x7fb5388d86c0 __throw_logic_error>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 157 156 217)
;; basic block 30, loop depth 0, count 0, freq 4
;;  prev block 29, next block 31, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       20 [100.0%] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 217 157 175 30 113 "" [1 uses])
(note 175 217 163 30 [bb 30] NOTE_INSN_BASIC_BLOCK)
(call_insn 163 175 164 30 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) db/c.cc:163 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 164 163 165)
;; basic block 31, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 30, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       19 [100.0%] 
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 165 164 176 31 102 "" [1 uses])
(note 176 165 166 31 [bb 31] NOTE_INSN_BASIC_BLOCK)
(insn 166 176 222 31 (use (reg/i:DI 0 ax)) db/c.cc:163 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 222 166 0 NOTE_INSN_DELETED)

;; Function void leveldb_close(leveldb_t*) (leveldb_close, funcdef_no=1432, decl_uid=2158, cgraph_uid=539, symbol_order=542)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 4
   Insn 17: point = 0
   Insn 16: point = 0
  BB 3
   Insn 13: point = 2
   Insn 12: point = 3
   Insn 10: point = 4
  BB 2
   Insn 8: point = 6
   Insn 7: point = 6
   Insn 6: point = 6
   Insn 2: point = 7
Compressing live ranges: from 8 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 6
changing reg in insn 12
changing reg in insn 10
changing reg in insn 7
changing reg in insn 2
changing reg in insn 16
changing reg in insn 6
changing reg in insn 10
changing reg in insn 13
deleting insn with uid = 12.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 13.
verify found no changes in insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)


void leveldb_close(leveldb_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={4d,1u} r1={3d} r2={3d} r3={1d,2u} r4={3d} r5={5d,5u} r7={1d,6u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={3d,1u} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 180{165d,15u,0e} in 8{6 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 3 [bx] 5 [di] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 3 [bx] 5 [di] 17 [flags]
;; live  kill	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v/f:DI 3 bx [orig:90 db ] [90])
        (reg:DI 5 di [ db ])) db/c.cc:165 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 5 di [orig:87 D.37063 ] [87])
        (mem/f:DI (reg/v/f:DI 3 bx [orig:90 db ] [90]) [3 db_3(D)->rep+0 S8 A64])) db/c.cc:166 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:87 D.37063 ] [87])
            (const_int 0 [0]))) db/c.cc:166 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 14)
            (pc))) db/c.cc:166 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 14)
;;  succ:       3 [78.3%]  (FALLTHRU)
;;              4 [21.6%] 
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 7835, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [78.3%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:DI 0 ax [orig:91 _4->_vptr.DB ] [91])
        (mem/f:DI (reg/f:DI 5 di [orig:87 D.37063 ] [87]) [3 _4->_vptr.DB+0 S8 A64])) db/c.cc:166 89 {*movdi_internal}
     (nil))
(note 11 10 13 3 NOTE_INSN_DELETED)
(call_insn 13 11 14 3 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:91 _4->_vptr.DB ] [91])
                    (const_int 8 [0x8])) [3 MEM[(int (*__vtbl_ptr_type) () *)_5 + 8B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_6;(struct DB)_4->1) S1 A8])
        (const_int 0 [0])) db/c.cc:166 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (expr_list:REG_CALL_DECL (nil)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 3, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [21.6%] 
;;              3 [100.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 14 13 15 4 120 "" [1 uses])
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:90 db ] [90])) db/c.cc:167 89 {*movdi_internal}
     (nil))
(call_insn/j 17 16 18 4 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) db/c.cc:167 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 18 17 27)
(note 27 18 0 NOTE_INSN_DELETED)

;; Function void leveldb_put(leveldb_t*, const leveldb_writeoptions_t*, const char*, size_t, const char*, size_t, char**) (leveldb_put, funcdef_no=1433, decl_uid=2166, cgraph_uid=540, symbol_order=543)

      Creating newreg=109
Removing SCRATCH in insn #11 (nop 2)
rescanning insn with uid = 11.
      Creating newreg=110
Removing SCRATCH in insn #61 (nop 3)
rescanning insn with uid = 61.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r109
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 20:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 23:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) =r  (1) Ts {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 40:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 47:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 48:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) rBwBz {*call}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r110
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 63:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 8
   Insn 57: point = 0
   Insn 56: point = 0
  BB 7
   Insn 52: point = 2
   Insn 51: point = 2
  BB 6
   Insn 49: point = 4
   Insn 48: point = 4
   Insn 47: point = 4
  BB 5
   Insn 70: point = 6
  BB 10
   Insn 63: point = 7
  BB 11
  BB 9
   Insn 62: point = 7
   Insn 61: point = 7
  BB 4
   Insn 84: point = 8
   Insn 40: point = 8
   Insn 39: point = 8
  BB 3
   Insn 37: point = 10
   Insn 36: point = 10
   Insn 35: point = 10
  BB 2
   Insn 33: point = 11
   Insn 32: point = 11
   Insn 31: point = 12
   Insn 29: point = 13
   Insn 28: point = 14
   Insn 27: point = 14
   Insn 26: point = 15
   Insn 25: point = 16
   Insn 24: point = 17
   Insn 23: point = 17
   Insn 21: point = 18
   Insn 20: point = 19
   Insn 19: point = 20
   Insn 18: point = 21
   Insn 17: point = 21
   Insn 16: point = 21
   Insn 15: point = 23
   Insn 14: point = 24
   Insn 11: point = 26
   Insn 8: point = 28
   Insn 5: point = 29
   Insn 4: point = 30
   Insn 3: point = 31
   Insn 2: point = 32
 r88: [14..24]
 r90: [13..21]
 r91: [8..10]
 r93: [2..4]
 r94: [25..32]
 r95: [15..31]
 r96: [20..30]
 r97: [19..29]
 r100: [11..28]
 r102: [22..23]
 r103: [12..18]
 r105: [16..17]
 r107: [0..6]
 r109: [26..27]
 r110: [7..7]
Compressing live ranges: from 33 to 13 - 39%
Ranges after the compression:
 r88: [5..10]
 r90: [5..8]
 r91: [3..4]
 r93: [0..1]
 r94: [11..12]
 r95: [5..12]
 r96: [7..12]
 r97: [7..12]
 r100: [5..12]
 r102: [9..10]
 r103: [5..6]
 r105: [5..6]
 r107: [0..1]
 r109: [11..12]
 r110: [2..2]

********** Inheritance #1: **********

EBB 2 3 4
EBB 5
EBB 6 7
EBB 8
EBB 9
EBB 10
EBB 11

********** Pseudo live ranges #2: **********

  BB 8
   Insn 57: point = 0
   Insn 56: point = 0
  BB 7
   Insn 52: point = 2
   Insn 51: point = 2
  BB 6
   Insn 49: point = 4
   Insn 48: point = 4
   Insn 47: point = 4
  BB 5
   Insn 70: point = 6
  BB 10
   Insn 63: point = 7
  BB 11
  BB 9
   Insn 62: point = 7
   Insn 61: point = 7
  BB 4
   Insn 84: point = 8
   Insn 40: point = 8
   Insn 39: point = 8
  BB 3
   Insn 37: point = 10
   Insn 36: point = 10
   Insn 35: point = 10
  BB 2
   Insn 33: point = 11
   Insn 32: point = 11
   Insn 31: point = 12
   Insn 29: point = 13
   Insn 28: point = 14
   Insn 27: point = 14
   Insn 26: point = 15
   Insn 25: point = 16
   Insn 24: point = 17
   Insn 23: point = 17
   Insn 21: point = 18
   Insn 20: point = 19
   Insn 19: point = 20
   Insn 18: point = 21
   Insn 17: point = 21
   Insn 16: point = 21
   Insn 15: point = 23
   Insn 14: point = 24
   Insn 11: point = 26
   Insn 8: point = 28
   Insn 5: point = 29
   Insn 4: point = 30
   Insn 3: point = 31
   Insn 2: point = 32
 r88: [14..24]
 r90: [13..21]
 r91: [8..10]
 r93: [2..4]
 r94: [25..32]
 r95: [15..31]
 r96: [20..30]
 r97: [19..29]
 r100: [11..28]
 r102: [22..23]
 r103: [12..18]
 r105: [16..17]
 r107: [0..6]
 r109: [26..27]
 r110: [7..7]
Compressing live ranges: from 33 to 13 - 39%
Ranges after the compression:
 r88: [5..10]
 r90: [5..8]
 r91: [3..4]
 r93: [0..1]
 r94: [11..12]
 r95: [5..12]
 r96: [7..12]
 r97: [7..12]
 r100: [5..12]
 r102: [9..10]
 r103: [5..6]
 r105: [5..6]
 r107: [0..1]
 r109: [11..12]
 r110: [2..2]

********** Assignment #1: **********

	 Assigning to 109 (cl=INDEX_REGS, orig=109, freq=1000, tfirst=109, tfreq=1000)...
	   Assign 0 to reload r109 (freq=1000)
	 Assigning to 110 (cl=INDEX_REGS, orig=110, freq=1000, tfirst=110, tfreq=1000)...
	   Assign 0 to reload r110 (freq=1000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=96, prev_offset=96)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=64, prev_offset=64)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
changing reg in insn 14
changing reg in insn 27
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 29
changing reg in insn 35
changing reg in insn 39
changing reg in insn 36
changing reg in insn 47
changing reg in insn 51
changing reg in insn 48
changing reg in insn 2
changing reg in insn 14
changing reg in insn 3
changing reg in insn 26
changing reg in insn 4
changing reg in insn 19
changing reg in insn 5
changing reg in insn 20
changing reg in insn 8
changing reg in insn 32
changing reg in insn 15
changing reg in insn 16
changing reg in insn 21
changing reg in insn 31
changing reg in insn 28
changing reg in insn 23
changing reg in insn 25
changing reg in insn 70
changing reg in insn 56
changing reg in insn 11
changing reg in insn 61
deleting insn with uid = 2.
deleting insn with uid = 4.
deleting insn with uid = 5.
deleting insn with uid = 25.
deleting insn with uid = 27.
deleting insn with uid = 39.
deleting insn with uid = 51.


try_optimize_cfg iteration 1

Merging block 6 into block 5...
changing bb of uid 47
  from 6 to 5
changing bb of uid 48
  from 6 to 5
changing bb of uid 49
  from 6 to 5
Merged blocks 5 and 6.
Merged 5 and 6 without moving.


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 29.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 57.
verify found no changes in insn with uid = 63.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 12 count 11 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 12 count 11 (    1)


void leveldb_put(leveldb_t*, const leveldb_writeoptions_t*, const char*, size_t, const char*, size_t, char**)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 39[r10]
;;  ref usage 	r0={12d,3u} r1={9d,2u} r2={8d,2u} r3={2d,3u} r4={9d,4u,1e} r5={12d,8u} r6={1d,1u} r7={1d,28u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r16={1u} r17={11d,3u} r18={6d} r19={6d} r20={4e} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={8d,2u} r38={7d,1u} r39={7d,1u} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} 
;;    total ref usage 537{473d,59u,5e} in 34{28 regular + 6 call} insns.
(note 1 0 12 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 16 [argp] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 37 [r8] 39 [r10]
;; live  kill	 17 [flags]
(note 12 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 3 12 6 2 (set (reg/v/f:DI 39 r10 [orig:95 options ] [95])
        (reg:DI 4 si [ options ])) db/c.cc:175 89 {*movdi_internal}
     (nil))
(note 6 3 7 2 NOTE_INSN_DELETED)
(note 7 6 8 2 NOTE_INSN_DELETED)
(insn 8 7 9 2 (set (reg/v/f:DI 6 bp [orig:100 errptr ] [100])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [3 errptr+0 S8 A64])) db/c.cc:175 89 {*movdi_internal}
     (nil))
(note 9 8 11 2 NOTE_INSN_FUNCTION_BEG)
(insn 11 9 14 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                        (const_int 56 [0x38])) [3 D.37076+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [109])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) db/c.cc:175 986 {stack_tls_protect_set_di}
     (nil))
(insn 14 11 15 2 (set (reg/f:DI 4 si [orig:88 D.37071 ] [88])
        (mem/f:DI (reg/v/f:DI 5 di [orig:94 db ] [94]) [3 db_3(D)->rep+0 S8 A64])) db/c.cc:177 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (reg/f:DI 0 ax [orig:102 _4->_vptr.DB ] [102])
        (mem/f:DI (reg/f:DI 4 si [orig:88 D.37071 ] [88]) [3 _4->_vptr.DB+0 S8 A64])) db/c.cc:177 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:88 D.37071 ] [88]) [3 _4->_vptr.DB+0 S8 A64])
        (nil)))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [orig:90 D.37073 ] [90])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:102 _4->_vptr.DB ] [102])
                (const_int 16 [0x10])) [3 MEM[(int (*__vtbl_ptr_type) () *)_5 + 16B]+0 S8 A64])) db/c.cc:177 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [3 D.31299.data_+0 S8 A128])
        (reg:DI 37 r8 [ val ])) ./include/leveldb/slice.h:31 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [9 D.31299.size_+0 S8 A64])
        (reg:DI 38 r9 [ vallen ])) ./include/leveldb/slice.h:31 89 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [3 D.31298.data_+0 S8 A128])
        (reg/v/f:DI 1 dx [orig:96 key ] [96])) ./include/leveldb/slice.h:31 89 {*movdi_internal}
     (nil))
(insn 20 19 21 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [9 D.31298.size_+0 S8 A64])
        (reg/v:DI 2 cx [orig:97 keylen ] [97])) ./include/leveldb/slice.h:31 89 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg/f:DI 3 bx [103])
        (reg/f:DI 7 sp)) db/c.cc:177 89 {*movdi_internal}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
(note 22 21 23 2 NOTE_INSN_DELETED)
(insn 23 22 24 2 (parallel [
            (set (reg/f:DI 2 cx [105])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) db/c.cc:177 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(insn 24 23 26 2 (set (reg:DI 37 r8)
        (plus:DI (reg/f:DI 7 sp)
            (const_int 32 [0x20]))) db/c.cc:177 214 {*leadi}
     (nil))
(insn 26 24 28 2 (set (reg:DI 1 dx)
        (reg/v/f:DI 39 r10 [orig:95 options ] [95])) db/c.cc:177 89 {*movdi_internal}
     (nil))
(insn 28 26 29 2 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [103])) db/c.cc:177 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
(call_insn 29 28 31 2 (call (mem:QI (reg/f:DI 0 ax [orig:90 D.37073 ] [90]) [0 *OBJ_TYPE_REF(_6;(struct DB)_4->2) S1 A8])
        (const_int 0 [0])) db/c.cc:177 660 {*call}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
(insn 31 29 32 2 (set (reg:DI 4 si)
        (reg/f:DI 3 bx [103])) db/c.cc:177 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
(insn 32 31 33 2 (set (reg:DI 5 di)
        (reg/v/f:DI 6 bp [orig:100 errptr ] [100])) db/c.cc:177 89 {*movdi_internal}
     (nil))
(call_insn 33 32 34 2 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("SaveError") [flags 0x3]  <function_decl 0x7fb53738c798 SaveError>) [0 SaveError S1 A8])
            (const_int 0 [0]))) db/c.cc:177 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 2 [0x2])
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("SaveError") [flags 0x3]  <function_decl 0x7fb53738c798 SaveError>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       5 (ABNORMAL,ABNORMAL_CALL,EH)
;;              3 [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp] 16 [argp]
;; live  out 	 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(note 34 33 35 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 3 (set (reg/f:DI 5 di [orig:91 D.37074 ] [91])
        (mem/f/c:DI (reg/f:DI 7 sp) [3 D.31300.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn 36 35 37 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:91 D.37074 ] [91])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 37 36 38 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 59)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 59)
;;  succ:       4 [78.3%]  (FALLTHRU)
;;              9 [21.6%] 
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 7835, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [78.3%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 38 37 40 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn 40 38 84 4 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 84 40 85 4 (set (pc)
        (label_ref 59)) db/c.cc:178 654 {jump}
     (nil)
 -> 59)
;;  succ:       9 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 85 84 69)
;; basic block 5, loop depth 0, count 0, freq 0
;;  prev block 4, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 5 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 5 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 7 [sp] 16 [argp]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  kill	
(code_label/s 69 85 71 5 130 "" [1 uses])
(note 71 69 70 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 70 71 47 5 (set (reg:DI 3 bx [107])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (nil))
(insn 47 70 48 5 (set (reg/f:DI 5 di [orig:93 D.37074 ] [93])
        (mem/f/c:DI (reg/f:DI 7 sp) [3 D.31300.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn 48 47 49 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:93 D.37074 ] [93])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 49 48 50 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 53)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (int_list:REG_BR_PROB 3017 (nil))
 -> 53)
;;  succ:       7 [69.8%]  (FALLTHRU)
;;              8 [30.2%] 
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

;; basic block 7, loop depth 0, count 0, freq 0
;;  prev block 5, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [69.8%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 50 49 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(call_insn 52 50 53 7 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 8, loop depth 0, count 0, freq 0
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [30.2%] 
;;              7 [100.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 53 52 54 8 128 "" [1 uses])
(note 54 53 56 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 56 54 57 8 (set (reg:DI 5 di)
        (reg:DI 3 bx [107])) 89 {*movdi_internal}
     (nil))
(call_insn 57 56 58 8 (call (mem:QI (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>) [0 __builtin_unwind_resume S1 A8])
        (const_int 0 [0])) 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 58 57 59)
;; basic block 9, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [21.6%] 
;;              4 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	 0 [ax]
(code_label 59 58 66 9 125 "" [2 uses])
(note 66 59 61 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 61 66 62 9 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                                (const_int 56 [0x38])) [3 D.37076+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 0 ax [110]))
        ]) db/c.cc:178 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 62 61 67 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 65)
            (pc))) db/c.cc:178 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 65)
;;  succ:       11 [100.0%] 
;;              10 [0.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 10, loop depth 0, count 0, freq 4
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [0.0%]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 67 62 63 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(call_insn 63 67 64 10 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) db/c.cc:178 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 64 63 65)
;; basic block 11, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 10, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 65 64 68 11 129 "" [1 uses])
(note 68 65 86 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 86 68 0 NOTE_INSN_DELETED)

;; Function void leveldb_delete(leveldb_t*, const leveldb_writeoptions_t*, const char*, size_t, char**) (leveldb_delete, funcdef_no=1434, decl_uid=2172, cgraph_uid=541, symbol_order=544)

      Creating newreg=106
Removing SCRATCH in insn #9 (nop 2)
rescanning insn with uid = 9.
      Creating newreg=107
Removing SCRATCH in insn #55 (nop 3)
rescanning insn with uid = 55.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=80, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r106
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 18:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 29:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 41:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (0) rBwBz {*call}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 55:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r107
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 57:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 8
   Insn 51: point = 0
   Insn 50: point = 0
  BB 7
   Insn 46: point = 2
   Insn 45: point = 2
  BB 6
   Insn 43: point = 4
   Insn 42: point = 4
   Insn 41: point = 4
  BB 5
   Insn 64: point = 6
  BB 10
   Insn 57: point = 7
  BB 11
  BB 9
   Insn 56: point = 7
   Insn 55: point = 7
  BB 4
   Insn 78: point = 8
   Insn 34: point = 8
   Insn 33: point = 8
  BB 3
   Insn 31: point = 10
   Insn 30: point = 10
   Insn 29: point = 10
  BB 2
   Insn 27: point = 11
   Insn 26: point = 11
   Insn 25: point = 12
   Insn 23: point = 13
   Insn 22: point = 14
   Insn 21: point = 14
   Insn 20: point = 15
   Insn 19: point = 16
   Insn 18: point = 17
   Insn 17: point = 18
   Insn 16: point = 19
   Insn 15: point = 20
   Insn 14: point = 21
   Insn 13: point = 23
   Insn 12: point = 24
   Insn 9: point = 26
   Insn 6: point = 28
   Insn 5: point = 29
   Insn 4: point = 30
   Insn 3: point = 31
   Insn 2: point = 32
 r87: [14..24]
 r89: [13..21]
 r90: [8..10]
 r92: [2..4]
 r94: [25..32]
 r95: [15..31]
 r96: [20..30]
 r97: [19..29]
 r98: [11..28]
 r100: [22..23]
 r101: [12..18]
 r102: [16..17]
 r104: [0..6]
 r106: [26..27]
 r107: [7..7]
Compressing live ranges: from 33 to 13 - 39%
Ranges after the compression:
 r87: [5..10]
 r89: [5..8]
 r90: [3..4]
 r92: [0..1]
 r94: [11..12]
 r95: [5..12]
 r96: [7..12]
 r97: [7..12]
 r98: [5..12]
 r100: [9..10]
 r101: [5..6]
 r102: [5..6]
 r104: [0..1]
 r106: [11..12]
 r107: [2..2]

********** Inheritance #1: **********

EBB 2 3 4
EBB 5
EBB 6 7
EBB 8
EBB 9
EBB 10
EBB 11

********** Pseudo live ranges #2: **********

  BB 8
   Insn 51: point = 0
   Insn 50: point = 0
  BB 7
   Insn 46: point = 2
   Insn 45: point = 2
  BB 6
   Insn 43: point = 4
   Insn 42: point = 4
   Insn 41: point = 4
  BB 5
   Insn 64: point = 6
  BB 10
   Insn 57: point = 7
  BB 11
  BB 9
   Insn 56: point = 7
   Insn 55: point = 7
  BB 4
   Insn 78: point = 8
   Insn 34: point = 8
   Insn 33: point = 8
  BB 3
   Insn 31: point = 10
   Insn 30: point = 10
   Insn 29: point = 10
  BB 2
   Insn 27: point = 11
   Insn 26: point = 11
   Insn 25: point = 12
   Insn 23: point = 13
   Insn 22: point = 14
   Insn 21: point = 14
   Insn 20: point = 15
   Insn 19: point = 16
   Insn 18: point = 17
   Insn 17: point = 18
   Insn 16: point = 19
   Insn 15: point = 20
   Insn 14: point = 21
   Insn 13: point = 23
   Insn 12: point = 24
   Insn 9: point = 26
   Insn 6: point = 28
   Insn 5: point = 29
   Insn 4: point = 30
   Insn 3: point = 31
   Insn 2: point = 32
 r87: [14..24]
 r89: [13..21]
 r90: [8..10]
 r92: [2..4]
 r94: [25..32]
 r95: [15..31]
 r96: [20..30]
 r97: [19..29]
 r98: [11..28]
 r100: [22..23]
 r101: [12..18]
 r102: [16..17]
 r104: [0..6]
 r106: [26..27]
 r107: [7..7]
Compressing live ranges: from 33 to 13 - 39%
Ranges after the compression:
 r87: [5..10]
 r89: [5..8]
 r90: [3..4]
 r92: [0..1]
 r94: [11..12]
 r95: [5..12]
 r96: [7..12]
 r97: [7..12]
 r98: [5..12]
 r100: [9..10]
 r101: [5..6]
 r102: [5..6]
 r104: [0..1]
 r106: [11..12]
 r107: [2..2]

********** Assignment #1: **********

	 Assigning to 106 (cl=INDEX_REGS, orig=106, freq=1000, tfirst=106, tfreq=1000)...
	   Assign 0 to reload r106 (freq=1000)
	 Assigning to 107 (cl=INDEX_REGS, orig=107, freq=1000, tfirst=107, tfreq=1000)...
	   Assign 0 to reload r107 (freq=1000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=80, prev_offset=80)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=48, prev_offset=48)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
changing reg in insn 12
changing reg in insn 21
changing reg in insn 13
changing reg in insn 13
changing reg in insn 14
changing reg in insn 23
changing reg in insn 29
changing reg in insn 33
changing reg in insn 30
changing reg in insn 41
changing reg in insn 45
changing reg in insn 42
changing reg in insn 2
changing reg in insn 12
changing reg in insn 3
changing reg in insn 20
changing reg in insn 4
changing reg in insn 15
changing reg in insn 5
changing reg in insn 16
changing reg in insn 6
changing reg in insn 26
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 25
changing reg in insn 22
changing reg in insn 18
changing reg in insn 19
changing reg in insn 64
changing reg in insn 50
changing reg in insn 9
changing reg in insn 55
deleting insn with uid = 2.
deleting insn with uid = 4.
deleting insn with uid = 5.
deleting insn with uid = 19.
deleting insn with uid = 21.
deleting insn with uid = 33.
deleting insn with uid = 45.


try_optimize_cfg iteration 1

Merging block 6 into block 5...
changing bb of uid 41
  from 6 to 5
changing bb of uid 42
  from 6 to 5
changing bb of uid 43
  from 6 to 5
Merged blocks 5 and 6.
Merged 5 and 6 without moving.


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 23.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 51.
verify found no changes in insn with uid = 57.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 12 count 11 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 12 count 11 (    1)


void leveldb_delete(leveldb_t*, const leveldb_writeoptions_t*, const char*, size_t, char**)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9]
;;  ref usage 	r0={12d,3u} r1={9d,2u} r2={8d,2u} r3={2d,3u} r4={9d,4u,1e} r5={12d,8u} r6={1d,1u} r7={1d,24u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r16={1u} r17={11d,3u} r18={6d} r19={6d} r20={4e} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={7d,1u} r38={8d,1u} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} 
;;    total ref usage 530{472d,53u,5e} in 31{25 regular + 6 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 16 [argp] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 38 [r9]
;; live  kill	 17 [flags]
(note 10 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 3 10 6 2 (set (reg/v/f:DI 38 r9 [orig:95 options ] [95])
        (reg:DI 4 si [ options ])) db/c.cc:184 89 {*movdi_internal}
     (nil))
(insn 6 3 7 2 (set (reg/v/f:DI 6 bp [orig:98 errptr ] [98])
        (reg:DI 37 r8 [ errptr ])) db/c.cc:184 89 {*movdi_internal}
     (nil))
(note 7 6 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 7 12 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                        (const_int 40 [0x28])) [3 D.37086+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [106])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) db/c.cc:184 986 {stack_tls_protect_set_di}
     (nil))
(insn 12 9 13 2 (set (reg/f:DI 4 si [orig:87 D.37081 ] [87])
        (mem/f:DI (reg/v/f:DI 5 di [orig:94 db ] [94]) [3 db_2(D)->rep+0 S8 A64])) db/c.cc:185 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg/f:DI 0 ax [orig:100 _3->_vptr.DB ] [100])
        (mem/f:DI (reg/f:DI 4 si [orig:87 D.37081 ] [87]) [3 _3->_vptr.DB+0 S8 A64])) db/c.cc:185 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:87 D.37081 ] [87]) [3 _3->_vptr.DB+0 S8 A64])
        (nil)))
(insn 14 13 15 2 (set (reg/f:DI 0 ax [orig:89 D.37083 ] [89])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:100 _3->_vptr.DB ] [100])
                (const_int 24 [0x18])) [3 MEM[(int (*__vtbl_ptr_type) () *)_4 + 24B]+0 S8 A64])) db/c.cc:185 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [3 D.31308.data_+0 S8 A128])
        (reg/v/f:DI 1 dx [orig:96 key ] [96])) ./include/leveldb/slice.h:31 89 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [9 D.31308.size_+0 S8 A64])
        (reg/v:DI 2 cx [orig:97 keylen ] [97])) ./include/leveldb/slice.h:31 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg/f:DI 3 bx [101])
        (reg/f:DI 7 sp)) db/c.cc:185 89 {*movdi_internal}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(insn 18 17 20 2 (parallel [
            (set (reg/f:DI 2 cx [102])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) db/c.cc:185 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -32 [0xffffffffffffffe0]))
        (nil)))
(insn 20 18 22 2 (set (reg:DI 1 dx)
        (reg/v/f:DI 38 r9 [orig:95 options ] [95])) db/c.cc:185 89 {*movdi_internal}
     (nil))
(insn 22 20 23 2 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [101])) db/c.cc:185 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(call_insn 23 22 25 2 (call (mem:QI (reg/f:DI 0 ax [orig:89 D.37083 ] [89]) [0 *OBJ_TYPE_REF(_5;(struct DB)_3->3) S1 A8])
        (const_int 0 [0])) db/c.cc:185 660 {*call}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 25 23 26 2 (set (reg:DI 4 si)
        (reg/f:DI 3 bx [101])) db/c.cc:185 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(insn 26 25 27 2 (set (reg:DI 5 di)
        (reg/v/f:DI 6 bp [orig:98 errptr ] [98])) db/c.cc:185 89 {*movdi_internal}
     (nil))
(call_insn 27 26 28 2 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("SaveError") [flags 0x3]  <function_decl 0x7fb53738c798 SaveError>) [0 SaveError S1 A8])
            (const_int 0 [0]))) db/c.cc:185 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 2 [0x2])
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("SaveError") [flags 0x3]  <function_decl 0x7fb53738c798 SaveError>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       5 (ABNORMAL,ABNORMAL_CALL,EH)
;;              3 [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp] 16 [argp]
;; live  out 	 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(note 28 27 29 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 29 28 30 3 (set (reg/f:DI 5 di [orig:90 D.37084 ] [90])
        (mem/f/c:DI (reg/f:DI 7 sp) [3 D.31309.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn 30 29 31 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:90 D.37084 ] [90])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 31 30 32 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 53)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 53)
;;  succ:       4 [78.3%]  (FALLTHRU)
;;              9 [21.6%] 
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 7835, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [78.3%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 32 31 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn 34 32 78 4 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 78 34 79 4 (set (pc)
        (label_ref 53)) db/c.cc:186 654 {jump}
     (nil)
 -> 53)
;;  succ:       9 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 79 78 63)
;; basic block 5, loop depth 0, count 0, freq 0
;;  prev block 4, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 5 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 5 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 7 [sp] 16 [argp]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  kill	
(code_label/s 63 79 65 5 144 "" [1 uses])
(note 65 63 64 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 64 65 41 5 (set (reg:DI 3 bx [104])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (nil))
(insn 41 64 42 5 (set (reg/f:DI 5 di [orig:92 D.37084 ] [92])
        (mem/f/c:DI (reg/f:DI 7 sp) [3 D.31309.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn 42 41 43 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:92 D.37084 ] [92])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 43 42 44 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 47)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (int_list:REG_BR_PROB 3017 (nil))
 -> 47)
;;  succ:       7 [69.8%]  (FALLTHRU)
;;              8 [30.2%] 
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

;; basic block 7, loop depth 0, count 0, freq 0
;;  prev block 5, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [69.8%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 44 43 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(call_insn 46 44 47 7 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 8, loop depth 0, count 0, freq 0
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [30.2%] 
;;              7 [100.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 47 46 48 8 142 "" [1 uses])
(note 48 47 50 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 50 48 51 8 (set (reg:DI 5 di)
        (reg:DI 3 bx [104])) 89 {*movdi_internal}
     (nil))
(call_insn 51 50 52 8 (call (mem:QI (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>) [0 __builtin_unwind_resume S1 A8])
        (const_int 0 [0])) 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 52 51 53)
;; basic block 9, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [21.6%] 
;;              4 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	 0 [ax]
(code_label 53 52 60 9 139 "" [2 uses])
(note 60 53 55 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 55 60 56 9 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                                (const_int 40 [0x28])) [3 D.37086+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 0 ax [107]))
        ]) db/c.cc:186 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 56 55 61 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 59)
            (pc))) db/c.cc:186 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 59)
;;  succ:       11 [100.0%] 
;;              10 [0.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 10, loop depth 0, count 0, freq 4
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [0.0%]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 61 56 57 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(call_insn 57 61 58 10 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) db/c.cc:186 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 58 57 59)
;; basic block 11, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 10, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 59 58 62 11 143 "" [1 uses])
(note 62 59 80 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 80 62 0 NOTE_INSN_DELETED)

;; Function void leveldb_write(leveldb_t*, const leveldb_writeoptions_t*, leveldb_writebatch_t*, char**) (leveldb_write, funcdef_no=1435, decl_uid=2177, cgraph_uid=542, symbol_order=545)

      Creating newreg=106
Removing SCRATCH in insn #8 (nop 2)
rescanning insn with uid = 8.
      Creating newreg=107
Removing SCRATCH in insn #51 (nop 3)
rescanning insn with uid = 51.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r106
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 25:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) rBwBz {*call}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 51:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r107
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 8
   Insn 47: point = 0
   Insn 46: point = 0
  BB 7
   Insn 42: point = 2
   Insn 41: point = 2
  BB 6
   Insn 39: point = 4
   Insn 38: point = 4
   Insn 37: point = 4
  BB 5
   Insn 60: point = 6
  BB 10
   Insn 53: point = 7
  BB 11
  BB 9
   Insn 52: point = 7
   Insn 51: point = 7
  BB 4
   Insn 74: point = 8
   Insn 30: point = 8
   Insn 29: point = 8
  BB 3
   Insn 27: point = 10
   Insn 26: point = 10
   Insn 25: point = 10
  BB 2
   Insn 23: point = 11
   Insn 22: point = 11
   Insn 21: point = 12
   Insn 19: point = 13
   Insn 18: point = 14
   Insn 17: point = 14
   Insn 16: point = 15
   Insn 15: point = 16
   Insn 13: point = 17
   Insn 12: point = 18
   Insn 11: point = 19
   Insn 8: point = 21
   Insn 5: point = 23
   Insn 4: point = 24
   Insn 3: point = 25
   Insn 2: point = 26
 r87: [14..19]
 r92: [2..4]
 r93: [8..10]
 r95: [20..26]
 r96: [15..25]
 r97: [16..24]
 r98: [11..23]
 r100: [12..18]
 r101: [13..17]
 r104: [0..6]
 r106: [21..22]
 r107: [7..7]
Compressing live ranges: from 27 to 9 - 33%
Ranges after the compression:
 r87: [5..6]
 r92: [0..1]
 r93: [3..4]
 r95: [7..8]
 r96: [5..8]
 r97: [5..8]
 r98: [5..8]
 r100: [5..6]
 r101: [5..6]
 r104: [0..1]
 r106: [7..8]
 r107: [2..2]

********** Inheritance #1: **********

EBB 2 3 4
EBB 5
EBB 6 7
EBB 8
EBB 9
EBB 10
EBB 11

********** Pseudo live ranges #2: **********

  BB 8
   Insn 47: point = 0
   Insn 46: point = 0
  BB 7
   Insn 42: point = 2
   Insn 41: point = 2
  BB 6
   Insn 39: point = 4
   Insn 38: point = 4
   Insn 37: point = 4
  BB 5
   Insn 60: point = 6
  BB 10
   Insn 53: point = 7
  BB 11
  BB 9
   Insn 52: point = 7
   Insn 51: point = 7
  BB 4
   Insn 74: point = 8
   Insn 30: point = 8
   Insn 29: point = 8
  BB 3
   Insn 27: point = 10
   Insn 26: point = 10
   Insn 25: point = 10
  BB 2
   Insn 23: point = 11
   Insn 22: point = 11
   Insn 21: point = 12
   Insn 19: point = 13
   Insn 18: point = 14
   Insn 17: point = 14
   Insn 16: point = 15
   Insn 15: point = 16
   Insn 13: point = 17
   Insn 12: point = 18
   Insn 11: point = 19
   Insn 8: point = 21
   Insn 5: point = 23
   Insn 4: point = 24
   Insn 3: point = 25
   Insn 2: point = 26
 r87: [14..19]
 r92: [2..4]
 r93: [8..10]
 r95: [20..26]
 r96: [15..25]
 r97: [16..24]
 r98: [11..23]
 r100: [12..18]
 r101: [13..17]
 r104: [0..6]
 r106: [21..22]
 r107: [7..7]
Compressing live ranges: from 27 to 9 - 33%
Ranges after the compression:
 r87: [5..6]
 r92: [0..1]
 r93: [3..4]
 r95: [7..8]
 r96: [5..8]
 r97: [5..8]
 r98: [5..8]
 r100: [5..6]
 r101: [5..6]
 r104: [0..1]
 r106: [7..8]
 r107: [2..2]

********** Assignment #1: **********

	 Assigning to 106 (cl=INDEX_REGS, orig=106, freq=1000, tfirst=106, tfreq=1000)...
	   Assign 0 to reload r106 (freq=1000)
	 Assigning to 107 (cl=INDEX_REGS, orig=107, freq=1000, tfirst=107, tfreq=1000)...
	   Assign 0 to reload r107 (freq=1000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=48)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=16, prev_offset=16)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
changing reg in insn 11
changing reg in insn 17
changing reg in insn 13
changing reg in insn 37
changing reg in insn 41
changing reg in insn 38
changing reg in insn 25
changing reg in insn 29
changing reg in insn 26
changing reg in insn 2
changing reg in insn 11
changing reg in insn 3
changing reg in insn 16
changing reg in insn 4
changing reg in insn 15
changing reg in insn 5
changing reg in insn 22
changing reg in insn 12
changing reg in insn 21
changing reg in insn 18
changing reg in insn 13
changing reg in insn 19
changing reg in insn 60
changing reg in insn 46
changing reg in insn 8
changing reg in insn 51
deleting insn with uid = 2.
deleting insn with uid = 4.
deleting insn with uid = 17.
deleting insn with uid = 29.
deleting insn with uid = 41.


try_optimize_cfg iteration 1

Merging block 6 into block 5...
changing bb of uid 37
  from 6 to 5
changing bb of uid 38
  from 6 to 5
changing bb of uid 39
  from 6 to 5
Merged blocks 5 and 6.
Merged 5 and 6 without moving.


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 19.
verify found no changes in insn with uid = 23.
verify found no changes in insn with uid = 30.
verify found no changes in insn with uid = 42.
verify found no changes in insn with uid = 47.
verify found no changes in insn with uid = 53.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 12 count 11 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 12 count 11 (    1)


void leveldb_write(leveldb_t*, const leveldb_writeoptions_t*, leveldb_writebatch_t*, char**)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={11d,2u} r1={9d,2u} r2={8d,2u} r3={2d,3u} r4={9d,4u} r5={12d,8u} r6={1d,1u} r7={1d,21u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r16={1u} r17={10d,3u} r18={6d} r19={6d} r20={3e} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={8d,1u} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} 
;;    total ref usage 521{470d,48u,3e} in 28{22 regular + 6 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 16 [argp]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 37 [r8]
;; live  kill	 17 [flags]
(note 9 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 3 9 5 2 (set (reg/v/f:DI 37 r8 [orig:96 options ] [96])
        (reg:DI 4 si [ options ])) db/c.cc:193 89 {*movdi_internal}
     (nil))
(insn 5 3 6 2 (set (reg/v/f:DI 6 bp [orig:98 errptr ] [98])
        (reg:DI 2 cx [ errptr ])) db/c.cc:193 89 {*movdi_internal}
     (nil))
(note 6 5 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 6 11 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                        (const_int 8 [0x8])) [3 D.37097+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [106])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) db/c.cc:193 986 {stack_tls_protect_set_di}
     (nil))
(insn 11 8 12 2 (set (reg/f:DI 4 si [orig:87 D.37091 ] [87])
        (mem/f:DI (reg/v/f:DI 5 di [orig:95 db ] [95]) [3 db_2(D)->rep+0 S8 A64])) db/c.cc:194 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 3 bx [100])
        (reg/f:DI 7 sp)) db/c.cc:194 89 {*movdi_internal}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))
(insn 13 12 14 2 (set (reg/f:DI 0 ax [orig:101 _3->_vptr.DB ] [101])
        (mem/f:DI (reg/f:DI 4 si [orig:87 D.37091 ] [87]) [3 _3->_vptr.DB+0 S8 A64])) db/c.cc:194 89 {*movdi_internal}
     (nil))
(note 14 13 15 2 NOTE_INSN_DELETED)
(insn 15 14 16 2 (set (reg:DI 2 cx)
        (reg/v/f:DI 1 dx [orig:97 batch ] [97])) db/c.cc:194 89 {*movdi_internal}
     (nil))
(insn 16 15 18 2 (set (reg:DI 1 dx)
        (reg/v/f:DI 37 r8 [orig:96 options ] [96])) db/c.cc:194 89 {*movdi_internal}
     (nil))
(insn 18 16 19 2 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [100])) db/c.cc:194 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))
(call_insn 19 18 21 2 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:101 _3->_vptr.DB ] [101])
                    (const_int 32 [0x20])) [3 MEM[(int (*__vtbl_ptr_type) () *)_4 + 32B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_5;(struct DB)_3->4) S1 A8])
        (const_int 0 [0])) db/c.cc:194 660 {*call}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 21 19 22 2 (set (reg:DI 4 si)
        (reg/f:DI 3 bx [100])) db/c.cc:194 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))
(insn 22 21 23 2 (set (reg:DI 5 di)
        (reg/v/f:DI 6 bp [orig:98 errptr ] [98])) db/c.cc:194 89 {*movdi_internal}
     (nil))
(call_insn 23 22 24 2 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("SaveError") [flags 0x3]  <function_decl 0x7fb53738c798 SaveError>) [0 SaveError S1 A8])
            (const_int 0 [0]))) db/c.cc:194 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 1 [0x1])
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("SaveError") [flags 0x3]  <function_decl 0x7fb53738c798 SaveError>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       5 (ABNORMAL,ABNORMAL_CALL,EH)
;;              3 [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp] 16 [argp]
;; live  out 	 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(note 24 23 25 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 25 24 26 3 (set (reg/f:DI 5 di [orig:93 D.37096 ] [93])
        (mem/f/c:DI (reg/f:DI 7 sp) [3 D.31316.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn 26 25 27 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:93 D.37096 ] [93])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 27 26 28 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 49)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 49)
;;  succ:       4 [78.3%]  (FALLTHRU)
;;              9 [21.6%] 
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 7835, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [78.3%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 28 27 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn 30 28 74 4 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 74 30 75 4 (set (pc)
        (label_ref 49)) db/c.cc:195 654 {jump}
     (nil)
 -> 49)
;;  succ:       9 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 75 74 59)
;; basic block 5, loop depth 0, count 0, freq 0
;;  prev block 4, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 5 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 5 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 7 [sp] 16 [argp]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  kill	
(code_label/s 59 75 61 5 158 "" [1 uses])
(note 61 59 60 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 60 61 37 5 (set (reg:DI 3 bx [104])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (nil))
(insn 37 60 38 5 (set (reg/f:DI 5 di [orig:92 D.37096 ] [92])
        (mem/f/c:DI (reg/f:DI 7 sp) [3 D.31316.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn 38 37 39 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:92 D.37096 ] [92])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 39 38 40 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 43)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (int_list:REG_BR_PROB 3017 (nil))
 -> 43)
;;  succ:       7 [69.8%]  (FALLTHRU)
;;              8 [30.2%] 
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

;; basic block 7, loop depth 0, count 0, freq 0
;;  prev block 5, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [69.8%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 40 39 42 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(call_insn 42 40 43 7 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 8, loop depth 0, count 0, freq 0
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [30.2%] 
;;              7 [100.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 43 42 44 8 156 "" [1 uses])
(note 44 43 46 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 46 44 47 8 (set (reg:DI 5 di)
        (reg:DI 3 bx [104])) 89 {*movdi_internal}
     (nil))
(call_insn 47 46 48 8 (call (mem:QI (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>) [0 __builtin_unwind_resume S1 A8])
        (const_int 0 [0])) 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 48 47 49)
;; basic block 9, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [21.6%] 
;;              4 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	 0 [ax]
(code_label 49 48 56 9 153 "" [2 uses])
(note 56 49 51 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 51 56 52 9 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                                (const_int 8 [0x8])) [3 D.37097+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 0 ax [107]))
        ]) db/c.cc:195 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 52 51 57 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 55)
            (pc))) db/c.cc:195 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 55)
;;  succ:       11 [100.0%] 
;;              10 [0.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 10, loop depth 0, count 0, freq 4
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [0.0%]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 57 52 53 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(call_insn 53 57 54 10 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) db/c.cc:195 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 54 53 55)
;; basic block 11, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 10, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 55 54 58 11 157 "" [1 uses])
(note 58 55 76 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 76 58 0 NOTE_INSN_DELETED)

;; Function char* leveldb_get(leveldb_t*, const leveldb_readoptions_t*, const char*, size_t, size_t*, char**) (leveldb_get, funcdef_no=1436, decl_uid=2184, cgraph_uid=543, symbol_order=546)

      Creating newreg=134
Removing SCRATCH in insn #10 (nop 2)
rescanning insn with uid = 10.
      Creating newreg=135
Removing SCRATCH in insn #126 (nop 3)
rescanning insn with uid = 126.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=128, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=80, prev_offset=0)
Can eliminate 20 to 6 (offset=-40, prev_offset=0)
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r134
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 15:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 16:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 19:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 23:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 24:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 27:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 35:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 36:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 40:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 45:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 52:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 59:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) qm  (1) qn {*cmpqi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 67:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 69:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 73:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 79:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 80:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 12:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 84:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 85:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 89:  (0) rBwBz {*call}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r135
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 98:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 102:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 109:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 111:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 121:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 128:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 21
   Insn 121: point = 0
   Insn 120: point = 0
  BB 20
   Insn 116: point = 2
   Insn 115: point = 2
  BB 19
   Insn 113: point = 4
   Insn 112: point = 4
   Insn 111: point = 5
   Insn 109: point = 7
  BB 17
   Insn 170: point = 9
   Insn 105: point = 9
  BB 16
   Insn 102: point = 12
   Insn 101: point = 12
  BB 15
   Insn 99: point = 14
   Insn 98: point = 14
   Insn 97: point = 14
  BB 14
   Insn 142: point = 16
  BB 18
   Insn 136: point = 18
  BB 22
   Insn 128: point = 20
  BB 13
   Insn 168: point = 20
  BB 23
   Insn 131: point = 20
  BB 12
   Insn 127: point = 20
   Insn 126: point = 20
   Insn 124: point = 21
  BB 11
   Insn 89: point = 23
   Insn 88: point = 23
  BB 10
   Insn 86: point = 25
   Insn 85: point = 25
   Insn 84: point = 26
  BB 8
   Insn 164: point = 29
   Insn 11: point = 29
   Insn 73: point = 30
  BB 9
   Insn 12: point = 32
   Insn 80: point = 33
   Insn 79: point = 34
   Insn 78: point = 34
  BB 7
   Insn 71: point = 36
   Insn 70: point = 36
   Insn 69: point = 36
  BB 6
   Insn 67: point = 38
   Insn 66: point = 38
   Insn 65: point = 39
  BB 5
   Insn 62: point = 41
   Insn 61: point = 41
   Insn 59: point = 41
  BB 4
   Insn 162: point = 43
   Insn 52: point = 43
   Insn 51: point = 43
   Insn 50: point = 43
   Insn 49: point = 43
   Insn 45: point = 44
   Insn 43: point = 45
   Insn 42: point = 46
   Insn 41: point = 46
   Insn 40: point = 46
   Insn 39: point = 47
  BB 3
   Insn 37: point = 49
   Insn 36: point = 49
   Insn 35: point = 49
  BB 2
   Insn 33: point = 51
   Insn 32: point = 52
   Insn 31: point = 52
   Insn 30: point = 53
   Insn 29: point = 54
   Insn 28: point = 55
   Insn 27: point = 55
   Insn 25: point = 56
   Insn 24: point = 57
   Insn 23: point = 58
   Insn 22: point = 59
   Insn 21: point = 61
   Insn 20: point = 62
   Insn 19: point = 64
   Insn 18: point = 64
   Insn 17: point = 64
   Insn 16: point = 65
   Insn 15: point = 66
   Insn 10: point = 67
   Insn 7: point = 69
   Insn 6: point = 70
   Insn 5: point = 71
   Insn 4: point = 72
   Insn 3: point = 73
   Insn 2: point = 74
 r87: [52..62]
 r89: [51..59]
 r91: [2..7]
 r92: [12..14]
 r93: [49..49] [41..42] [34..36]
 r94: [43..47]
 r98: [43..44] [32..33] [23..30]
 r99: [43..45] [32..32] [21..29]
 r101: [63..74]
 r102: [53..73]
 r103: [58..72]
 r104: [57..71]
 r105: [46..70] [41..42]
 r106: [49..69] [38..42]
 r109: [64..65]
 r110: [60..61]
 r113: [54..55]
 r123: [25..26]
 r125: [18..18] [0..9]
 r126: [10..16]
 r130: [4..5]
 r132: [27..66] [6..19]
 r133: [49..56] [39..42]
 r134: [67..68]
 r135: [20..20]
Compressing live ranges: from 75 to 34 - 45%
Ranges after the compression:
 r87: [24..29]
 r89: [24..27]
 r91: [0..3]
 r92: [4..5]
 r93: [23..23] [15..18]
 r94: [19..22]
 r98: [19..20] [9..14]
 r99: [19..20] [9..13]
 r101: [30..33]
 r102: [24..33]
 r103: [26..33]
 r104: [26..33]
 r105: [21..33] [17..18]
 r106: [23..33] [17..18]
 r109: [30..31]
 r110: [28..29]
 r113: [24..25]
 r123: [9..10]
 r125: [6..6] [0..3]
 r126: [4..5]
 r130: [0..1]
 r132: [11..31] [2..7]
 r133: [23..25] [17..18]
 r134: [32..33]
 r135: [8..8]

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5 6 7
EBB 8
EBB 9
EBB 10 11
EBB 12
EBB 13
EBB 14
EBB 15 16
EBB 17
EBB 18
EBB 19 20
EBB 21
EBB 22
EBB 23

********** Pseudo live ranges #2: **********

  BB 21
   Insn 121: point = 0
   Insn 120: point = 0
  BB 20
   Insn 116: point = 2
   Insn 115: point = 2
  BB 19
   Insn 113: point = 4
   Insn 112: point = 4
   Insn 111: point = 5
   Insn 109: point = 7
  BB 17
   Insn 170: point = 9
   Insn 105: point = 9
  BB 16
   Insn 102: point = 12
   Insn 101: point = 12
  BB 15
   Insn 99: point = 14
   Insn 98: point = 14
   Insn 97: point = 14
  BB 14
   Insn 142: point = 16
  BB 18
   Insn 136: point = 18
  BB 22
   Insn 128: point = 20
  BB 13
   Insn 168: point = 20
  BB 23
   Insn 131: point = 20
  BB 12
   Insn 127: point = 20
   Insn 126: point = 20
   Insn 124: point = 21
  BB 11
   Insn 89: point = 23
   Insn 88: point = 23
  BB 10
   Insn 86: point = 25
   Insn 85: point = 25
   Insn 84: point = 26
  BB 8
   Insn 164: point = 29
   Insn 11: point = 29
   Insn 73: point = 30
  BB 9
   Insn 12: point = 32
   Insn 80: point = 33
   Insn 79: point = 34
   Insn 78: point = 34
  BB 7
   Insn 71: point = 36
   Insn 70: point = 36
   Insn 69: point = 36
  BB 6
   Insn 67: point = 38
   Insn 66: point = 38
   Insn 65: point = 39
  BB 5
   Insn 62: point = 41
   Insn 61: point = 41
   Insn 59: point = 41
  BB 4
   Insn 162: point = 43
   Insn 52: point = 43
   Insn 51: point = 43
   Insn 50: point = 43
   Insn 49: point = 43
   Insn 45: point = 44
   Insn 43: point = 45
   Insn 42: point = 46
   Insn 41: point = 46
   Insn 40: point = 46
   Insn 39: point = 47
  BB 3
   Insn 37: point = 49
   Insn 36: point = 49
   Insn 35: point = 49
  BB 2
   Insn 33: point = 51
   Insn 32: point = 52
   Insn 31: point = 52
   Insn 30: point = 53
   Insn 29: point = 54
   Insn 28: point = 55
   Insn 27: point = 55
   Insn 25: point = 56
   Insn 24: point = 57
   Insn 23: point = 58
   Insn 22: point = 59
   Insn 21: point = 61
   Insn 20: point = 62
   Insn 19: point = 64
   Insn 18: point = 64
   Insn 17: point = 64
   Insn 16: point = 65
   Insn 15: point = 66
   Insn 10: point = 67
   Insn 7: point = 69
   Insn 6: point = 70
   Insn 5: point = 71
   Insn 4: point = 72
   Insn 3: point = 73
   Insn 2: point = 74
 r87: [52..62]
 r89: [51..59]
 r91: [2..7]
 r92: [12..14]
 r93: [49..49] [41..42] [34..36]
 r94: [43..47]
 r98: [43..44] [32..33] [23..30]
 r99: [43..45] [32..32] [21..29]
 r101: [63..74]
 r102: [53..73]
 r103: [58..72]
 r104: [57..71]
 r105: [46..70] [41..42]
 r106: [49..69] [38..42]
 r109: [64..65]
 r110: [60..61]
 r113: [54..55]
 r123: [25..26]
 r125: [18..18] [0..9]
 r126: [10..16]
 r130: [4..5]
 r132: [27..66] [6..19]
 r133: [49..56] [39..42]
 r134: [67..68]
 r135: [20..20]
Compressing live ranges: from 75 to 34 - 45%
Ranges after the compression:
 r87: [24..29]
 r89: [24..27]
 r91: [0..3]
 r92: [4..5]
 r93: [23..23] [15..18]
 r94: [19..22]
 r98: [19..20] [9..14]
 r99: [19..20] [9..13]
 r101: [30..33]
 r102: [24..33]
 r103: [26..33]
 r104: [26..33]
 r105: [21..33] [17..18]
 r106: [23..33] [17..18]
 r109: [30..31]
 r110: [28..29]
 r113: [24..25]
 r123: [9..10]
 r125: [6..6] [0..3]
 r126: [4..5]
 r130: [0..1]
 r132: [11..31] [2..7]
 r133: [23..25] [17..18]
 r134: [32..33]
 r135: [8..8]

********** Assignment #1: **********

	 Assigning to 134 (cl=INDEX_REGS, orig=134, freq=1000, tfirst=134, tfreq=1000)...
	   Assign 0 to reload r134 (freq=1000)
	 Assigning to 135 (cl=INDEX_REGS, orig=135, freq=1000, tfirst=135, tfreq=1000)...
	   Assign 1 to reload r135 (freq=1000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=128, prev_offset=128)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=80, prev_offset=80)
Can eliminate 20 to 6 (offset=-40, prev_offset=0)
changing reg in insn 20
changing reg in insn 31
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
changing reg in insn 33
changing reg in insn 109
changing reg in insn 115
changing reg in insn 112
changing reg in insn 97
changing reg in insn 101
changing reg in insn 98
changing reg in insn 69
changing reg in insn 35
changing reg in insn 61
changing reg in insn 78
changing reg in insn 70
changing reg in insn 36
changing reg in insn 39
changing reg in insn 49
changing reg in insn 41
changing reg in insn 40
changing reg in insn 80
changing reg in insn 73
changing reg in insn 45
changing reg in insn 50
changing reg in insn 88
changing reg in insn 85
changing reg in insn 43
changing reg in insn 12
changing reg in insn 11
changing reg in insn 124
changing reg in insn 51
changing reg in insn 2
changing reg in insn 20
changing reg in insn 3
changing reg in insn 30
changing reg in insn 4
changing reg in insn 23
changing reg in insn 5
changing reg in insn 24
changing reg in insn 6
changing reg in insn 59
changing reg in insn 40
changing reg in insn 7
changing reg in insn 66
changing reg in insn 16
changing reg in insn 17
changing reg in insn 21
changing reg in insn 22
changing reg in insn 27
changing reg in insn 29
changing reg in insn 84
changing reg in insn 85
changing reg in insn 136
changing reg in insn 105
changing reg in insn 120
changing reg in insn 142
changing reg in insn 105
changing reg in insn 111
changing reg in insn 112
changing reg in insn 15
changing reg in insn 111
changing reg in insn 84
changing reg in insn 28
changing reg in insn 16
changing reg in insn 25
changing reg in insn 65
changing reg in insn 32
changing reg in insn 10
changing reg in insn 126
deleting insn with uid = 2.
deleting insn with uid = 4.
deleting insn with uid = 5.
deleting insn with uid = 29.
deleting insn with uid = 31.
deleting insn with uid = 78.
deleting insn with uid = 101.
deleting insn with uid = 105.
deleting insn with uid = 115.


try_optimize_cfg iteration 1

Forwarding edge 12->13 to 22 failed.
Merging block 15 into block 14...
changing bb of uid 97
  from 15 to 14
changing bb of uid 98
  from 15 to 14
changing bb of uid 99
  from 15 to 14
Merged blocks 14 and 15.
Merged 14 and 15 without moving.
Edge 14->17 redirected to 19
Merging block 17 into block 16...
changing bb of uid 170
  from 17 to 16
Merged blocks 16 and 17.
Merged 16 and 17 without moving.


try_optimize_cfg iteration 2

Forwarding edge 12->13 to 22 failed.


try_optimize_cfg iteration 1

Forwarding edge 12->13 to 22 failed.
starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 33.
verify found no changes in insn with uid = 42.
verify found no changes in insn with uid = 52.
verify found no changes in insn with uid = 67.
verify found no changes in insn with uid = 79.
verify found no changes in insn with uid = 89.
verify found no changes in insn with uid = 102.
verify found no changes in insn with uid = 116.
verify found no changes in insn with uid = 121.
verify found no changes in insn with uid = 128.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 28 count 22 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 22 n_edges 28 count 22 (    1)


char* leveldb_get(leveldb_t*, const leveldb_readoptions_t*, const char*, size_t, size_t*, char**)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 39[r10] 41[r12] 42[r13]
;;  ref usage 	r0={18d,8u} r1={16d,3u} r2={12d,2u} r3={3d,6u} r4={14d,5u,1e} r5={21d,15u} r6={6d,6u} r7={1d,49u} r8={10d} r9={10d} r10={10d} r11={10d} r12={10d} r13={10d} r14={10d} r15={10d} r16={2u} r17={23d,7u} r18={10d} r19={10d} r20={7e} r21={11d} r22={11d} r23={11d} r24={11d} r25={11d} r26={11d} r27={11d} r28={11d} r29={10d} r30={10d} r31={10d} r32={10d} r33={10d} r34={10d} r35={10d} r36={10d} r37={12d,2u} r38={11d,1u} r39={11d,1u} r40={10d} r41={4d,4u} r42={2d,4u} r45={10d} r46={10d} r47={10d} r48={10d} r49={10d} r50={10d} r51={10d} r52={10d} r53={10d} r54={10d} r55={10d} r56={10d} r57={10d} r58={10d} r59={10d} r60={10d} r61={10d} r62={10d} r63={10d} r64={10d} r65={10d} r66={10d} r67={10d} r68={10d} r69={10d} r70={10d} r71={10d} r72={10d} r73={10d} r74={10d} r75={10d} r76={10d} r77={10d} r78={10d} r79={10d} r80={10d} 
;;    total ref usage 915{792d,115u,8e} in 74{64 regular + 10 call} insns.
(note 1 0 13 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 16 [argp] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 37 [r8] 39 [r10] 41 [r12] 42 [r13]
;; live  kill	 17 [flags]
(note 13 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 3 13 6 2 (set (reg/v/f:DI 39 r10 [orig:102 options ] [102])
        (reg:DI 4 si [ options ])) db/c.cc:202 89 {*movdi_internal}
     (nil))
(insn 6 3 7 2 (set (reg/v/f:DI 41 r12 [orig:105 vallen ] [105])
        (reg:DI 37 r8 [ vallen ])) db/c.cc:202 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/v/f:DI 42 r13 [orig:106 errptr ] [106])
        (reg:DI 38 r9 [ errptr ])) db/c.cc:202 89 {*movdi_internal}
     (nil))
(note 8 7 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 8 15 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                        (const_int 72 [0x48])) [3 D.37118+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [134])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) db/c.cc:202 986 {stack_tls_protect_set_di}
     (nil))
(insn 15 10 16 2 (parallel [
            (set (reg/f:DI 3 bx [132])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:109 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(insn 16 15 17 2 (parallel [
            (set (reg/f:DI 0 ax [109])
                (plus:DI (reg/f:DI 3 bx [132])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:109 218 {*adddi_1}
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [3 MEM[(struct _Alloc_hider *)&tmp]._M_p+0 S8 A128])
        (nil)))
(insn 17 16 18 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [3 MEM[(struct _Alloc_hider *)&tmp]._M_p+0 S8 A128])
        (reg/f:DI 0 ax [109])) /usr/include/c++/5/bits/basic_string.h:109 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [9 MEM[(size_type *)&tmp + 8B]+0 S8 A64])
        (const_int 0 [0])) /usr/include/c++/5/bits/basic_string.h:131 89 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (mem/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [0 MEM[(char_type &)&tmp + 16]+0 S1 A128])
        (const_int 0 [0])) /usr/include/c++/5/bits/char_traits.h:243 93 {*movqi_internal}
     (nil))
(insn 20 19 21 2 (set (reg/f:DI 4 si [orig:87 D.37109 ] [87])
        (mem/f:DI (reg/v/f:DI 5 di [orig:101 db ] [101]) [3 db_6(D)->rep+0 S8 A64])) db/c.cc:205 89 {*movdi_internal}
     (nil))
(insn 21 20 22 2 (set (reg/f:DI 0 ax [orig:110 _7->_vptr.DB ] [110])
        (mem/f:DI (reg/f:DI 4 si [orig:87 D.37109 ] [87]) [3 _7->_vptr.DB+0 S8 A64])) db/c.cc:205 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 4 si [orig:87 D.37109 ] [87]) [3 _7->_vptr.DB+0 S8 A64])
        (nil)))
(insn 22 21 23 2 (set (reg/f:DI 0 ax [orig:89 D.37111 ] [89])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:110 _7->_vptr.DB ] [110])
                (const_int 40 [0x28])) [3 MEM[(int (*__vtbl_ptr_type) () *)_8 + 40B]+0 S8 A64])) db/c.cc:205 89 {*movdi_internal}
     (nil))
(insn 23 22 24 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [3 D.31380.data_+0 S8 A128])
        (reg/v/f:DI 1 dx [orig:103 key ] [103])) ./include/leveldb/slice.h:31 89 {*movdi_internal}
     (nil))
(insn 24 23 25 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [9 D.31380.size_+0 S8 A64])
        (reg/v:DI 2 cx [orig:104 keylen ] [104])) ./include/leveldb/slice.h:31 89 {*movdi_internal}
     (nil))
(insn 25 24 27 2 (set (reg/f:DI 6 bp [133])
        (reg/f:DI 7 sp)) db/c.cc:205 89 {*movdi_internal}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -80 [0xffffffffffffffb0]))
        (nil)))
(insn 27 25 28 2 (parallel [
            (set (reg/f:DI 2 cx [113])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) db/c.cc:205 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
(insn 28 27 30 2 (set (reg:DI 37 r8)
        (reg/f:DI 3 bx [132])) db/c.cc:205 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(insn 30 28 32 2 (set (reg:DI 1 dx)
        (reg/v/f:DI 39 r10 [orig:102 options ] [102])) db/c.cc:205 89 {*movdi_internal}
     (nil))
(insn 32 30 33 2 (set (reg:DI 5 di)
        (reg/f:DI 6 bp [133])) db/c.cc:205 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -80 [0xffffffffffffffb0]))
        (nil)))
(call_insn 33 32 34 2 (call (mem:QI (reg/f:DI 0 ax [orig:89 D.37111 ] [89]) [0 *OBJ_TYPE_REF(_9;(struct DB)_7->5) S1 A8])
        (const_int 0 [0])) db/c.cc:205 660 {*call}
     (expr_list:REG_EH_REGION (const_int 2 [0x2])
        (expr_list:REG_CALL_DECL (nil)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (expr_list:DI (use (reg:DI 37 r8))
                        (nil)))))))
;;  succ:       18 (ABNORMAL,ABNORMAL_CALL,EH)
;;              3 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

;; basic block 3, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(note 34 33 35 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 3 (set (reg/f:DI 5 di [orig:93 D.37114 ] [93])
        (mem/f/c:DI (reg/f:DI 7 sp) [3 s.state_+0 S8 A128])) ./include/leveldb/status.h:52 89 {*movdi_internal}
     (nil))
(insn 36 35 37 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:93 D.37114 ] [93])
            (const_int 0 [0]))) db/c.cc:206 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 37 36 38 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 57)
            (pc))) db/c.cc:206 612 {*jcc_1}
     (int_list:REG_BR_PROB 9328 (nil))
 -> 57)
;;  succ:       4 [6.7%]  (FALLTHRU)
;;              5 [93.3%] 
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

;; basic block 4, loop depth 0, count 0, freq 672, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [6.7%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 41 [r12]
;; lr  use 	 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 6 [bp] 41 [r12] 42 [r13]
;; live  kill	
(note 38 37 39 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 40 4 (set (reg:DI 42 r13 [orig:94 D.37115 ] [94])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [9 MEM[(long unsigned int *)&tmp + 8B]+0 S8 A64])) 89 {*movdi_internal}
     (nil))
(insn 40 39 41 4 (set (mem:DI (reg/v/f:DI 41 r12 [orig:105 vallen ] [105]) [9 *vallen_16(D)+0 S8 A64])
        (reg:DI 42 r13 [orig:94 D.37115 ] [94])) db/c.cc:207 89 {*movdi_internal}
     (nil))
(insn 41 40 42 4 (set (reg:DI 5 di)
        (reg:DI 42 r13 [orig:94 D.37115 ] [94])) db/c.cc:147 89 {*movdi_internal}
     (nil))
(call_insn 42 41 43 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fb538d21798 malloc>) [0 __builtin_malloc S1 A8])
            (const_int 0 [0]))) db/c.cc:147 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("malloc") [flags 0x41]  <function_decl 0x7fb538d21798 malloc>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 43 42 45 4 (set (reg/v/f:DI 41 r12 [orig:99 result ] [99])
        (reg:DI 0 ax)) db/c.cc:147 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 114)
        (nil)))
(insn 45 43 49 4 (set (reg/f:DI 6 bp [orig:98 D.37113 ] [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [3 MEM[(char * *)&tmp]+0 S8 A128])) 89 {*movdi_internal}
     (nil))
(insn 49 45 50 4 (set (reg:DI 1 dx)
        (reg:DI 42 r13 [orig:94 D.37115 ] [94])) /usr/include/x86_64-linux-gnu/bits/string3.h:53 89 {*movdi_internal}
     (nil))
(insn 50 49 51 4 (set (reg:DI 4 si)
        (reg/f:DI 6 bp [orig:98 D.37113 ] [98])) /usr/include/x86_64-linux-gnu/bits/string3.h:53 89 {*movdi_internal}
     (nil))
(insn 51 50 52 4 (set (reg:DI 5 di)
        (reg/v/f:DI 41 r12 [orig:99 result ] [99])) /usr/include/x86_64-linux-gnu/bits/string3.h:53 89 {*movdi_internal}
     (nil))
(call_insn 52 51 162 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x41]  <function_decl 0x7fb5372f5948 memcpy>) [0 memcpy S1 A8])
            (const_int 0 [0]))) /usr/include/x86_64-linux-gnu/bits/string3.h:53 669 {*call_value}
     (expr_list:REG_RETURNED (reg/v/f:DI 41 r12 [orig:99 result ] [99])
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("memcpy") [flags 0x41]  <function_decl 0x7fb5372f5948 memcpy>)
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(jump_insn 162 52 163 4 (set (pc)
        (label_ref 81)) 654 {jump}
     (nil)
 -> 81)
;;  succ:       10 [100.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

(barrier 163 162 57)
;; basic block 5, loop depth 0, count 0, freq 9328, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [93.3%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13]
;; lr  use 	 5 [di] 7 [sp] 41 [r12]
;; lr  def 	 17 [flags]
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 57 163 58 5 168 "" [1 uses])
(note 58 57 59 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 59 58 60 5 (set (mem:DI (reg/v/f:DI 41 r12 [orig:105 vallen ] [105]) [9 *vallen_16(D)+0 S8 A64])
        (const_int 0 [0])) db/c.cc:210 89 {*movdi_internal}
     (nil))
(note 60 59 61 5 NOTE_INSN_DELETED)
(insn 61 60 62 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:QI (plus:DI (reg/f:DI 5 di [orig:93 D.37114 ] [93])
                    (const_int 4 [0x4])) [0 MEM[(const char *)_5 + 4B]+0 S1 A8])
            (const_int 1 [0x1]))) db/c.cc:211 5 {*cmpqi_1}
     (nil))
(jump_insn 62 61 63 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 76)
            (pc))) db/c.cc:211 612 {*jcc_1}
     (int_list:REG_BR_PROB 1126 (nil))
 -> 76)
;;  succ:       6 [88.7%]  (FALLTHRU)
;;              9 [11.3%] 
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 16 [argp] 42 [r13]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp] 42 [r13]

;; basic block 6, loop depth 0, count 0, freq 8435, maybe hot
;; Invalid sum of incoming frequencies 8278, should be 8435
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [88.7%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 42 [r13]
;; lr  use 	 6 [bp] 7 [sp] 42 [r13]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 42 [r13]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	
(note 63 62 65 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 65 63 66 6 (set (reg:DI 4 si)
        (reg/f:DI 6 bp [133])) db/c.cc:212 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -80 [0xffffffffffffffb0]))
        (nil)))
(insn 66 65 67 6 (set (reg:DI 5 di)
        (reg/v/f:DI 42 r13 [orig:106 errptr ] [106])) db/c.cc:212 89 {*movdi_internal}
     (nil))
(call_insn 67 66 68 6 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("SaveError") [flags 0x3]  <function_decl 0x7fb53738c798 SaveError>) [0 SaveError S1 A8])
            (const_int 0 [0]))) db/c.cc:212 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("SaveError") [flags 0x3]  <function_decl 0x7fb53738c798 SaveError>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       14 (ABNORMAL,ABNORMAL_CALL,EH)
;;              7 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp] 16 [argp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 7, loop depth 0, count 0, freq 8278, maybe hot
;; Invalid sum of incoming frequencies 8435, should be 8278
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [100.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(note 68 67 69 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 69 68 70 7 (set (reg/f:DI 5 di [orig:93 D.37114 ] [93])
        (mem/f/c:DI (reg/f:DI 7 sp) [3 s.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn 70 69 71 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:93 D.37114 ] [93])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 71 70 72 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 76)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (int_list:REG_BR_PROB 7167 (nil))
 -> 76)
;;  succ:       9 [71.7%] 
;;              8 [28.3%]  (FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

;; basic block 8, loop depth 0, count 0, freq 2345, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [28.3%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 6 [bp] 41 [r12]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 6 [bp] 41 [r12]
;; live  kill	
(note 72 71 73 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 73 72 11 8 (set (reg/f:DI 6 bp [orig:98 D.37113 ] [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [3 MEM[(char * *)&tmp]+0 S8 A128])) 89 {*movdi_internal}
     (nil))
(insn 11 73 164 8 (set (reg/v/f:DI 41 r12 [orig:99 result ] [99])
        (const_int 0 [0])) db/c.cc:203 89 {*movdi_internal}
     (nil))
(jump_insn 164 11 165 8 (set (pc)
        (label_ref 81)) 654 {jump}
     (nil)
 -> 81)
;;  succ:       10 [100.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

(barrier 165 164 76)
;; basic block 9, loop depth 0, count 0, freq 6983, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [71.7%] 
;;              5 [11.3%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 6 [bp] 41 [r12]
;; live  kill	
(code_label 76 165 77 9 170 "" [2 uses])
(note 77 76 79 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(call_insn 79 77 80 9 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 80 79 12 9 (set (reg/f:DI 6 bp [orig:98 D.37113 ] [98])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [3 MEM[(char * *)&tmp]+0 S8 A128])) 89 {*movdi_internal}
     (nil))
(insn 12 80 81 9 (set (reg/v/f:DI 41 r12 [orig:99 result ] [99])
        (const_int 0 [0])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
;;  succ:       10 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12]

;; basic block 10, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [100.0%] 
;;              9 [100.0%]  (FALLTHRU)
;;              8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 3 [bx] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 3 [bx] 17 [flags]
;; live  kill	 17 [flags]
(code_label 81 12 82 10 169 "" [2 uses])
(note 82 81 84 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 84 82 85 10 (parallel [
            (set (reg/f:DI 3 bx [123])
                (plus:DI (reg/f:DI 3 bx [132])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:179 218 {*adddi_1}
     (nil))
(insn 85 84 86 10 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 6 bp [orig:98 D.37113 ] [98])
            (reg/f:DI 3 bx [123]))) /usr/include/c++/5/bits/basic_string.h:179 8 {*cmpdi_1}
     (nil))
(jump_insn 86 85 87 10 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 90)
            (pc))) /usr/include/c++/5/bits/basic_string.h:179 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 90)
;;  succ:       11 [78.3%]  (FALLTHRU)
;;              12 [21.6%] 
;; lr  out 	 6 [bp] 7 [sp] 41 [r12]
;; live  out 	 6 [bp] 7 [sp] 41 [r12]

;; basic block 11, loop depth 0, count 0, freq 7835, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [78.3%]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp] 41 [r12]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 6 [bp] 7 [sp] 41 [r12]
;; live  gen 	 5 [di]
;; live  kill	
(note 87 86 88 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 88 87 89 11 (set (reg:DI 5 di)
        (reg/f:DI 6 bp [orig:98 D.37113 ] [98])) /usr/include/c++/5/ext/new_allocator.h:110 89 {*movdi_internal}
     (nil))
(call_insn 89 88 90 11 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/ext/new_allocator.h:110 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       12 [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp] 41 [r12]
;; live  out 	 7 [sp] 41 [r12]

;; basic block 12, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [21.6%] 
;;              11 [100.0%]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 41 [r12]
;; lr  use 	 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 17 [flags]
;; live  in  	 7 [sp] 41 [r12]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 1 [dx]
(code_label 90 89 91 12 171 "" [1 uses])
(note 91 90 124 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 124 91 126 12 (set (reg/i:DI 0 ax)
        (reg/v/f:DI 41 r12 [orig:99 result ] [99])) db/c.cc:216 89 {*movdi_internal}
     (nil))
(insn 126 124 127 12 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                                (const_int 72 [0x48])) [3 D.37118+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 1 dx [135]))
        ]) db/c.cc:216 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 127 126 166 12 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 130)
            (pc))) db/c.cc:216 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 130)
;;  succ:       23 [100.0%] 
;;              13 [0.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 13, loop depth 0, count 0, freq 4
;;  prev block 12, next block 14, flags: (NEW, REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       12 [0.0%]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 166 127 168 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(jump_insn 168 166 169 13 (set (pc)
        (label_ref 167)) 654 {jump}
     (nil)
 -> 167)
;;  succ:       22 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 169 168 141)
;; basic block 14, loop depth 0, count 0, freq 0
;;  prev block 13, next block 16, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 14 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 14 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 3 [bx] 7 [sp] 16 [argp]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	
(code_label/s 141 169 144 14 178 "" [1 uses])
(note 144 141 142 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 142 144 97 14 (set (reg:DI 6 bp [126])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (nil))
(insn 97 142 98 14 (set (reg/f:DI 5 di [orig:92 D.37114 ] [92])
        (mem/f/c:DI (reg/f:DI 7 sp) [3 s.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn 98 97 99 14 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:92 D.37114 ] [92])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 99 98 100 14 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 107)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (int_list:REG_BR_PROB 3017 (nil))
 -> 107)
;;  succ:       16 [69.8%]  (FALLTHRU)
;;              19 [30.2%] 
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 16, loop depth 0, count 0, freq 0
;;  prev block 14, next block 18, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       14 [69.8%]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(note 100 99 102 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(call_insn 102 100 170 16 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 170 102 171 16 (set (pc)
        (label_ref 107)) 654 {jump}
     (nil)
 -> 107)
;;  succ:       19 [100.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

(barrier 171 170 135)
;; basic block 18, loop depth 0, count 0, freq 0
;;  prev block 16, next block 19, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 18 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 18 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 3 [bx] 7 [sp] 16 [argp]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 6 [bp]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 6 [bp]
;; live  kill	
(code_label/s 135 171 140 18 177 "" [1 uses])
(note 140 135 136 18 [bb 18] NOTE_INSN_BASIC_BLOCK)
(insn 136 140 107 18 (set (reg:DI 6 bp [125])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (nil))
;;  succ:       19 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 19, loop depth 0, count 0, freq 0
;;  prev block 18, next block 20, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       18 [100.0%]  (FALLTHRU)
;;              16 [100.0%] 
;;              14 [30.2%] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 3 [bx] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 3 [bx] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 107 136 108 19 174 "" [2 uses])
(note 108 107 109 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(insn 109 108 111 19 (set (reg/f:DI 5 di [orig:91 D.37113 ] [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [3 MEM[(char * *)&tmp]+0 S8 A128])) 89 {*movdi_internal}
     (nil))
(insn 111 109 112 19 (parallel [
            (set (reg/f:DI 3 bx [130])
                (plus:DI (reg/f:DI 3 bx [132])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:179 218 {*adddi_1}
     (nil))
(insn 112 111 113 19 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:91 D.37113 ] [91])
            (reg/f:DI 3 bx [130]))) /usr/include/c++/5/bits/basic_string.h:179 8 {*cmpdi_1}
     (nil))
(jump_insn 113 112 114 19 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 117)
            (pc))) /usr/include/c++/5/bits/basic_string.h:179 612 {*jcc_1}
     (int_list:REG_BR_PROB 3017 (nil))
 -> 117)
;;  succ:       20 [69.8%]  (FALLTHRU)
;;              21 [30.2%] 
;; lr  out 	 5 [di] 6 [bp] 7 [sp]
;; live  out 	 5 [di] 6 [bp] 7 [sp]

;; basic block 20, loop depth 0, count 0, freq 0
;;  prev block 19, next block 21, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       19 [69.8%]  (FALLTHRU)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(note 114 113 116 20 [bb 20] NOTE_INSN_BASIC_BLOCK)
(call_insn 116 114 117 20 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/ext/new_allocator.h:110 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       21 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

;; basic block 21, loop depth 0, count 0, freq 0
;;  prev block 20, next block 22, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       19 [30.2%] 
;;              20 [100.0%]  (FALLTHRU)
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 117 116 118 21 175 "" [1 uses])
(note 118 117 120 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 120 118 121 21 (set (reg:DI 5 di)
        (reg:DI 6 bp [125])) 89 {*movdi_internal}
     (nil))
(call_insn 121 120 122 21 (call (mem:QI (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>) [0 __builtin_unwind_resume S1 A8])
        (const_int 0 [0])) 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 122 121 167)
;; basic block 22, loop depth 0, count 0, freq 4
;;  prev block 21, next block 23, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       13 [100.0%] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 167 122 133 22 185 "" [1 uses])
(note 133 167 128 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(call_insn 128 133 129 22 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) db/c.cc:216 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 129 128 130)
;; basic block 23, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 22, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       12 [100.0%] 
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 130 129 134 23 176 "" [1 uses])
(note 134 130 131 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(insn 131 134 172 23 (use (reg/i:DI 0 ax)) db/c.cc:216 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 172 131 0 NOTE_INSN_DELETED)

;; Function leveldb_iterator_t* leveldb_create_iterator(leveldb_t*, const leveldb_readoptions_t*) (leveldb_create_iterator, funcdef_no=1437, decl_uid=2187, cgraph_uid=544, symbol_order=547)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 7:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 24: point = 0
   Insn 23: point = 0
   Insn 18: point = 1
   Insn 17: point = 2
   Insn 16: point = 3
   Insn 15: point = 4
   Insn 14: point = 5
   Insn 12: point = 6
   Insn 11: point = 7
   Insn 9: point = 9
   Insn 8: point = 10
   Insn 7: point = 10
   Insn 3: point = 10
   Insn 2: point = 11
Compressing live ranges: from 12 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
changing reg in insn 11
changing reg in insn 15
changing reg in insn 12
changing reg in insn 17
changing reg in insn 18
changing reg in insn 2
changing reg in insn 11
changing reg in insn 3
changing reg in insn 14
changing reg in insn 9
changing reg in insn 23
changing reg in insn 18
changing reg in insn 17
changing reg in insn 12
changing reg in insn 16
deleting insn with uid = 15.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
rescanning insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


leveldb_iterator_t* leveldb_create_iterator(leveldb_t*, const leveldb_readoptions_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 41[r12]
;;  ref usage 	r0={6d,6u} r1={3d} r2={3d} r3={1d,2u,1e} r4={4d,2u} r5={5d,4u} r6={1d,1u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r41={1d,1u} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 190{169d,20u,1e} in 13{11 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp] 41 [r12]
;; live  kill	
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 5 3 2 (set (reg/v/f:DI 41 r12 [orig:94 db ] [94])
        (reg:DI 5 di [ db ])) db/c.cc:220 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg/v/f:DI 6 bp [orig:95 options ] [95])
        (reg:DI 4 si [ options ])) db/c.cc:220 89 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg:DI 5 di)
        (const_int 8 [0x8])) db/c.cc:221 89 {*movdi_internal}
     (nil))
(call_insn 8 7 9 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>) [0 operator new S1 A8])
            (const_int 0 [0]))) db/c.cc:221 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 9 8 11 2 (set (reg/f:DI 3 bx [96])
        (reg:DI 0 ax)) db/c.cc:221 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 3 bx [96])
        (nil)))
(insn 11 9 12 2 (set (reg/f:DI 5 di [orig:88 D.37127 ] [88])
        (mem/f:DI (reg/v/f:DI 41 r12 [orig:94 db ] [94]) [3 db_4(D)->rep+0 S8 A64])) db/c.cc:222 89 {*movdi_internal}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [orig:97 _5->_vptr.DB ] [97])
        (mem/f:DI (reg/f:DI 5 di [orig:88 D.37127 ] [88]) [3 _5->_vptr.DB+0 S8 A64])) db/c.cc:222 89 {*movdi_internal}
     (nil))
(note 13 12 14 2 NOTE_INSN_DELETED)
(insn 14 13 16 2 (set (reg:DI 4 si)
        (reg/v/f:DI 6 bp [orig:95 options ] [95])) db/c.cc:222 89 {*movdi_internal}
     (nil))
(call_insn 16 14 17 2 (set (reg:DI 0 ax)
        (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:97 _5->_vptr.DB ] [97])
                        (const_int 48 [0x30])) [3 MEM[(int (*__vtbl_ptr_type) () *)_6 + 48B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_7;(struct DB)_5->6) S1 A8])
            (const_int 0 [0]))) db/c.cc:222 669 {*call_value}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 17 16 18 2 (set (reg/f:DI 0 ax [orig:92 D.37131 ] [92])
        (reg:DI 0 ax)) db/c.cc:222 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 3 bx [96]) [3 result_3->rep+0 S8 A64])
        (nil)))
(insn 18 17 23 2 (set (mem/f:DI (reg/f:DI 3 bx [96]) [3 result_3->rep+0 S8 A64])
        (reg/f:DI 0 ax [orig:92 D.37131 ] [92])) db/c.cc:222 89 {*movdi_internal}
     (nil))
(insn 23 18 24 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 3 bx [96])) db/c.cc:224 89 {*movdi_internal}
     (nil))
(insn 24 23 26 2 (use (reg/i:DI 0 ax)) db/c.cc:224 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 26 24 0 NOTE_INSN_DELETED)

;; Function const leveldb_snapshot_t* leveldb_create_snapshot(leveldb_t*) (leveldb_create_snapshot, funcdef_no=1438, decl_uid=2189, cgraph_uid=545, symbol_order=548)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 6:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) re {*movdi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 22: point = 0
   Insn 21: point = 0
   Insn 16: point = 1
   Insn 15: point = 2
   Insn 14: point = 3
   Insn 13: point = 4
   Insn 11: point = 5
   Insn 10: point = 6
   Insn 8: point = 8
   Insn 7: point = 9
   Insn 6: point = 9
   Insn 2: point = 9
Compressing live ranges: from 10 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
changing reg in insn 10
changing reg in insn 13
changing reg in insn 11
changing reg in insn 15
changing reg in insn 16
changing reg in insn 2
changing reg in insn 10
changing reg in insn 8
changing reg in insn 21
changing reg in insn 16
changing reg in insn 15
changing reg in insn 11
changing reg in insn 14
deleting insn with uid = 13.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 7.
rescanning insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


const leveldb_snapshot_t* leveldb_create_snapshot(leveldb_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={6d,6u} r1={3d} r2={3d} r3={1d,2u,1e} r4={3d} r5={5d,4u} r6={1d,1u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 185{167d,17u,1e} in 11{9 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp]
;; live  kill	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v/f:DI 6 bp [orig:93 db ] [93])
        (reg:DI 5 di [ db ])) db/c.cc:227 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 5 di)
        (const_int 8 [0x8])) db/c.cc:228 89 {*movdi_internal}
     (nil))
(call_insn 7 6 8 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>) [0 operator new S1 A8])
            (const_int 0 [0]))) db/c.cc:228 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 8 7 10 2 (set (reg/f:DI 3 bx [94])
        (reg:DI 0 ax)) db/c.cc:228 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 3 bx [94])
        (nil)))
(insn 10 8 11 2 (set (reg/f:DI 5 di [orig:88 D.37136 ] [88])
        (mem/f:DI (reg/v/f:DI 6 bp [orig:93 db ] [93]) [3 db_4(D)->rep+0 S8 A64])) db/c.cc:229 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [orig:95 _5->_vptr.DB ] [95])
        (mem/f:DI (reg/f:DI 5 di [orig:88 D.37136 ] [88]) [3 _5->_vptr.DB+0 S8 A64])) db/c.cc:229 89 {*movdi_internal}
     (nil))
(note 12 11 14 2 NOTE_INSN_DELETED)
(call_insn 14 12 15 2 (set (reg:DI 0 ax)
        (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:95 _5->_vptr.DB ] [95])
                        (const_int 56 [0x38])) [3 MEM[(int (*__vtbl_ptr_type) () *)_6 + 56B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_7;(struct DB)_5->7) S1 A8])
            (const_int 0 [0]))) db/c.cc:229 669 {*call_value}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 15 14 16 2 (set (reg/f:DI 0 ax [orig:91 D.37139 ] [91])
        (reg:DI 0 ax)) db/c.cc:229 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 3 bx [94]) [3 result_3->rep+0 S8 A64])
        (nil)))
(insn 16 15 21 2 (set (mem/f:DI (reg/f:DI 3 bx [94]) [3 result_3->rep+0 S8 A64])
        (reg/f:DI 0 ax [orig:91 D.37139 ] [91])) db/c.cc:229 89 {*movdi_internal}
     (nil))
(insn 21 16 22 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 3 bx [94])) db/c.cc:231 89 {*movdi_internal}
     (nil))
(insn 22 21 24 2 (use (reg/i:DI 0 ax)) db/c.cc:231 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 24 22 0 NOTE_INSN_DELETED)

;; Function void leveldb_release_snapshot(leveldb_t*, const leveldb_snapshot_t*) (leveldb_release_snapshot, funcdef_no=1439, decl_uid=2192, cgraph_uid=546, symbol_order=549)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 14: point = 0
   Insn 13: point = 0
   Insn 12: point = 1
   Insn 11: point = 2
   Insn 10: point = 3
   Insn 8: point = 3
   Insn 7: point = 4
   Insn 3: point = 6
   Insn 2: point = 7
Compressing live ranges: from 8 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 7
changing reg in insn 11
changing reg in insn 8
changing reg in insn 2
changing reg in insn 7
changing reg in insn 3
changing reg in insn 13
changing reg in insn 10
changing reg in insn 8
changing reg in insn 12
deleting insn with uid = 2.
deleting insn with uid = 11.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 12.
verify found no changes in insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_release_snapshot(leveldb_t*, const leveldb_snapshot_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 4[si] 5[di] 7[sp]
;;  ref usage 	r0={4d,1u} r1={3d} r2={3d} r3={1d,2u} r4={4d,2u} r5={5d,4u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 178{165d,13u,0e} in 7{5 regular + 2 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 5 [di]
;; live  kill	
(note 5 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 3 5 4 2 (set (reg/v/f:DI 3 bx [orig:92 snapshot ] [92])
        (reg:DI 4 si [ snapshot ])) db/c.cc:235 89 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 5 di [orig:87 D.37142 ] [87])
        (mem/f:DI (reg/v/f:DI 5 di [orig:91 db ] [91]) [3 db_2(D)->rep+0 S8 A64])) db/c.cc:236 89 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [orig:93 _3->_vptr.DB ] [93])
        (mem/f:DI (reg/f:DI 5 di [orig:87 D.37142 ] [87]) [3 _3->_vptr.DB+0 S8 A64])) db/c.cc:236 89 {*movdi_internal}
     (nil))
(note 9 8 10 2 NOTE_INSN_DELETED)
(insn 10 9 12 2 (set (reg:DI 4 si)
        (mem/f:DI (reg/v/f:DI 3 bx [orig:92 snapshot ] [92]) [3 snapshot_6(D)->rep+0 S8 A64])) db/c.cc:236 89 {*movdi_internal}
     (nil))
(call_insn 12 10 13 2 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:93 _3->_vptr.DB ] [93])
                    (const_int 64 [0x40])) [3 MEM[(int (*__vtbl_ptr_type) () *)_4 + 64B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_5;(struct DB)_3->8) S1 A8])
        (const_int 0 [0])) db/c.cc:236 660 {*call}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 13 12 14 2 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:92 snapshot ] [92])) db/c.cc:237 89 {*movdi_internal}
     (nil))
(call_insn/j 14 13 15 2 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) db/c.cc:237 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 15 14 18)
(note 18 15 0 NOTE_INSN_DELETED)

;; Function char* leveldb_property_value(leveldb_t*, const char*) (leveldb_property_value, funcdef_no=1440, decl_uid=2195, cgraph_uid=547, symbol_order=550)

      Creating newreg=119
Removing SCRATCH in insn #6 (nop 2)
rescanning insn with uid = 6.
      Creating newreg=120
Removing SCRATCH in insn #75 (nop 3)
rescanning insn with uid = 75.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r119
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 10:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 11:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 14:  (0) m  (1) qn {*movqi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 15:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 17:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 24:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 7:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) q {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 37:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 43:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 45:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) rBwBz {*call}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 75:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r120
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 58:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 60:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 61:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 65:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 70:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 77:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 12
   Insn 70: point = 0
   Insn 69: point = 0
  BB 11
   Insn 65: point = 2
   Insn 64: point = 2
  BB 10
   Insn 62: point = 4
   Insn 61: point = 4
   Insn 60: point = 5
   Insn 58: point = 7
  BB 9
   Insn 90: point = 9
  BB 13
   Insn 77: point = 11
  BB 8
   Insn 99: point = 11
  BB 14
   Insn 80: point = 11
  BB 7
   Insn 76: point = 11
   Insn 75: point = 11
   Insn 73: point = 12
  BB 6
   Insn 50: point = 14
   Insn 49: point = 14
  BB 5
   Insn 47: point = 16
   Insn 46: point = 16
   Insn 45: point = 17
   Insn 43: point = 19
  BB 4
   Insn 39: point = 21
   Insn 38: point = 22
   Insn 37: point = 22
  BB 3
   Insn 34: point = 23
   Insn 33: point = 23
   Insn 7: point = 24
   Insn 31: point = 25
  BB 2
   Insn 30: point = 27
   Insn 29: point = 28
   Insn 28: point = 29
   Insn 27: point = 30
   Insn 26: point = 30
   Insn 24: point = 31
   Insn 21: point = 32
   Insn 20: point = 33
   Insn 19: point = 33
   Insn 18: point = 34
   Insn 17: point = 34
   Insn 16: point = 36
   Insn 15: point = 37
   Insn 14: point = 39
   Insn 13: point = 39
   Insn 12: point = 39
   Insn 11: point = 40
   Insn 10: point = 41
   Insn 6: point = 42
   Insn 3: point = 44
   Insn 2: point = 45
 r87: [23..24] [12..21]
 r89: [28..37]
 r91: [27..34]
 r92: [23..25]
 r94: [2..7]
 r95: [14..19]
 r98: [38..45]
 r99: [33..44]
 r102: [39..40]
 r103: [35..36]
 r105: [31..32]
 r108: [29..30]
 r112: [16..17]
 r115: [4..5]
 r116: [0..9]
 r118: [18..41] [6..10]
 r119: [42..43]
 r120: [11..11]
Compressing live ranges: from 46 to 23 - 50%
Ranges after the compression:
 r87: [5..10]
 r89: [11..18]
 r91: [11..16]
 r92: [9..10]
 r94: [0..3]
 r95: [5..8]
 r98: [19..22]
 r99: [15..22]
 r102: [19..20]
 r103: [17..18]
 r105: [13..14]
 r108: [11..12]
 r112: [5..6]
 r115: [0..1]
 r116: [0..3]
 r118: [7..20] [2..3]
 r119: [21..22]
 r120: [4..4]

********** Inheritance #1: **********

EBB 2 3 4
EBB 5 6
EBB 7
EBB 8
EBB 9
EBB 10 11
EBB 12
EBB 13
EBB 14

********** Pseudo live ranges #2: **********

  BB 12
   Insn 70: point = 0
   Insn 69: point = 0
  BB 11
   Insn 65: point = 2
   Insn 64: point = 2
  BB 10
   Insn 62: point = 4
   Insn 61: point = 4
   Insn 60: point = 5
   Insn 58: point = 7
  BB 9
   Insn 90: point = 9
  BB 13
   Insn 77: point = 11
  BB 8
   Insn 99: point = 11
  BB 14
   Insn 80: point = 11
  BB 7
   Insn 76: point = 11
   Insn 75: point = 11
   Insn 73: point = 12
  BB 6
   Insn 50: point = 14
   Insn 49: point = 14
  BB 5
   Insn 47: point = 16
   Insn 46: point = 16
   Insn 45: point = 17
   Insn 43: point = 19
  BB 4
   Insn 39: point = 21
   Insn 38: point = 22
   Insn 37: point = 22
  BB 3
   Insn 34: point = 23
   Insn 33: point = 23
   Insn 7: point = 24
   Insn 31: point = 25
  BB 2
   Insn 30: point = 27
   Insn 29: point = 28
   Insn 28: point = 29
   Insn 27: point = 30
   Insn 26: point = 30
   Insn 24: point = 31
   Insn 21: point = 32
   Insn 20: point = 33
   Insn 19: point = 33
   Insn 18: point = 34
   Insn 17: point = 34
   Insn 16: point = 36
   Insn 15: point = 37
   Insn 14: point = 39
   Insn 13: point = 39
   Insn 12: point = 39
   Insn 11: point = 40
   Insn 10: point = 41
   Insn 6: point = 42
   Insn 3: point = 44
   Insn 2: point = 45
 r87: [23..24] [12..21]
 r89: [28..37]
 r91: [27..34]
 r92: [23..25]
 r94: [2..7]
 r95: [14..19]
 r98: [38..45]
 r99: [33..44]
 r102: [39..40]
 r103: [35..36]
 r105: [31..32]
 r108: [29..30]
 r112: [16..17]
 r115: [4..5]
 r116: [0..9]
 r118: [18..41] [6..10]
 r119: [42..43]
 r120: [11..11]
Compressing live ranges: from 46 to 23 - 50%
Ranges after the compression:
 r87: [5..10]
 r89: [11..18]
 r91: [11..16]
 r92: [9..10]
 r94: [0..3]
 r95: [5..8]
 r98: [19..22]
 r99: [15..22]
 r102: [19..20]
 r103: [17..18]
 r105: [13..14]
 r108: [11..12]
 r112: [5..6]
 r115: [0..1]
 r116: [0..3]
 r118: [7..20] [2..3]
 r119: [21..22]
 r120: [4..4]

********** Assignment #1: **********

	 Assigning to 119 (cl=INDEX_REGS, orig=119, freq=1000, tfirst=119, tfreq=1000)...
	   Assign 0 to reload r119 (freq=1000)
	 Assigning to 120 (cl=INDEX_REGS, orig=120, freq=1000, tfirst=120, tfreq=1000)...
	   Assign 2 to reload r120 (freq=1000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=96, prev_offset=96)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=64, prev_offset=64)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
changing reg in insn 39
changing reg in insn 7
changing reg in insn 73
changing reg in insn 15
changing reg in insn 29
changing reg in insn 16
changing reg in insn 16
changing reg in insn 17
changing reg in insn 30
changing reg in insn 31
changing reg in insn 33
changing reg in insn 58
changing reg in insn 64
changing reg in insn 61
changing reg in insn 43
changing reg in insn 49
changing reg in insn 46
changing reg in insn 2
changing reg in insn 15
changing reg in insn 3
changing reg in insn 19
changing reg in insn 18
changing reg in insn 11
changing reg in insn 12
changing reg in insn 16
changing reg in insn 17
changing reg in insn 21
changing reg in insn 24
changing reg in insn 26
changing reg in insn 28
changing reg in insn 45
changing reg in insn 46
changing reg in insn 60
changing reg in insn 61
changing reg in insn 90
changing reg in insn 69
changing reg in insn 10
changing reg in insn 60
changing reg in insn 45
changing reg in insn 27
changing reg in insn 11
changing reg in insn 6
changing reg in insn 75
deleting insn with uid = 2.
deleting insn with uid = 3.
deleting insn with uid = 28.
deleting insn with uid = 49.
deleting insn with uid = 64.


try_optimize_cfg iteration 1

Forwarding edge 7->8 to 13 failed.
Merging block 10 into block 9...
changing bb of uid 58
  from 10 to 9
changing bb of uid 60
  from 10 to 9
changing bb of uid 61
  from 10 to 9
changing bb of uid 62
  from 10 to 9
Merged blocks 9 and 10.
Merged 9 and 10 without moving.


try_optimize_cfg iteration 2

Forwarding edge 7->8 to 13 failed.


try_optimize_cfg iteration 1

Forwarding edge 7->8 to 13 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 20.
rescanning insn with uid = 30.
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 50.
verify found no changes in insn with uid = 65.
verify found no changes in insn with uid = 70.
verify found no changes in insn with uid = 77.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 16 count 14 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 16 count 14 (    1)


char* leveldb_property_value(leveldb_t*, const char*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 41[r12]
;;  ref usage 	r0={15d,10u} r1={10d,1u} r2={9d} r3={3d,6u} r4={9d,3u} r5={14d,9u} r6={4d,4u,1e} r7={1d,32u} r8={7d} r9={7d} r10={7d} r11={7d} r12={7d} r13={7d} r14={7d} r15={7d} r16={1u} r17={16d,4u} r18={7d} r19={7d} r20={5e} r21={8d} r22={8d} r23={8d} r24={8d} r25={8d} r26={8d} r27={8d} r28={8d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={8d} r38={8d} r39={7d} r40={7d} r41={1d,1u} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} 
;;    total ref usage 631{554d,71u,6e} in 44{37 regular + 7 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp] 16 [argp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp] 41 [r12]
;; live  kill	 17 [flags]
(note 8 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 8 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 4 10 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                        (const_int 56 [0x38])) [3 D.37157+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [119])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) db/c.cc:242 986 {stack_tls_protect_set_di}
     (nil))
(insn 10 6 11 2 (parallel [
            (set (reg/f:DI 3 bx [118])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:109 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(insn 11 10 12 2 (parallel [
            (set (reg/f:DI 0 ax [102])
                (plus:DI (reg/f:DI 3 bx [118])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:109 218 {*adddi_1}
     (expr_list:REG_EQUIV (mem/f/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -48 [0xffffffffffffffd0])) [3 MEM[(struct _Alloc_hider *)&tmp]._M_p+0 S8 A128])
        (nil)))
(insn 12 11 13 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [3 MEM[(struct _Alloc_hider *)&tmp]._M_p+0 S8 A128])
        (reg/f:DI 0 ax [102])) /usr/include/c++/5/bits/basic_string.h:109 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [9 MEM[(size_type *)&tmp + 8B]+0 S8 A64])
        (const_int 0 [0])) /usr/include/c++/5/bits/basic_string.h:131 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [0 MEM[(char_type &)&tmp + 16]+0 S1 A128])
        (const_int 0 [0])) /usr/include/c++/5/bits/char_traits.h:243 93 {*movqi_internal}
     (nil))
(insn 15 14 16 2 (set (reg/f:DI 6 bp [orig:89 D.37152 ] [89])
        (mem/f:DI (reg/v/f:DI 5 di [orig:98 db ] [98]) [3 db_5(D)->rep+0 S8 A64])) db/c.cc:244 89 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (reg/f:DI 0 ax [orig:103 _6->_vptr.DB ] [103])
        (mem/f:DI (reg/f:DI 6 bp [orig:89 D.37152 ] [89]) [3 _6->_vptr.DB+0 S8 A64])) db/c.cc:244 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 6 bp [orig:89 D.37152 ] [89]) [3 _6->_vptr.DB+0 S8 A64])
        (nil)))
(insn 17 16 18 2 (set (reg/f:DI 41 r12 [orig:91 D.37154 ] [91])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:103 _6->_vptr.DB ] [103])
                (const_int 72 [0x48])) [3 MEM[(int (*__vtbl_ptr_type) () *)_7 + 72B]+0 S8 A64])) db/c.cc:244 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (mem/f/c:DI (reg/f:DI 7 sp) [3 D.31457.data_+0 S8 A128])
        (reg/v/f:DI 4 si [orig:99 propname ] [99])) ./include/leveldb/slice.h:37 89 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (reg:DI 5 di)
        (reg/v/f:DI 4 si [orig:99 propname ] [99])) ./include/leveldb/slice.h:37 89 {*movdi_internal}
     (nil))
(call_insn/i 20 19 21 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7fb538cf5948 strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) ./include/leveldb/slice.h:37 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7fb538cf5948 strlen>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 21 20 24 2 (set (reg:DI 0 ax [105])
        (reg:DI 0 ax)) ./include/leveldb/slice.h:37 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -56 [0xffffffffffffffc8])) [9 D.31457.size_+0 S8 A64])
        (nil)))
(insn 24 21 26 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [9 D.31457.size_+0 S8 A64])
        (reg:DI 0 ax [105])) ./include/leveldb/slice.h:37 89 {*movdi_internal}
     (nil))
(insn 26 24 27 2 (set (reg/f:DI 4 si [108])
        (reg/f:DI 7 sp)) db/c.cc:244 89 {*movdi_internal}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
(insn 27 26 29 2 (set (reg:DI 1 dx)
        (reg/f:DI 3 bx [118])) db/c.cc:244 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(insn 29 27 30 2 (set (reg:DI 5 di)
        (reg/f:DI 6 bp [orig:89 D.37152 ] [89])) db/c.cc:244 89 {*movdi_internal}
     (nil))
(call_insn 30 29 86 2 (set (reg:QI 0 ax)
        (call (mem:QI (reg/f:DI 41 r12 [orig:91 D.37154 ] [91]) [0 *OBJ_TYPE_REF(_8;(struct DB)_6->9) S1 A8])
            (const_int 0 [0]))) db/c.cc:244 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 2 [0x2])
        (expr_list:REG_CALL_DECL (nil)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       9 (ABNORMAL,ABNORMAL_CALL,EH)
;;              3 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 7 [sp] 16 [argp]
;; live  out 	 0 [ax] 3 [bx] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 0 [ax] 6 [bp] 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 6 [bp] 17 [flags]
;; live  kill	
(note 86 30 31 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 31 86 7 3 (set (reg:QI 0 ax [orig:92 D.37155 ] [92])
        (reg:QI 0 ax)) db/c.cc:244 93 {*movqi_internal}
     (nil))
(insn 7 31 33 3 (set (reg/f:DI 6 bp [orig:87 D.37151 ] [87])
        (const_int 0 [0])) db/c.cc:248 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 33 7 34 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 0 ax [orig:92 D.37155 ] [92])
            (const_int 0 [0]))) db/c.cc:244 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 34 33 35 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 41)
            (pc))) db/c.cc:244 612 {*jcc_1}
     (int_list:REG_BR_PROB 2139 (nil))
 -> 41)
;;  succ:       4 [78.6%]  (FALLTHRU)
;;              5 [21.4%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 7861, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [78.6%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 6 [bp]
;; live  kill	
(note 35 34 37 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 37 35 38 4 (set (reg:DI 5 di)
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [3 MEM[(char * *)&tmp]+0 S8 A128])) db/c.cc:246 89 {*movdi_internal}
     (nil))
(call_insn 38 37 39 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strdup") [flags 0x41]  <function_decl 0x7fb5388ada20 strdup>) [0 strdup S1 A8])
            (const_int 0 [0]))) db/c.cc:246 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("strdup") [flags 0x41]  <function_decl 0x7fb5388ada20 strdup>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 39 38 41 4 (set (reg/f:DI 6 bp [orig:87 D.37151 ] [87])
        (reg:DI 0 ax)) db/c.cc:246 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 110)
        (nil)))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [21.4%] 
;;              4 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 3 [bx] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 3 [bx] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 41 39 42 5 198 "" [1 uses])
(note 42 41 43 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 43 42 45 5 (set (reg/f:DI 5 di [orig:95 D.37151 ] [95])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [3 MEM[(char * *)&tmp]+0 S8 A128])) 89 {*movdi_internal}
     (nil))
(insn 45 43 46 5 (parallel [
            (set (reg/f:DI 3 bx [112])
                (plus:DI (reg/f:DI 3 bx [118])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:179 218 {*adddi_1}
     (nil))
(insn 46 45 47 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:95 D.37151 ] [95])
            (reg/f:DI 3 bx [112]))) /usr/include/c++/5/bits/basic_string.h:179 8 {*cmpdi_1}
     (nil))
(jump_insn 47 46 48 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 51)
            (pc))) /usr/include/c++/5/bits/basic_string.h:179 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 51)
;;  succ:       6 [78.3%]  (FALLTHRU)
;;              7 [21.6%] 
;; lr  out 	 5 [di] 6 [bp] 7 [sp]
;; live  out 	 5 [di] 6 [bp] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 7835, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [78.3%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(note 48 47 50 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(call_insn 50 48 51 6 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/ext/new_allocator.h:110 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       7 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

;; basic block 7, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [21.6%] 
;;              6 [100.0%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 2 [cx] 17 [flags]
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	 2 [cx]
(code_label 51 50 52 7 199 "" [1 uses])
(note 52 51 73 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 73 52 75 7 (set (reg/i:DI 0 ax)
        (reg/f:DI 6 bp [orig:87 D.37151 ] [87])) db/c.cc:250 89 {*movdi_internal}
     (nil))
(insn 75 73 76 7 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                                (const_int 56 [0x38])) [3 D.37157+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 2 cx [120]))
        ]) db/c.cc:250 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 76 75 97 7 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 79)
            (pc))) db/c.cc:250 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 79)
;;  succ:       14 [100.0%] 
;;              8 [0.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

;; basic block 8, loop depth 0, count 0, freq 4
;;  prev block 7, next block 9, flags: (NEW, REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [0.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 97 76 99 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(jump_insn 99 97 100 8 (set (pc)
        (label_ref 98)) 654 {jump}
     (nil)
 -> 98)
;;  succ:       13 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 100 99 89)
;; basic block 9, loop depth 0, count 0, freq 0
;;  prev block 8, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 9 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 9 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 3 [bx] 7 [sp] 16 [argp]
;; lr  use 	 3 [bx] 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	 17 [flags]
(code_label/s 89 100 91 9 204 "" [1 uses])
(note 91 89 90 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 90 91 58 9 (set (reg:DI 6 bp [116])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (nil))
(insn 58 90 60 9 (set (reg/f:DI 5 di [orig:94 D.37151 ] [94])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [3 MEM[(char * *)&tmp]+0 S8 A128])) 89 {*movdi_internal}
     (nil))
(insn 60 58 61 9 (parallel [
            (set (reg/f:DI 3 bx [115])
                (plus:DI (reg/f:DI 3 bx [118])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:179 218 {*adddi_1}
     (nil))
(insn 61 60 62 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:94 D.37151 ] [94])
            (reg/f:DI 3 bx [115]))) /usr/include/c++/5/bits/basic_string.h:179 8 {*cmpdi_1}
     (nil))
(jump_insn 62 61 63 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 66)
            (pc))) /usr/include/c++/5/bits/basic_string.h:179 612 {*jcc_1}
     (int_list:REG_BR_PROB 3017 (nil))
 -> 66)
;;  succ:       11 [69.8%]  (FALLTHRU)
;;              12 [30.2%] 
;; lr  out 	 5 [di] 6 [bp] 7 [sp]
;; live  out 	 5 [di] 6 [bp] 7 [sp]

;; basic block 11, loop depth 0, count 0, freq 0
;;  prev block 9, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [69.8%]  (FALLTHRU)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(note 63 62 65 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(call_insn 65 63 66 11 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/ext/new_allocator.h:110 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       12 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

;; basic block 12, loop depth 0, count 0, freq 0
;;  prev block 11, next block 13, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [30.2%] 
;;              11 [100.0%]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 66 65 67 12 201 "" [1 uses])
(note 67 66 69 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 69 67 70 12 (set (reg:DI 5 di)
        (reg:DI 6 bp [116])) 89 {*movdi_internal}
     (nil))
(call_insn 70 69 71 12 (call (mem:QI (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>) [0 __builtin_unwind_resume S1 A8])
        (const_int 0 [0])) 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 71 70 98)
;; basic block 13, loop depth 0, count 0, freq 4
;;  prev block 12, next block 14, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 98 71 87 13 206 "" [1 uses])
(note 87 98 77 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(call_insn 77 87 78 13 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) db/c.cc:250 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 78 77 79)
;; basic block 14, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 13, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [100.0%] 
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 7 [sp]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 79 78 88 14 202 "" [1 uses])
(note 88 79 80 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(insn 80 88 101 14 (use (reg/i:DI 0 ax)) db/c.cc:250 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 101 80 0 NOTE_INSN_DELETED)

;; Function void leveldb_approximate_sizes(leveldb_t*, int, const char* const*, const size_t*, const char* const*, const size_t*, uint64_t*) (leveldb_approximate_sizes, funcdef_no=1441, decl_uid=2203, cgraph_uid=548, symbol_order=551)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-56, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            0 Costly loser: reject++
            0 Small class reload: reject+=3
            0 Non input pseudo reload: reject++
            1 Matching alt: reject+=2
            1 Small class reload: reject+=3
          alt=0,overall=22,losers=2,rld_nregs=2
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 14:  (0) r  (1) rm {*extendsidi2_rex64}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 15:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rm  (1) re {*cmpdi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
	 Choosing alt 0 in insn 19:  (0) =rm  (1) 0  (2) cJ {*ashldi3_1}
      Creating newreg=120 from oldreg=112, assigning class GENERAL_REGS to r120
   19: {r120:DI=r120:DI<<0x5;clobber flags:CC;}
      REG_UNUSED flags:CC
    Inserting insn reload before:
  111: r120:DI=r89:DI
    Inserting insn reload after:
  112: r112:DI=r120:DI

          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (1) rBwBz {*call_value}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (0) r {*cmpsi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 39:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) UBsBz {*sibcall}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 10:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 55:  (0) r  (1) i {*movdi_internal}
      Creating newreg=121, assigning class GENERAL_REGS to r121
   55: r121:DI=`*.LC34'
    Inserting insn reload after:
  113: [r93:DI]=r121:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 113:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 56:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 58:  (0) r  (1) i {*movdi_internal}
      Creating newreg=122, assigning class GENERAL_REGS to r122
   58: r122:DI=`*.LC34'
    Inserting insn reload after:
  114: [r93:DI+0x10]=r122:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 114:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 59:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 60:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 61:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 62:  (0) rm  (1) re {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 74:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 75:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 76:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 77:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 78:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 79:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 80:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 81:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 82:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) rm  (1) re {*cmpsi_1}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 5
   Insn 31: point = 0
  BB 7
   Insn 47: point = 0
   Insn 46: point = 0
   Insn 45: point = 1
   Insn 44: point = 2
   Insn 43: point = 3
   Insn 42: point = 3
   Insn 41: point = 4
   Insn 39: point = 5
   Insn 38: point = 6
  BB 12
   Insn 108: point = 9
  BB 11
   Insn 85: point = 10
   Insn 84: point = 10
   Insn 82: point = 10
   Insn 81: point = 10
   Insn 80: point = 10
   Insn 79: point = 11
   Insn 78: point = 12
   Insn 77: point = 13
   Insn 76: point = 14
   Insn 75: point = 15
   Insn 74: point = 16
   Insn 72: point = 17
  BB 6
   Insn 36: point = 19
   Insn 35: point = 19
   Insn 11: point = 19
   Insn 70: point = 20
  BB 10
   Insn 105: point = 22
  BB 9
   Insn 63: point = 23
   Insn 62: point = 23
   Insn 61: point = 23
   Insn 60: point = 23
   Insn 59: point = 23
   Insn 114: point = 23
   Insn 58: point = 24
   Insn 56: point = 25
   Insn 113: point = 25
   Insn 55: point = 26
  BB 8
   Insn 10: point = 28
   Insn 51: point = 29
  BB 4
   Insn 102: point = 31
  BB 3
   Insn 25: point = 32
   Insn 24: point = 32
   Insn 22: point = 32
   Insn 21: point = 33
   Insn 20: point = 33
   Insn 112: point = 34
	Hard reg 5 is preferable by r120 with profit 90
   Insn 19: point = 36
   Insn 111: point = 36
  BB 2
   Insn 17: point = 38
   Insn 16: point = 38
   Insn 15: point = 39
   Insn 14: point = 40
   Insn 8: point = 41
   Insn 7: point = 42
   Insn 6: point = 43
   Insn 5: point = 44
   Insn 4: point = 45
   Insn 3: point = 46
   Insn 2: point = 47
 r88: [10..20]
 r89: [32..40] [23..30]
 r91: [0..32]
 r92: [23..28]
 r93: [23..29]
 r94: [14..17]
 r96: [10..13]
 r99: [2..6]
 r102: [10..19]
 r104: [7..47]
 r105: [3..46]
 r106: [10..45]
 r107: [10..44]
 r108: [10..43]
 r109: [10..42]
 r110: [4..41]
 r111: [38..39]
 r112: [33..34]
 r114: [1..5]
 r118: [15..16]
 r119: [11..12]
 r120: [35..36]
 r121: [25..26]
 r122: [23..24]
Compressing live ranges: from 48 to 17 - 35%
Ranges after the compression:
 r88: [2..5]
 r89: [6..16]
 r91: [0..10]
 r92: [6..9]
 r93: [6..9]
 r94: [4..5]
 r96: [2..3]
 r99: [0..1]
 r102: [2..5]
 r104: [2..16]
 r105: [0..16]
 r106: [2..16]
 r107: [2..16]
 r108: [2..16]
 r109: [2..16]
 r110: [0..16]
 r111: [15..16]
 r112: [11..12]
 r114: [0..1]
 r118: [4..5]
 r119: [2..3]
 r120: [13..14]
 r121: [8..9]
 r122: [6..7]

********** Inheritance #1: **********

EBB 2 3
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=123, assigning class NO_REGS to save r123
   25: pc={(flags:CCZ!=0)?L100:pc}
      REG_DEAD flags:CCZ
      REG_BR_PROB 9100
    Add reg<-save before:
  116: r110:DI=r123:DI

    8: r110:DI=[argp:DI+0x40]
      REG_DEAD argp:DI
    Add save<-reg after:
  115: r123:DI=r110:DI

	  ))))))))))))))))))))))))))))))))))))))))))))))))
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=124, assigning class NO_REGS to save r124
   25: pc={(flags:CCZ!=0)?L100:pc}
      REG_DEAD flags:CCZ
      REG_BR_PROB 9100
    Add reg<-save before:
  118: r109:DI=r124:DI

    7: r109:DI=r9:DI
      REG_DEAD r9:DI
    Add save<-reg after:
  117: r124:DI=r109:DI

	  ))))))))))))))))))))))))))))))))))))))))))))))))
	  ((((((((((((((((((((((((((((((((((((((((((((((((
      Creating newreg=125, assigning class NO_REGS to save r125
   25: pc={(flags:CCZ!=0)?L100:pc}
      REG_DEAD flags:CCZ
      REG_BR_PROB 9100
    Add reg<-save before:
  120: r108:DI=r125:DI

    6: r108:DI=r8:DI
      REG_DEAD r8:DI
    Add save<-reg after:
  119: r125:DI=r108:DI

	  ))))))))))))))))))))))))))))))))))))))))))))))))
EBB 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10
EBB 11
EBB 12

********** Pseudo live ranges #2: **********

  BB 5
   Insn 31: point = 0
  BB 7
   Insn 47: point = 0
   Insn 46: point = 0
   Insn 45: point = 1
   Insn 44: point = 2
   Insn 43: point = 3
   Insn 42: point = 3
   Insn 41: point = 4
   Insn 39: point = 5
   Insn 38: point = 6
  BB 12
   Insn 108: point = 9
  BB 11
   Insn 85: point = 10
   Insn 84: point = 10
   Insn 82: point = 10
   Insn 81: point = 10
   Insn 80: point = 10
   Insn 79: point = 11
   Insn 78: point = 12
   Insn 77: point = 13
   Insn 76: point = 14
   Insn 75: point = 15
   Insn 74: point = 16
   Insn 72: point = 17
  BB 6
   Insn 36: point = 19
   Insn 35: point = 19
   Insn 11: point = 19
   Insn 70: point = 20
  BB 10
   Insn 105: point = 22
  BB 9
   Insn 63: point = 23
   Insn 62: point = 23
   Insn 61: point = 23
   Insn 60: point = 23
   Insn 59: point = 23
   Insn 114: point = 23
   Insn 58: point = 24
   Insn 56: point = 25
   Insn 113: point = 25
   Insn 55: point = 26
  BB 8
   Insn 10: point = 28
   Insn 51: point = 29
  BB 4
   Insn 102: point = 31
  BB 3
   Insn 25: point = 32
   Insn 120: point = 32
	Hard reg 37 is preferable by r125 with profit 90
   Insn 118: point = 34
	Hard reg 38 is preferable by r124 with profit 90
   Insn 116: point = 36
	Hard reg 2 is preferable by r123 with profit 90
   Insn 24: point = 38
   Insn 22: point = 38
   Insn 21: point = 39
   Insn 20: point = 39
   Insn 112: point = 40
	Hard reg 5 is preferable by r120 with profit 90
   Insn 19: point = 42
   Insn 111: point = 42
  BB 2
   Insn 17: point = 44
   Insn 16: point = 44
   Insn 15: point = 45
   Insn 14: point = 46
   Insn 115: point = 47
	Hard reg 2 is preferable by r123 with profit 180
   Insn 8: point = 49
   Insn 117: point = 50
	Hard reg 38 is preferable by r124 with profit 180
   Insn 7: point = 52
   Insn 119: point = 53
	Hard reg 37 is preferable by r125 with profit 180
   Insn 6: point = 55
   Insn 5: point = 56
   Insn 4: point = 57
   Insn 3: point = 58
   Insn 2: point = 59
 r88: [10..20]
 r89: [32..46] [23..30]
 r91: [0..38]
 r92: [23..28]
 r93: [23..29]
 r94: [14..17]
 r96: [10..13]
 r99: [2..6]
 r102: [10..19]
 r104: [7..59]
 r105: [3..58]
 r106: [10..57]
 r107: [10..56]
 r108: [54..55] [10..32]
 r109: [51..52] [10..34]
 r110: [48..49] [4..36]
 r111: [44..45]
 r112: [39..40]
 r114: [1..5]
 r118: [15..16]
 r119: [11..12]
 r120: [41..42]
 r121: [25..26]
 r122: [23..24]
 r123: [37..47]
 r124: [35..50]
 r125: [33..53]
Compressing live ranges: from 60 to 29 - 48%
Ranges after the compression:
 r88: [2..5]
 r89: [6..22]
 r91: [0..16]
 r92: [6..9]
 r93: [6..9]
 r94: [4..5]
 r96: [2..3]
 r99: [0..1]
 r102: [2..5]
 r104: [2..28]
 r105: [0..28]
 r106: [2..28]
 r107: [2..28]
 r108: [27..28] [2..10]
 r109: [25..26] [2..12]
 r110: [23..24] [0..14]
 r111: [21..22]
 r112: [17..18]
 r114: [0..1]
 r118: [4..5]
 r119: [2..3]
 r120: [19..20]
 r121: [8..9]
 r122: [6..7]
 r123: [15..22]
 r124: [13..24]
 r125: [11..26]

********** Assignment #1: **********

	 Assigning to 121 (cl=GENERAL_REGS, orig=121, freq=1820, tfirst=121, tfreq=1820)...
	   Assign 0 to reload r121 (freq=1820)
	 Assigning to 122 (cl=GENERAL_REGS, orig=122, freq=1820, tfirst=122, tfreq=1820)...
	   Assign 0 to reload r122 (freq=1820)
	 Assigning to 120 (cl=GENERAL_REGS, orig=112, freq=270, tfirst=120, tfreq=270)...
	   Assign 5 to reload r120 (freq=270)

********** Undoing inheritance #1: **********

	     Keep split r123 (orig=r110)
	     Keep split r124 (orig=r109)
	     Keep split r125 (orig=r108)
Split 3 out of 3 (100.00%)

********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 119:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 117:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) r  (1) rem {*movdi_internal}
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 115:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}

******** Rematerialization #1: ********

df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 16 count 13 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 16 count 13 (    1)

Cands:

BB 2:
  register live in: 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame] 37 [r8] 38 [r9]
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 104 105 106 107 123 124 125
  changed regs: 89 104 105 106 107 108 109 110 111 123 124 125
  dead regs: 1 [dx] 2 [cx] 4 [si] 5 [di] 16 [argp] 17 [flags] 37 [r8] 38 [r9] 108 109 110 111

BB 3:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 104 105 106 107 123 124 125
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 104 105 106 107 108 109 110
  changed regs: 0 [ax] 5 [di] 91 108 109 110 112 120
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 112 120 123 124 125

BB 4:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 104 105 106 107 108 109 110
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 104 105 106 107 108 109 110
  changed regs:
  dead regs:

BB 5:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  register live out: 7 [sp] 16 [argp] 20 [frame]
  changed regs: 0 [ax]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 6:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 104 105 106 107 108 109 110
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 91 102 104 105 106 107 108 109 110
  changed regs: 88 102
  dead regs: 17 [flags]

BB 7:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 104 105 110
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs: 1 [dx] 2 [cx] 4 [si] 5 [di] 99 114
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91 99 104 105 110 114

BB 8:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 104 105 106 107 108 109 110
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 92 93 104 105 106 107 108 109 110
  changed regs: 92 93
  dead regs:

BB 9:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 92 93 104 105 106 107 108 109 110
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 91 92 93 104 105 106 107 108 109 110
  changed regs: 92 93 121 122
  dead regs: 17 [flags] 121 122

BB 10:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 104 105 106 107 108 109 110
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 104 105 106 107 108 109 110
  changed regs:
  dead regs:

BB 11:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 91 102 104 105 106 107 108 109 110
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 91 102 104 105 106 107 108 109 110
  changed regs: 88 94 96 102 118 119
  dead regs: 17 [flags] 94 96 118 119

BB 12:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 104 105 110
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91 104 105 110
  changed regs:
  dead regs:
subreg regs:
  Slot 0 regnos (width = 8):	 123
  Slot 1 regnos (width = 8):	 124
  Slot 2 regnos (width = 8):	 125
Changing spilled pseudos to memory in insn #119
Changing spilled pseudos to memory in insn #117
Changing spilled pseudos to memory in insn #115
Changing spilled pseudos to memory in insn #116
Changing spilled pseudos to memory in insn #118
Changing spilled pseudos to memory in insn #120
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=96, prev_offset=64)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-56, prev_offset=0)

********** Local #3: **********

	   Spilling non-eliminable hard regs: 7
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 120:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 118:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 116:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 115:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 117:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 119:  (0) m  (1) re {*movdi_internal}
New elimination table:
Can eliminate 16 to 7 (offset=96, prev_offset=96)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=32, prev_offset=32)
Can eliminate 20 to 6 (offset=-56, prev_offset=0)
changing reg in insn 82
changing reg in insn 70
changing reg in insn 80
changing reg in insn 79
changing reg in insn 76
changing reg in insn 75
changing reg in insn 82
changing reg in insn 14
changing reg in insn 62
changing reg in insn 24
changing reg in insn 16
changing reg in insn 16
changing reg in insn 22
changing reg in insn 70
changing reg in insn 51
changing reg in insn 46
changing reg in insn 43
changing reg in insn 60
changing reg in insn 10
changing reg in insn 62
changing reg in insn 60
changing reg in insn 61
changing reg in insn 51
changing reg in insn 58
changing reg in insn 55
changing reg in insn 59
changing reg in insn 56
changing reg in insn 61
changing reg in insn 72
changing reg in insn 76
changing reg in insn 77
changing reg in insn 80
changing reg in insn 38
changing reg in insn 44
changing reg in insn 39
changing reg in insn 81
changing reg in insn 11
changing reg in insn 81
changing reg in insn 78
changing reg in insn 77
changing reg in insn 74
changing reg in insn 72
changing reg in insn 78
changing reg in insn 77
changing reg in insn 74
changing reg in insn 72
changing reg in insn 2
changing reg in insn 38
changing reg in insn 3
changing reg in insn 84
changing reg in insn 42
changing reg in insn 35
changing reg in insn 14
changing reg in insn 4
changing reg in insn 74
changing reg in insn 74
changing reg in insn 5
changing reg in insn 72
changing reg in insn 72
changing reg in insn 6
changing reg in insn 78
changing reg in insn 78
changing reg in insn 7
changing reg in insn 77
changing reg in insn 77
changing reg in insn 8
changing reg in insn 41
changing reg in insn 15
changing reg in insn 16
changing reg in insn 20
changing reg in insn 39
changing reg in insn 45
changing reg in insn 74
changing reg in insn 75
changing reg in insn 78
changing reg in insn 79
deleting insn with uid = 6.
deleting insn with uid = 7.
deleting insn with uid = 112.
deleting insn with uid = 20.
deleting insn with uid = 41.
deleting insn with uid = 44.


try_optimize_cfg iteration 1

Forwarding edge 3->4 to 6 failed.
Forwarding edge 9->10 to 6 failed.
Forwarding edge 11->12 to 7 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 31.
rescanning insn with uid = 45.
verify found no changes in insn with uid = 47.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 16 count 15 (  1.2)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 16 count 15 (  1.2)


void leveldb_approximate_sizes(leveldb_t*, int, const char* const*, const size_t*, const char* const*, const size_t*, uint64_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 37[r8] 38[r9] 39[r10] 40[r11] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={11d,7u} r1={7d,3u} r2={7d,3u} r3={1d,4u} r4={6d,2u} r5={13d,17u,4e} r6={1d,4u,1e} r7={1d,23u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={14d,5u} r18={4d} r19={4d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={6d,2u,1e} r38={6d,2u,1e} r39={8d,7u} r40={5d,1u} r41={1d,1u} r42={1d,1u,1e} r43={1d,1u,1e} r44={1d,4u} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 442{346d,87u,9e} in 60{56 regular + 4 call} insns.
(note 1 0 12 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9]
;; lr  def 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 17 [flags] 41 [r12] 42 [r13] 43 [r14]
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8] 38 [r9]
;; live  gen 	 0 [ax] 2 [cx] 3 [bx] 6 [bp] 17 [flags] 41 [r12] 42 [r13] 43 [r14]
;; live  kill	
(note 12 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 12 3 2 (set (reg/v/f:DI 41 r12 [orig:104 db ] [104])
        (reg:DI 5 di [ db ])) db/c.cc:257 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg/v:SI 3 bx [orig:105 num_ranges ] [105])
        (reg:SI 4 si [ num_ranges ])) db/c.cc:257 90 {*movsi_internal}
     (nil))
(insn 4 3 5 2 (set (reg/v/f:DI 42 r13 [orig:106 range_start_key ] [106])
        (reg:DI 1 dx [ range_start_key ])) db/c.cc:257 89 {*movdi_internal}
     (nil))
(insn 5 4 119 2 (set (reg/v/f:DI 43 r14 [orig:107 range_start_key_len ] [107])
        (reg:DI 2 cx [ range_start_key_len ])) db/c.cc:257 89 {*movdi_internal}
     (nil))
(insn 119 5 117 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [46 %sfp+-8 S8 A64])
        (reg/v/f:DI 37 r8 [orig:108 range_limit_key ] [108])) db/c.cc:257 89 {*movdi_internal}
     (nil))
(insn 117 119 8 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [46 %sfp+-16 S8 A64])
        (reg/v/f:DI 38 r9 [orig:109 range_limit_key_len ] [109])) db/c.cc:257 89 {*movdi_internal}
     (nil))
(insn 8 117 115 2 (set (reg/v/f:DI 2 cx [orig:110 sizes ] [110])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 96 [0x60])) [3 sizes+0 S8 A64])) db/c.cc:257 89 {*movdi_internal}
     (nil))
(insn 115 8 9 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [46 %sfp+-24 S8 A64])
        (reg/v/f:DI 2 cx [orig:110 sizes ] [110])) db/c.cc:257 89 {*movdi_internal}
     (nil))
(note 9 115 14 2 NOTE_INSN_FUNCTION_BEG)
(insn 14 9 15 2 (set (reg:DI 6 bp [orig:89 D.37188 ] [89])
        (sign_extend:DI (reg/v:SI 3 bx [orig:105 num_ranges ] [105]))) db/c.cc:258 142 {*extendsidi2_rex64}
     (nil))
(insn 15 14 16 2 (set (reg:DI 0 ax [111])
        (const_int 285978576338026496 [0x3f8000000000000])) db/c.cc:258 89 {*movdi_internal}
     (expr_list:REG_EQUIV (const_int 285978576338026496 [0x3f8000000000000])
        (nil)))
(insn 16 15 17 2 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 6 bp [orig:89 D.37188 ] [89])
            (reg:DI 0 ax [111]))) db/c.cc:258 8 {*cmpdi_1}
     (expr_list:REG_EQUAL (compare:CC (reg:DI 6 bp [orig:89 D.37188 ] [89])
            (const_int 285978576338026496 [0x3f8000000000000]))
        (nil)))
(jump_insn 17 16 18 2 (set (pc)
        (if_then_else (gtu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 29)
            (pc))) db/c.cc:258 612 {*jcc_1}
     (int_list:REG_BR_PROB 4 (nil))
 -> 29)
;;  succ:       3 [100.0%]  (FALLTHRU)
;;              5 [0.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]

;; basic block 3, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 43 [r14]
;; live  gen 	 0 [ax] 2 [cx] 5 [di] 17 [flags] 37 [r8] 38 [r9] 44 [r15]
;; live  kill	 17 [flags]
(note 18 17 111 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 111 18 19 3 (set (reg:DI 5 di [orig:112 D.37189 ] [112])
        (reg:DI 6 bp [orig:89 D.37188 ] [89])) db/c.cc:258 89 {*movdi_internal}
     (nil))
(insn 19 111 21 3 (parallel [
            (set (reg:DI 5 di [orig:112 D.37189 ] [112])
                (ashift:DI (reg:DI 5 di [orig:112 D.37189 ] [112])
                    (const_int 5 [0x5])))
            (clobber (reg:CC 17 flags))
        ]) db/c.cc:258 512 {*ashldi3_1}
     (nil))
(call_insn 21 19 22 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Znam") [flags 0x41]  <function_decl 0x7fb538d99288 operator new []>) [0 operator new [] S1 A8])
            (const_int 0 [0]))) db/c.cc:258 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Znam") [flags 0x41]  <function_decl 0x7fb538d99288 operator new []>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 22 21 24 3 (set (reg/f:DI 44 r15 [orig:91 D.37187 ] [91])
        (reg:DI 0 ax)) db/c.cc:258 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 113)
        (nil)))
(insn 24 22 116 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 6 bp [orig:89 D.37188 ] [89])
            (const_int 0 [0]))) db/c.cc:258 4 {*cmpdi_ccno_1}
     (nil))
(insn 116 24 118 3 (set (reg/v/f:DI 2 cx [orig:110 sizes ] [110])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [46 %sfp+-24 S8 A64])) db/c.cc:258 89 {*movdi_internal}
     (nil))
(insn 118 116 120 3 (set (reg/v/f:DI 38 r9 [orig:109 range_limit_key_len ] [109])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [46 %sfp+-16 S8 A64])) db/c.cc:258 89 {*movdi_internal}
     (nil))
(insn 120 118 25 3 (set (reg/v/f:DI 37 r8 [orig:108 range_limit_key ] [108])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [46 %sfp+-8 S8 A64])) db/c.cc:258 89 {*movdi_internal}
     (nil))
(jump_insn 25 120 101 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 100)
            (pc))) db/c.cc:258 612 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 100)
;;  succ:       4 [9.0%]  (FALLTHRU)
;;              8 [91.0%] 
;; lr  out 	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 4, loop depth 0, count 0, freq 81, maybe hot
;;  prev block 3, next block 5, flags: (NEW, REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [9.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(note 101 25 102 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(jump_insn 102 101 103 4 (set (pc)
        (label_ref 33)) 654 {jump}
     (nil)
 -> 33)
;;  succ:       6 [100.0%] 
;; lr  out 	 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 103 102 29)
;; basic block 5, loop depth 0, count 0, freq 0, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [0.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 29 103 30 5 211 "" [1 uses])
(note 30 29 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(call_insn 31 30 32 5 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("__cxa_throw_bad_array_new_length") [flags 0x41]  <function_decl 0x7fb5373b6288 __cxa_throw_bad_array_new_length>) [0 __cxa_throw_bad_array_new_length S1 A8])
            (const_int 0 [0]))) db/c.cc:258 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__cxa_throw_bad_array_new_length") [flags 0x41]  <function_decl 0x7fb5373b6288 __cxa_throw_bad_array_new_length>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 32 31 33)
;; basic block 6, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [100.0%] 
;;              10 [100.0%]  (LOOP_EXIT)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp] 44 [r15]
;; lr  def 	 5 [di] 17 [flags] 39 [r10]
;; live  in  	 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di] 17 [flags] 39 [r10]
;; live  kill	
(code_label 33 32 34 6 212 "" [2 uses])
(note 34 33 70 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 70 34 11 6 (set (reg:DI 39 r10 [orig:88 ivtmp.396 ] [88])
        (reg/f:DI 44 r15 [orig:91 D.37187 ] [91])) 89 {*movdi_internal}
     (nil))
(insn 11 70 35 6 (set (reg:DI 5 di [orig:102 ivtmp.391 ] [102])
        (const_int 0 [0])) db/c.cc:259 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(insn 35 11 36 6 (set (reg:CCNO 17 flags)
        (compare:CCNO (reg/v:SI 3 bx [orig:105 num_ranges ] [105])
            (const_int 0 [0]))) db/c.cc:259 3 {*cmpsi_ccno_1}
     (nil))
(jump_insn 36 35 83 6 (set (pc)
        (if_then_else (gt (reg:CCNO 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 97)
            (pc))) db/c.cc:259 612 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 97)
;;  succ:       7 [9.0%]  (FALLTHRU)
;;              11 [91.0%] 
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 7, loop depth 0, count 0, freq 900, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [9.0%]  (FALLTHRU)
;;              12 [100.0%]  (LOOP_EXIT)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 7 [sp] 41 [r12] 44 [r15]
;; lr  use 	 2 [cx] 3 [bx] 7 [sp] 41 [r12] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 2 [cx] 3 [bx] 7 [sp] 41 [r12] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di]
;; live  kill	
(code_label 83 36 37 7 216 "" [1 uses])
(note 37 83 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 38 37 39 7 (set (reg/f:DI 5 di [orig:99 D.37192 ] [99])
        (mem/f:DI (reg/v/f:DI 41 r12 [orig:104 db ] [104]) [3 db_40(D)->rep+0 S8 A64])) db/c.cc:263 89 {*movdi_internal}
     (nil))
(insn 39 38 40 7 (set (reg/f:DI 0 ax [orig:114 _41->_vptr.DB ] [114])
        (mem/f:DI (reg/f:DI 5 di [orig:99 D.37192 ] [99]) [3 _41->_vptr.DB+0 S8 A64])) db/c.cc:263 89 {*movdi_internal}
     (nil))
(note 40 39 42 7 NOTE_INSN_DELETED)
(insn 42 40 43 7 (set (reg:SI 1 dx)
        (reg/v:SI 3 bx [orig:105 num_ranges ] [105])) db/c.cc:263 90 {*movsi_internal}
     (nil))
(insn 43 42 45 7 (set (reg:DI 4 si)
        (reg/f:DI 44 r15 [orig:91 D.37187 ] [91])) db/c.cc:263 89 {*movdi_internal}
     (nil))
(call_insn 45 43 46 7 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:114 _41->_vptr.DB ] [114])
                    (const_int 80 [0x50])) [3 MEM[(int (*__vtbl_ptr_type) () *)_42 + 80B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_44;(struct DB)_41->10) S1 A8])
        (const_int 0 [0])) db/c.cc:263 660 {*call}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:SI (use (reg:SI 1 dx))
                (expr_list:DI (use (reg:DI 2 cx))
                    (nil))))))
(insn 46 45 47 7 (set (reg:DI 5 di)
        (reg/f:DI 44 r15 [orig:91 D.37187 ] [91])) db/c.cc:264 89 {*movdi_internal}
     (nil))
(call_insn/j 47 46 48 7 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) db/c.cc:264 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 48 47 100)
;; basic block 8, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [91.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp] 44 [r15]
;; lr  def 	 5 [di] 39 [r10]
;; live  in  	 2 [cx] 3 [bx] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 5 [di] 39 [r10]
;; live  kill	
(code_label 100 48 50 8 222 "" [1 uses])
(note 50 100 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 51 50 10 8 (set (reg:DI 5 di [orig:93 ivtmp.410 ] [93])
        (reg/f:DI 44 r15 [orig:91 D.37187 ] [91])) 89 {*movdi_internal}
     (nil))
(insn 10 51 64 8 (set (reg:DI 39 r10 [orig:92 ivtmp.404 ] [92])
        (const_int 0 [0])) db/c.cc:258 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
;;  succ:       9 [100.0%]  (FALLTHRU)
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 9, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [100.0%]  (FALLTHRU)
;;              9 [91.0%]  (DFS_BACK)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 6 [bp] 7 [sp] 39 [r10]
;; lr  def 	 0 [ax] 5 [di] 17 [flags] 39 [r10]
;; live  in  	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 39 [r10]
;; live  kill	 17 [flags]
(code_label 64 10 52 9 215 "" [1 uses])
(note 52 64 55 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 55 52 113 9 (set (reg:DI 0 ax [121])
        (symbol_ref/f:DI ("*.LC34") [flags 0x2]  <var_decl 0x7fb536ecc1b0 *.LC34>)) ./include/leveldb/slice.h:28 89 {*movdi_internal}
     (nil))
(insn 113 55 56 9 (set (mem/f:DI (reg:DI 5 di [orig:93 ivtmp.410 ] [93]) [3 MEM[base: _36, offset: 0B]+0 S8 A64])
        (reg:DI 0 ax [121])) ./include/leveldb/slice.h:28 89 {*movdi_internal}
     (nil))
(insn 56 113 58 9 (set (mem:DI (plus:DI (reg:DI 5 di [orig:93 ivtmp.410 ] [93])
                (const_int 8 [0x8])) [9 MEM[base: _36, offset: 8B]+0 S8 A64])
        (const_int 0 [0])) ./include/leveldb/slice.h:28 89 {*movdi_internal}
     (nil))
(insn 58 56 114 9 (set (reg:DI 0 ax [122])
        (symbol_ref/f:DI ("*.LC34") [flags 0x2]  <var_decl 0x7fb536ecc1b0 *.LC34>)) ./include/leveldb/slice.h:28 89 {*movdi_internal}
     (nil))
(insn 114 58 59 9 (set (mem/f:DI (plus:DI (reg:DI 5 di [orig:93 ivtmp.410 ] [93])
                (const_int 16 [0x10])) [3 MEM[base: _36, offset: 16B]+0 S8 A64])
        (reg:DI 0 ax [122])) ./include/leveldb/slice.h:28 89 {*movdi_internal}
     (nil))
(insn 59 114 60 9 (set (mem:DI (plus:DI (reg:DI 5 di [orig:93 ivtmp.410 ] [93])
                (const_int 24 [0x18])) [9 MEM[base: _36, offset: 24B]+0 S8 A64])
        (const_int 0 [0])) ./include/leveldb/slice.h:28 89 {*movdi_internal}
     (nil))
(insn 60 59 61 9 (parallel [
            (set (reg:DI 39 r10 [orig:92 ivtmp.404 ] [92])
                (plus:DI (reg:DI 39 r10 [orig:92 ivtmp.404 ] [92])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 61 60 62 9 (parallel [
            (set (reg:DI 5 di [orig:93 ivtmp.410 ] [93])
                (plus:DI (reg:DI 5 di [orig:93 ivtmp.410 ] [93])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 62 61 63 9 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 6 bp [orig:89 D.37188 ] [89])
            (reg:DI 39 r10 [orig:92 ivtmp.404 ] [92]))) db/c.cc:258 8 {*cmpdi_1}
     (nil))
(jump_insn 63 62 104 9 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 64)
            (pc))) db/c.cc:258 612 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 64)
;;  succ:       10 [9.0%]  (FALLTHRU)
;;              9 [91.0%]  (DFS_BACK)
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 6 [bp] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 10, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 9, next block 11, flags: (NEW, REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [9.0%]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	
;; live  kill	
(note 104 63 105 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(jump_insn 105 104 106 10 (set (pc)
        (label_ref 33)) 654 {jump}
     (nil)
 -> 33)
;;  succ:       6 [100.0%]  (LOOP_EXIT)
;; lr  out 	 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 7 [sp] 37 [r8] 38 [r9] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 106 105 97)
;; basic block 11, loop depth 0, count 0, freq 9100, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [91.0%] 
;;              11 [91.0%]  (DFS_BACK)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 5 [di] 17 [flags] 39 [r10] 40 [r11]
;; live  in  	 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 5 [di] 17 [flags] 39 [r10] 40 [r11]
;; live  kill	 17 [flags]
(code_label 97 106 96 11 220 "" [2 uses])
(note 96 97 72 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 72 96 74 11 (set (reg:DI 0 ax [orig:94 D.37190 ] [94])
        (mem:DI (plus:DI (mult:DI (reg:DI 5 di [orig:102 ivtmp.391 ] [102])
                    (const_int 8 [0x8]))
                (reg/v/f:DI 43 r14 [orig:107 range_start_key_len ] [107])) [9 MEM[base: range_start_key_len_25(D), index: ivtmp.391_57, step: 8, offset: 0B]+0 S8 A64])) db/c.cc:260 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (mult:DI (reg:DI 5 di [orig:102 ivtmp.391 ] [102])
                    (const_int 8 [0x8]))
                (reg/v/f:DI 43 r14 [orig:107 range_start_key_len ] [107])) [9 MEM[base: range_start_key_len_25(D), index: ivtmp.391_57, step: 8, offset: 0B]+0 S8 A64])
        (nil)))
(insn 74 72 75 11 (set (reg/f:DI 1 dx [orig:118 MEM[base: range_start_key_28(D), index: ivtmp.391_57, step: 8, offset: 0B] ] [118])
        (mem/f:DI (plus:DI (mult:DI (reg:DI 5 di [orig:102 ivtmp.391 ] [102])
                    (const_int 8 [0x8]))
                (reg/v/f:DI 42 r13 [orig:106 range_start_key ] [106])) [3 MEM[base: range_start_key_28(D), index: ivtmp.391_57, step: 8, offset: 0B]+0 S8 A64])) db/c.cc:260 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (plus:DI (mult:DI (reg:DI 5 di [orig:102 ivtmp.391 ] [102])
                    (const_int 8 [0x8]))
                (reg/v/f:DI 42 r13 [orig:106 range_start_key ] [106])) [3 MEM[base: range_start_key_28(D), index: ivtmp.391_57, step: 8, offset: 0B]+0 S8 A64])
        (nil)))
(insn 75 74 76 11 (set (mem/f:DI (reg:DI 39 r10 [orig:88 ivtmp.396 ] [88]) [23 MEM[base: _4, offset: 0B]+0 S8 A64])
        (reg/f:DI 1 dx [orig:118 MEM[base: range_start_key_28(D), index: ivtmp.391_57, step: 8, offset: 0B] ] [118])) db/c.cc:260 89 {*movdi_internal}
     (nil))
(insn 76 75 77 11 (set (mem:DI (plus:DI (reg:DI 39 r10 [orig:88 ivtmp.396 ] [88])
                (const_int 8 [0x8])) [23 MEM[base: _4, offset: 8B]+0 S8 A64])
        (reg:DI 0 ax [orig:94 D.37190 ] [94])) db/c.cc:260 89 {*movdi_internal}
     (nil))
(insn 77 76 78 11 (set (reg:DI 40 r11 [orig:96 D.37190 ] [96])
        (mem:DI (plus:DI (mult:DI (reg:DI 5 di [orig:102 ivtmp.391 ] [102])
                    (const_int 8 [0x8]))
                (reg/v/f:DI 38 r9 [orig:109 range_limit_key_len ] [109])) [9 MEM[base: range_limit_key_len_32(D), index: ivtmp.391_57, step: 8, offset: 0B]+0 S8 A64])) db/c.cc:261 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem:DI (plus:DI (mult:DI (reg:DI 5 di [orig:102 ivtmp.391 ] [102])
                    (const_int 8 [0x8]))
                (reg/v/f:DI 38 r9 [orig:109 range_limit_key_len ] [109])) [9 MEM[base: range_limit_key_len_32(D), index: ivtmp.391_57, step: 8, offset: 0B]+0 S8 A64])
        (nil)))
(insn 78 77 79 11 (set (reg/f:DI 0 ax [orig:119 MEM[base: range_limit_key_35(D), index: ivtmp.391_57, step: 8, offset: 0B] ] [119])
        (mem/f:DI (plus:DI (mult:DI (reg:DI 5 di [orig:102 ivtmp.391 ] [102])
                    (const_int 8 [0x8]))
                (reg/v/f:DI 37 r8 [orig:108 range_limit_key ] [108])) [3 MEM[base: range_limit_key_35(D), index: ivtmp.391_57, step: 8, offset: 0B]+0 S8 A64])) db/c.cc:261 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (plus:DI (mult:DI (reg:DI 5 di [orig:102 ivtmp.391 ] [102])
                    (const_int 8 [0x8]))
                (reg/v/f:DI 37 r8 [orig:108 range_limit_key ] [108])) [3 MEM[base: range_limit_key_35(D), index: ivtmp.391_57, step: 8, offset: 0B]+0 S8 A64])
        (nil)))
(insn 79 78 80 11 (set (mem/f:DI (plus:DI (reg:DI 39 r10 [orig:88 ivtmp.396 ] [88])
                (const_int 16 [0x10])) [23 MEM[base: _4, offset: 16B]+0 S8 A64])
        (reg/f:DI 0 ax [orig:119 MEM[base: range_limit_key_35(D), index: ivtmp.391_57, step: 8, offset: 0B] ] [119])) db/c.cc:261 89 {*movdi_internal}
     (nil))
(insn 80 79 81 11 (set (mem:DI (plus:DI (reg:DI 39 r10 [orig:88 ivtmp.396 ] [88])
                (const_int 24 [0x18])) [23 MEM[base: _4, offset: 24B]+0 S8 A64])
        (reg:DI 40 r11 [orig:96 D.37190 ] [96])) db/c.cc:261 89 {*movdi_internal}
     (nil))
(insn 81 80 82 11 (parallel [
            (set (reg:DI 5 di [orig:102 ivtmp.391 ] [102])
                (plus:DI (reg:DI 5 di [orig:102 ivtmp.391 ] [102])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 82 81 84 11 (parallel [
            (set (reg:DI 39 r10 [orig:88 ivtmp.396 ] [88])
                (plus:DI (reg:DI 39 r10 [orig:88 ivtmp.396 ] [88])
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) 218 {*adddi_1}
     (nil))
(insn 84 82 85 11 (set (reg:CCGC 17 flags)
        (compare:CCGC (reg/v:SI 3 bx [orig:105 num_ranges ] [105])
            (reg:SI 5 di [orig:102 ivtmp.391 ] [102]))) db/c.cc:259 7 {*cmpsi_1}
     (nil))
(jump_insn 85 84 107 11 (set (pc)
        (if_then_else (gt (reg:CCGC 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 97)
            (pc))) db/c.cc:259 612 {*jcc_1}
     (int_list:REG_BR_PROB 9100 (nil))
 -> 97)
;;  succ:       12 [9.0%]  (FALLTHRU)
;;              11 [91.0%]  (DFS_BACK)
;; lr  out 	 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 5 [di] 7 [sp] 37 [r8] 38 [r9] 39 [r10] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 12, loop depth 0, count 0, freq 819, maybe hot
;;  prev block 11, next block 1, flags: (NEW, REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [9.0%]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 2 [cx] 3 [bx] 7 [sp] 41 [r12] 44 [r15]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 2 [cx] 3 [bx] 7 [sp] 41 [r12] 44 [r15]
;; live  gen 	
;; live  kill	
(note 107 85 108 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(jump_insn 108 107 109 12 (set (pc)
        (label_ref 83)) 654 {jump}
     (nil)
 -> 83)
;;  succ:       7 [100.0%]  (LOOP_EXIT)
;; lr  out 	 2 [cx] 3 [bx] 7 [sp] 41 [r12] 44 [r15]
;; live  out 	 2 [cx] 3 [bx] 7 [sp] 41 [r12] 44 [r15]

(barrier 109 108 110)
(note 110 109 0 NOTE_INSN_DELETED)

;; Function void leveldb_compact_range(leveldb_t*, const char*, size_t, const char*, size_t) (leveldb_compact_range, funcdef_no=1442, decl_uid=2209, cgraph_uid=549, symbol_order=552)

      Creating newreg=102
Removing SCRATCH in insn #9 (nop 2)
rescanning insn with uid = 9.
      Creating newreg=103
Removing SCRATCH in insn #45 (nop 3)
rescanning insn with uid = 45.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r102
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 17:  (0) r  (1) i {*movdi_internal}
      Creating newreg=104, assigning class GENERAL_REGS to r104
   17: r104:DI=`*.LC34'
    Inserting insn reload after:
   66: [frame:DI]=r104:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 66:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 20:  (0) r  (1) i {*movdi_internal}
      Creating newreg=105, assigning class GENERAL_REGS to r105
   20: r105:DI=`*.LC34'
    Inserting insn reload after:
   67: [frame:DI+0x10]=r105:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 67:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 22:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 23:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) r {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 28:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 29:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 10:  (0) r  (1) r  (2) le {*adddi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 11:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 32:  (0) r {*cmpdi_ccno_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 35:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 36:  (0) m  (1) re {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 13:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 42:  (0) rBwBz {*call}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 45:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r103
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 9
   Insn 47: point = 0
  BB 10
  BB 8
   Insn 46: point = 0
   Insn 45: point = 0
   Insn 42: point = 1
   Insn 41: point = 2
   Insn 40: point = 3
   Insn 39: point = 4
  BB 6
   Insn 63: point = 6
   Insn 12: point = 6
   Insn 36: point = 7
   Insn 35: point = 8
  BB 7
   Insn 13: point = 10
  BB 5
   Insn 33: point = 12
   Insn 32: point = 12
  BB 3
   Insn 61: point = 13
   Insn 10: point = 13
   Insn 29: point = 14
   Insn 28: point = 15
  BB 4
   Insn 11: point = 17
  BB 2
   Insn 26: point = 19
   Insn 25: point = 19
   Insn 24: point = 19
   Insn 23: point = 21
   Insn 22: point = 22
   Insn 21: point = 24
   Insn 67: point = 24
   Insn 20: point = 25
   Insn 18: point = 26
   Insn 66: point = 26
   Insn 17: point = 27
   Insn 9: point = 28
   Insn 6: point = 30
   Insn 5: point = 31
   Insn 4: point = 32
   Insn 3: point = 33
   Insn 2: point = 34
 r87: [17..17] [4..13]
 r88: [10..10] [3..6]
 r89: [2..22]
 r91: [1..19]
 r92: [23..34]
 r93: [12..33] [8..9]
 r94: [12..32] [7..9]
 r95: [19..31] [15..16]
 r96: [19..30] [14..16]
 r100: [20..21]
 r102: [28..29]
 r103: [0..0]
 r104: [26..27]
 r105: [24..25]
Compressing live ranges: from 35 to 20 - 57%
Ranges after the compression:
 r87: [10..10] [1..7]
 r88: [5..5] [1..2]
 r89: [1..13]
 r91: [1..11]
 r92: [14..19]
 r93: [6..19] [3..4]
 r94: [6..19] [3..4]
 r95: [11..19] [8..9]
 r96: [11..19] [8..9]
 r100: [12..13]
 r102: [18..19]
 r103: [0..0]
 r104: [16..17]
 r105: [14..15]

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5 6
EBB 7
EBB 8
EBB 9
EBB 10

********** Pseudo live ranges #2: **********

  BB 9
   Insn 47: point = 0
  BB 10
  BB 8
   Insn 46: point = 0
   Insn 45: point = 0
   Insn 42: point = 1
   Insn 41: point = 2
   Insn 40: point = 3
   Insn 39: point = 4
  BB 6
   Insn 63: point = 6
   Insn 12: point = 6
   Insn 36: point = 7
   Insn 35: point = 8
  BB 7
   Insn 13: point = 10
  BB 5
   Insn 33: point = 12
   Insn 32: point = 12
  BB 3
   Insn 61: point = 13
   Insn 10: point = 13
   Insn 29: point = 14
   Insn 28: point = 15
  BB 4
   Insn 11: point = 17
  BB 2
   Insn 26: point = 19
   Insn 25: point = 19
   Insn 24: point = 19
   Insn 23: point = 21
   Insn 22: point = 22
   Insn 21: point = 24
   Insn 67: point = 24
   Insn 20: point = 25
   Insn 18: point = 26
   Insn 66: point = 26
   Insn 17: point = 27
   Insn 9: point = 28
   Insn 6: point = 30
   Insn 5: point = 31
   Insn 4: point = 32
   Insn 3: point = 33
   Insn 2: point = 34
 r87: [17..17] [4..13]
 r88: [10..10] [3..6]
 r89: [2..22]
 r91: [1..19]
 r92: [23..34]
 r93: [12..33] [8..9]
 r94: [12..32] [7..9]
 r95: [19..31] [15..16]
 r96: [19..30] [14..16]
 r100: [20..21]
 r102: [28..29]
 r103: [0..0]
 r104: [26..27]
 r105: [24..25]
Compressing live ranges: from 35 to 20 - 57%
Ranges after the compression:
 r87: [10..10] [1..7]
 r88: [5..5] [1..2]
 r89: [1..13]
 r91: [1..11]
 r92: [14..19]
 r93: [6..19] [3..4]
 r94: [6..19] [3..4]
 r95: [11..19] [8..9]
 r96: [11..19] [8..9]
 r100: [12..13]
 r102: [18..19]
 r103: [0..0]
 r104: [16..17]
 r105: [14..15]

********** Assignment #1: **********

	 Assigning to 104 (cl=GENERAL_REGS, orig=104, freq=2000, tfirst=104, tfreq=2000)...
	   Assign 0 to reload r104 (freq=2000)
	 Assigning to 105 (cl=GENERAL_REGS, orig=105, freq=2000, tfirst=105, tfreq=2000)...
	   Assign 0 to reload r105 (freq=2000)
	 Assigning to 102 (cl=INDEX_REGS, orig=102, freq=1000, tfirst=102, tfreq=1000)...
	   Assign 0 to reload r102 (freq=1000)
	 Assigning to 103 (cl=INDEX_REGS, orig=103, freq=1000, tfirst=103, tfreq=1000)...
	   Assign 0 to reload r103 (freq=1000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=64, prev_offset=64)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=48, prev_offset=48)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 11
changing reg in insn 10
changing reg in insn 39
changing reg in insn 13
changing reg in insn 12
changing reg in insn 40
changing reg in insn 22
changing reg in insn 41
changing reg in insn 23
changing reg in insn 23
changing reg in insn 24
changing reg in insn 42
changing reg in insn 2
changing reg in insn 22
changing reg in insn 3
changing reg in insn 35
changing reg in insn 32
changing reg in insn 4
changing reg in insn 36
changing reg in insn 5
changing reg in insn 28
changing reg in insn 25
changing reg in insn 6
changing reg in insn 29
changing reg in insn 23
changing reg in insn 24
changing reg in insn 9
changing reg in insn 45
deleting insn with uid = 2.
deleting insn with uid = 3.
deleting insn with uid = 4.
deleting insn with uid = 5.
deleting insn with uid = 6.
deleting insn with uid = 40.
deleting insn with uid = 41.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 42.
verify found no changes in insn with uid = 47.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 12 count 11 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 12 count 11 (    1)


void leveldb_compact_range(leveldb_t*, const char*, size_t, const char*, size_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={9d,4u} r1={4d,2u} r2={5d,3u} r4={5d,3u} r5={4d,3u,1e} r7={1d,24u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={7d,3u} r18={2d} r19={2d} r20={2e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d,1u} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 223{177d,43u,3e} in 29{27 regular + 2 call} insns.
(note 1 0 14 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8]
;; lr  use 	 2 [cx] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 5 [di] 17 [flags]
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(note 14 1 7 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 7 14 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 7 17 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                        (const_int 40 [0x28])) [3 D.37202+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [102])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) db/c.cc:270 986 {stack_tls_protect_set_di}
     (nil))
(insn 17 9 66 2 (set (reg:DI 0 ax [104])
        (symbol_ref/f:DI ("*.LC34") [flags 0x2]  <var_decl 0x7fb536ecc1b0 *.LC34>)) ./include/leveldb/slice.h:28 89 {*movdi_internal}
     (nil))
(insn 66 17 18 2 (set (mem/f/c:DI (reg/f:DI 7 sp) [3 a.data_+0 S8 A128])
        (reg:DI 0 ax [104])) ./include/leveldb/slice.h:28 89 {*movdi_internal}
     (nil))
(insn 18 66 20 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [9 a.size_+0 S8 A64])
        (const_int 0 [0])) ./include/leveldb/slice.h:28 89 {*movdi_internal}
     (nil))
(insn 20 18 67 2 (set (reg:DI 0 ax [105])
        (symbol_ref/f:DI ("*.LC34") [flags 0x2]  <var_decl 0x7fb536ecc1b0 *.LC34>)) ./include/leveldb/slice.h:28 89 {*movdi_internal}
     (nil))
(insn 67 20 21 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [3 b.data_+0 S8 A128])
        (reg:DI 0 ax [105])) ./include/leveldb/slice.h:28 89 {*movdi_internal}
     (nil))
(insn 21 67 22 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [9 b.size_+0 S8 A64])
        (const_int 0 [0])) ./include/leveldb/slice.h:28 89 {*movdi_internal}
     (nil))
(insn 22 21 23 2 (set (reg/f:DI 5 di [orig:89 D.37199 ] [89])
        (mem/f:DI (reg/v/f:DI 5 di [orig:92 db ] [92]) [3 db_8(D)->rep+0 S8 A64])) db/c.cc:272 89 {*movdi_internal}
     (nil))
(insn 23 22 24 2 (set (reg/f:DI 0 ax [orig:100 _9->_vptr.DB ] [100])
        (mem/f:DI (reg/f:DI 5 di [orig:89 D.37199 ] [89]) [3 _9->_vptr.DB+0 S8 A64])) db/c.cc:275 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 5 di [orig:89 D.37199 ] [89]) [3 _9->_vptr.DB+0 S8 A64])
        (nil)))
(insn 24 23 25 2 (set (reg/f:DI 0 ax [orig:91 D.37201 ] [91])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:100 _9->_vptr.DB ] [100])
                (const_int 88 [0x58])) [3 MEM[(int (*__vtbl_ptr_type) () *)_10 + 88B]+0 S8 A64])) db/c.cc:275 89 {*movdi_internal}
     (nil))
(insn 25 24 26 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 2 cx [orig:95 limit_key ] [95])
            (const_int 0 [0]))) db/c.cc:272 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 26 25 27 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 54)
            (pc))) db/c.cc:272 612 {*jcc_1}
     (int_list:REG_BR_PROB 1500 (nil))
 -> 54)
;;  succ:       3 [85.0%]  (FALLTHRU)
;;              4 [15.0%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8]

;; basic block 3, loop depth 0, count 0, freq 8500, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [85.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8]
;; lr  use 	 2 [cx] 7 [sp] 37 [r8]
;; lr  def 	 2 [cx] 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8]
;; live  gen 	 2 [cx]
;; live  kill	 17 [flags]
(note 27 26 28 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 28 27 29 3 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [13 MEM[(struct Slice *)&b]+0 S8 A128])
        (reg/v/f:DI 2 cx [orig:95 limit_key ] [95])) db/c.cc:272 89 {*movdi_internal}
     (nil))
(insn 29 28 10 3 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [13 MEM[(struct Slice *)&b + 8B]+0 S8 A64])
        (reg/v:DI 37 r8 [orig:96 limit_key_len ] [96])) db/c.cc:272 89 {*movdi_internal}
     (nil))
(insn 10 29 61 3 (parallel [
            (set (reg/f:DI 2 cx [orig:87 D.37198 ] [87])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) db/c.cc:272 218 {*adddi_1}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -32 [0xffffffffffffffe0]))
        (nil)))
(jump_insn 61 10 62 3 (set (pc)
        (label_ref 30)) 654 {jump}
     (nil)
 -> 30)
;;  succ:       5 [100.0%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp]

(barrier 62 61 54)
;; basic block 4, loop depth 0, count 0, freq 1500, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [15.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 2 [cx]
;; live  in  	 0 [ax] 1 [dx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 2 [cx]
;; live  kill	
(code_label 54 62 53 4 228 "" [1 uses])
(note 53 54 11 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 11 53 30 4 (set (reg/f:DI 2 cx [orig:87 D.37198 ] [87])
        (const_int 0 [0])) db/c.cc:272 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [100.0%]  (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 30 11 31 5 225 "" [1 uses])
(note 31 30 32 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 32 31 33 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 4 si [orig:93 start_key ] [93])
            (const_int 0 [0]))) db/c.cc:272 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 33 32 34 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 58)
            (pc))) db/c.cc:272 612 {*jcc_1}
     (int_list:REG_BR_PROB 1014 (nil))
 -> 58)
;;  succ:       6 [89.9%]  (FALLTHRU)
;;              7 [10.1%] 
;; lr  out 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 8986, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [89.9%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 1 [dx] 4 [si] 7 [sp]
;; lr  def 	 4 [si]
;; live  in  	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 4 [si]
;; live  kill	
(note 34 33 35 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 35 34 36 6 (set (mem/f/c:DI (reg/f:DI 7 sp) [13 MEM[(struct Slice *)&a]+0 S8 A128])
        (reg/v/f:DI 4 si [orig:93 start_key ] [93])) db/c.cc:272 89 {*movdi_internal}
     (nil))
(insn 36 35 12 6 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [13 MEM[(struct Slice *)&a + 8B]+0 S8 A64])
        (reg/v:DI 1 dx [orig:94 start_key_len ] [94])) db/c.cc:272 89 {*movdi_internal}
     (nil))
(insn 12 36 63 6 (set (reg/f:DI 4 si [orig:88 D.37198 ] [88])
        (reg/f:DI 7 sp)) db/c.cc:272 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(jump_insn 63 12 64 6 (set (pc)
        (label_ref 37)) 654 {jump}
     (nil)
 -> 37)
;;  succ:       8 [100.0%] 
;; lr  out 	 0 [ax] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 2 [cx] 4 [si] 5 [di] 7 [sp]

(barrier 64 63 58)
;; basic block 7, loop depth 0, count 0, freq 1014, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [10.1%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 5 [di] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 4 [si]
;; live  in  	 0 [ax] 2 [cx] 5 [di] 7 [sp]
;; live  gen 	 4 [si]
;; live  kill	
(code_label 58 64 57 7 229 "" [1 uses])
(note 57 58 13 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 13 57 37 7 (set (reg/f:DI 4 si [orig:88 D.37198 ] [88])
        (const_int 0 [0])) db/c.cc:272 89 {*movdi_internal}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 2 [cx] 4 [si] 5 [di] 7 [sp]

;; basic block 8, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [100.0%]  (FALLTHRU)
;;              6 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 1 [dx] 17 [flags]
;; live  kill	 0 [ax]
(code_label 37 13 38 8 226 "" [1 uses])
(note 38 37 39 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 39 38 42 8 (set (reg:DI 1 dx)
        (reg/f:DI 2 cx [orig:87 D.37198 ] [87])) db/c.cc:275 89 {*movdi_internal}
     (nil))
(call_insn 42 39 45 8 (call (mem:QI (reg/f:DI 0 ax [orig:91 D.37201 ] [91]) [0 *OBJ_TYPE_REF(_11;(struct DB)_9->11) S1 A8])
        (const_int 0 [0])) db/c.cc:275 660 {*call}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 45 42 46 8 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                                (const_int 40 [0x28])) [3 D.37202+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 0 ax [103]))
        ]) db/c.cc:276 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 46 45 59 8 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 49)
            (pc))) db/c.cc:276 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 49)
;;  succ:       10 [100.0%] 
;;              9 [0.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 9, loop depth 0, count 0, freq 4
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [0.0%]  (FALLTHRU)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 59 46 47 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(call_insn 47 59 48 9 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) db/c.cc:276 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 48 47 49)
;; basic block 10, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 9, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 49 48 60 10 227 "" [1 uses])
(note 60 49 65 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 65 60 0 NOTE_INSN_DELETED)

;; Function void leveldb_destroy_db(const leveldb_options_t*, const char*, char**) (leveldb_destroy_db, funcdef_no=1443, decl_uid=2213, cgraph_uid=550, symbol_order=553)

      Creating newreg=133
Removing SCRATCH in insn #7 (nop 2)
rescanning insn with uid = 7.
      Creating newreg=134
Removing SCRATCH in insn #144 (nop 3)
rescanning insn with uid = 144.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=128, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-56, prev_offset=0)
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r133
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 15:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 16:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 26:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) rm  (1) re {*cmpdi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 32:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 37:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 39:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) rm  (1) re {*cmpdi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 47:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 48:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 75:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 76:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 99:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 125:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 139:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) rBwBz {*call}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r134
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 24
   Insn 135: point = 0
   Insn 134: point = 0
  BB 23
   Insn 130: point = 2
   Insn 129: point = 2
  BB 22
   Insn 127: point = 4
   Insn 126: point = 4
   Insn 125: point = 5
   Insn 123: point = 7
  BB 20
   Insn 194: point = 9
   Insn 119: point = 9
  BB 19
   Insn 116: point = 12
   Insn 115: point = 12
  BB 18
   Insn 113: point = 14
   Insn 112: point = 14
   Insn 111: point = 14
  BB 17
   Insn 161: point = 16
  BB 21
   Insn 155: point = 18
  BB 25
   Insn 140: point = 20
   Insn 139: point = 20
  BB 27
   Insn 146: point = 20
  BB 28
  BB 26
   Insn 145: point = 20
   Insn 144: point = 20
  BB 16
   Insn 192: point = 21
   Insn 104: point = 21
   Insn 103: point = 21
  BB 15
   Insn 101: point = 23
   Insn 100: point = 23
   Insn 99: point = 24
   Insn 97: point = 26
  BB 14
   Insn 94: point = 28
   Insn 93: point = 28
  BB 13
   Insn 91: point = 30
   Insn 90: point = 30
   Insn 89: point = 30
  BB 12
   Insn 87: point = 32
   Insn 86: point = 32
   Insn 85: point = 33
  BB 11
   Insn 82: point = 35
   Insn 81: point = 35
   Insn 80: point = 35
   Insn 79: point = 35
   Insn 76: point = 36
   Insn 75: point = 37
  BB 8
   Insn 190: point = 38
   Insn 174: point = 38
   Insn 57: point = 39
  BB 6
   Insn 188: point = 42
   Insn 173: point = 42
   Insn 11: point = 43
   Insn 48: point = 45
   Insn 47: point = 46
  BB 10
   Insn 72: point = 49
   Insn 71: point = 50
   Insn 68: point = 51
   Insn 67: point = 51
   Insn 66: point = 52
   Insn 65: point = 53
  BB 4
   Insn 186: point = 55
   Insn 39: point = 55
   Insn 38: point = 56
   Insn 37: point = 57
   Insn 36: point = 57
   Insn 35: point = 58
   Insn 34: point = 58
   Insn 33: point = 58
   Insn 32: point = 58
   Insn 30: point = 58
  BB 9
   Insn 175: point = 60
   Insn 9: point = 61
  BB 7
   Insn 54: point = 64
   Insn 53: point = 64
  BB 5
   Insn 45: point = 65
   Insn 44: point = 65
  BB 3
   Insn 28: point = 66
   Insn 27: point = 66
   Insn 26: point = 66
   Insn 25: point = 66
   Insn 23: point = 67
   Insn 22: point = 68
   Insn 21: point = 68
  BB 2
   Insn 19: point = 69
   Insn 18: point = 69
   Insn 17: point = 69
   Insn 16: point = 69
   Insn 15: point = 70
   Insn 7: point = 71
   Insn 4: point = 73
   Insn 3: point = 74
   Insn 2: point = 75
 r88: [12..14]
 r89: [28..30]
 r90: [2..7]
 r91: [21..26]
 r92: [64..66] [36..50]
 r93: [49..49] [42..43] [36..39]
 r94: [60..61] [51..57]
 r99: [35..75]
 r100: [52..74] [47..48]
 r101: [32..73]
 r106: [62..69] [44..48] [40..41]
 r108: [53..67]
 r112: [55..56]
 r113: [45..46]
 r123: [23..24]
 r124: [18..18] [0..9]
 r125: [10..16]
 r129: [4..5]
 r131: [25..70] [6..19]
 r132: [60..60] [49..58] [42..42] [33..38]
 r133: [71..72]
 r134: [20..20]
Compressing live ranges: from 76 to 35 - 46%
Ranges after the compression:
 r88: [4..5]
 r89: [13..14]
 r90: [0..3]
 r91: [9..12]
 r92: [31..32] [15..26]
 r93: [25..25] [19..20] [15..16]
 r94: [27..30]
 r99: [15..34]
 r100: [27..34] [23..24]
 r101: [15..34]
 r106: [31..32] [21..24] [17..18]
 r108: [27..32]
 r112: [27..28]
 r113: [21..22]
 r123: [9..10]
 r124: [6..6] [0..3]
 r125: [4..5]
 r129: [0..1]
 r131: [11..32] [2..7]
 r132: [25..29] [19..19] [15..16]
 r133: [33..34]
 r134: [8..8]

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5
EBB 6
EBB 7 8
EBB 9
EBB 10
EBB 11 12 13 14
EBB 15 16
EBB 17
EBB 18 19
EBB 20
EBB 21
EBB 22 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28

********** Pseudo live ranges #2: **********

  BB 24
   Insn 135: point = 0
   Insn 134: point = 0
  BB 23
   Insn 130: point = 2
   Insn 129: point = 2
  BB 22
   Insn 127: point = 4
   Insn 126: point = 4
   Insn 125: point = 5
   Insn 123: point = 7
  BB 20
   Insn 194: point = 9
   Insn 119: point = 9
  BB 19
   Insn 116: point = 12
   Insn 115: point = 12
  BB 18
   Insn 113: point = 14
   Insn 112: point = 14
   Insn 111: point = 14
  BB 17
   Insn 161: point = 16
  BB 21
   Insn 155: point = 18
  BB 25
   Insn 140: point = 20
   Insn 139: point = 20
  BB 27
   Insn 146: point = 20
  BB 28
  BB 26
   Insn 145: point = 20
   Insn 144: point = 20
  BB 16
   Insn 192: point = 21
   Insn 104: point = 21
   Insn 103: point = 21
  BB 15
   Insn 101: point = 23
   Insn 100: point = 23
   Insn 99: point = 24
   Insn 97: point = 26
  BB 14
   Insn 94: point = 28
   Insn 93: point = 28
  BB 13
   Insn 91: point = 30
   Insn 90: point = 30
   Insn 89: point = 30
  BB 12
   Insn 87: point = 32
   Insn 86: point = 32
   Insn 85: point = 33
  BB 11
   Insn 82: point = 35
   Insn 81: point = 35
   Insn 80: point = 35
   Insn 79: point = 35
   Insn 76: point = 36
   Insn 75: point = 37
  BB 8
   Insn 190: point = 38
   Insn 174: point = 38
   Insn 57: point = 39
  BB 6
   Insn 188: point = 42
   Insn 173: point = 42
   Insn 11: point = 43
   Insn 48: point = 45
   Insn 47: point = 46
  BB 10
   Insn 72: point = 49
   Insn 71: point = 50
   Insn 68: point = 51
   Insn 67: point = 51
   Insn 66: point = 52
   Insn 65: point = 53
  BB 4
   Insn 186: point = 55
   Insn 39: point = 55
   Insn 38: point = 56
   Insn 37: point = 57
   Insn 36: point = 57
   Insn 35: point = 58
   Insn 34: point = 58
   Insn 33: point = 58
   Insn 32: point = 58
   Insn 30: point = 58
  BB 9
   Insn 175: point = 60
   Insn 9: point = 61
  BB 7
   Insn 54: point = 64
   Insn 53: point = 64
  BB 5
   Insn 45: point = 65
   Insn 44: point = 65
  BB 3
   Insn 28: point = 66
   Insn 27: point = 66
   Insn 26: point = 66
   Insn 25: point = 66
   Insn 23: point = 67
   Insn 22: point = 68
   Insn 21: point = 68
  BB 2
   Insn 19: point = 69
   Insn 18: point = 69
   Insn 17: point = 69
   Insn 16: point = 69
   Insn 15: point = 70
   Insn 7: point = 71
   Insn 4: point = 73
   Insn 3: point = 74
   Insn 2: point = 75
 r88: [12..14]
 r89: [28..30]
 r90: [2..7]
 r91: [21..26]
 r92: [64..66] [36..50]
 r93: [49..49] [42..43] [36..39]
 r94: [60..61] [51..57]
 r99: [35..75]
 r100: [52..74] [47..48]
 r101: [32..73]
 r106: [62..69] [44..48] [40..41]
 r108: [53..67]
 r112: [55..56]
 r113: [45..46]
 r123: [23..24]
 r124: [18..18] [0..9]
 r125: [10..16]
 r129: [4..5]
 r131: [25..70] [6..19]
 r132: [60..60] [49..58] [42..42] [33..38]
 r133: [71..72]
 r134: [20..20]
Compressing live ranges: from 76 to 35 - 46%
Ranges after the compression:
 r88: [4..5]
 r89: [13..14]
 r90: [0..3]
 r91: [9..12]
 r92: [31..32] [15..26]
 r93: [25..25] [19..20] [15..16]
 r94: [27..30]
 r99: [15..34]
 r100: [27..34] [23..24]
 r101: [15..34]
 r106: [31..32] [21..24] [17..18]
 r108: [27..32]
 r112: [27..28]
 r113: [21..22]
 r123: [9..10]
 r124: [6..6] [0..3]
 r125: [4..5]
 r129: [0..1]
 r131: [11..32] [2..7]
 r132: [25..29] [19..19] [15..16]
 r133: [33..34]
 r134: [8..8]

********** Assignment #1: **********

	 Assigning to 133 (cl=INDEX_REGS, orig=133, freq=1000, tfirst=133, tfreq=1000)...
	   Assign 0 to reload r133 (freq=1000)
	 Assigning to 134 (cl=INDEX_REGS, orig=134, freq=1000, tfirst=134, tfreq=1000)...
	   Assign 0 to reload r134 (freq=1000)
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7

******** Rematerialization #1: ********

df_worklist_dataflow_doublequeue:n_basic_blocks 29 n_edges 36 count 29 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 29 n_edges 36 count 29 (    1)

Cands:

BB 2:
  register live in: 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 99 100 101 106 131
  changed regs: 99 100 101 106 131 133
  dead regs: 1 [dx] 4 [si] 5 [di] 17 [flags] 20 [frame]

BB 3:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 99 100 101 106 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 99 100 101 106 108 131
  changed regs: 0 [ax] 5 [di] 92 108
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 4:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 99 100 101 108 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94 99 100 101 108 131 132
  changed regs: 0 [ax] 1 [dx] 4 [si] 5 [di] 94 112 132
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 112

BB 5:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 99 100 101 106 108 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 99 100 101 106 108 131
  changed regs:
  dead regs: 17 [flags]

BB 6:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 99 100 101 106 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 93 99 101 131 132
  changed regs: 93 113 132
  dead regs: 20 [frame] 100 106 113

BB 7:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 99 100 101 106 108 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 99 100 101 106 108 131
  changed regs:
  dead regs: 17 [flags]

BB 8:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 99 101 106 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 93 99 101 131 132
  changed regs: 93 132
  dead regs: 20 [frame] 106

BB 9:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 99 100 101 106 108 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94 99 100 101 108 131 132
  changed regs: 94 132
  dead regs: 20 [frame] 106

BB 10:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94 99 100 101 108 131 132
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 93 99 101 131 132
  changed regs: 0 [ax] 1 [dx] 4 [si] 5 [di] 92 93
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 94 100 108

BB 11:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 93 99 101 131 132
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 131 132
  changed regs: 1 [dx] 4 [si] 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 92 93 99

BB 12:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 131 132
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 131
  changed regs: 0 [ax] 4 [si] 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 101 132

BB 13:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 131
  changed regs: 89
  dead regs: 17 [flags] 20 [frame]

BB 14:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 131
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89

BB 15:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91
  changed regs: 91 123
  dead regs: 17 [flags] 20 [frame] 123 131

BB 16:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91

BB 17:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 125 131
  changed regs: 125
  dead regs: 0 [ax]

BB 18:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 125 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 125 131
  changed regs: 88
  dead regs: 17 [flags] 20 [frame]

BB 19:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 125 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 125 131
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88

BB 20:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 125 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 124 131
  changed regs: 124
  dead regs: 125

BB 21:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 124 131
  changed regs: 124
  dead regs: 0 [ax]

BB 22:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 124 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90 124
  changed regs: 90 129
  dead regs: 17 [flags] 20 [frame] 129 131

BB 23:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90 124
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 124
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 90

BB 24:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 124
  register live out: 7 [sp] 16 [argp] 20 [frame]
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 124

BB 25:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  register live out: 7 [sp] 16 [argp] 20 [frame]
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 26:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs: 17 [flags] 134
  dead regs: 17 [flags] 20 [frame]

BB 27:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  register live out: 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 28:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs:
subreg regs:
  Slot 0 regnos (width = 8):	 101
Changing spilled pseudos to memory in insn #4
Changing spilled pseudos to memory in insn #86
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=144, prev_offset=128)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=80, prev_offset=64)
Can eliminate 20 to 6 (offset=-56, prev_offset=0)

********** Local #3: **********

	   Spilling non-eliminable hard regs: 7
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =r  (1) Ts {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =r  (1) Ts {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =r  (1) Ts {*leadi}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 75:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 48:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 39:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 37:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) Ts {*leadi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 26:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 15:  (0) r  (1) r  (2) le {*adddi_1}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
New elimination table:
Can eliminate 16 to 7 (offset=144, prev_offset=144)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=80, prev_offset=80)
Can eliminate 20 to 6 (offset=-56, prev_offset=0)
changing reg in insn 111
changing reg in insn 115
changing reg in insn 112
changing reg in insn 89
changing reg in insn 93
changing reg in insn 90
changing reg in insn 123
changing reg in insn 129
changing reg in insn 126
changing reg in insn 97
changing reg in insn 103
changing reg in insn 100
changing reg in insn 25
changing reg in insn 71
changing reg in insn 53
changing reg in insn 44
changing reg in insn 76
changing reg in insn 75
changing reg in insn 57
changing reg in insn 11
changing reg in insn 72
changing reg in insn 76
changing reg in insn 9
changing reg in insn 36
changing reg in insn 67
changing reg in insn 37
changing reg in insn 2
changing reg in insn 79
changing reg in insn 3
changing reg in insn 66
changing reg in insn 47
changing reg in insn 21
changing reg in insn 18
changing reg in insn 16
changing reg in insn 57
changing reg in insn 11
changing reg in insn 9
changing reg in insn 17
changing reg in insn 23
changing reg in insn 65
changing reg in insn 27
changing reg in insn 26
changing reg in insn 25
changing reg in insn 38
changing reg in insn 39
changing reg in insn 47
changing reg in insn 48
changing reg in insn 99
changing reg in insn 100
changing reg in insn 155
changing reg in insn 119
changing reg in insn 134
changing reg in insn 161
changing reg in insn 119
changing reg in insn 125
changing reg in insn 126
changing reg in insn 15
changing reg in insn 34
changing reg in insn 125
changing reg in insn 99
changing reg in insn 80
changing reg in insn 16
changing reg in insn 175
changing reg in insn 174
changing reg in insn 173
changing reg in insn 30
changing reg in insn 85
changing reg in insn 81
changing reg in insn 33
changing reg in insn 7
changing reg in insn 144
deleting insn with uid = 11.
deleting insn with uid = 57.
deleting insn with uid = 67.
deleting insn with uid = 93.
deleting insn with uid = 103.
deleting insn with uid = 115.
deleting insn with uid = 119.
deleting insn with uid = 129.


try_optimize_cfg iteration 1

Merging block 18 into block 17...
changing bb of uid 111
  from 18 to 17
changing bb of uid 112
  from 18 to 17
changing bb of uid 113
  from 18 to 17
Merged blocks 17 and 18.
Merged 17 and 18 without moving.
Edge 17->20 redirected to 22
Merging block 20 into block 19...
changing bb of uid 194
  from 20 to 19
Merged blocks 19 and 20.
Merged 19 and 20 without moving.


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 35.
verify found no changes in insn with uid = 68.
verify found no changes in insn with uid = 82.
verify found no changes in insn with uid = 87.
verify found no changes in insn with uid = 94.
verify found no changes in insn with uid = 104.
verify found no changes in insn with uid = 116.
verify found no changes in insn with uid = 130.
verify found no changes in insn with uid = 135.
verify found no changes in insn with uid = 140.
verify found no changes in insn with uid = 146.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 27 n_edges 34 count 27 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 27 n_edges 34 count 27 (    1)


void leveldb_destroy_db(const leveldb_options_t*, const char*, char**)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={20d,9u} r1={19d,5u} r2={13d} r3={3d,7u} r4={17d,5u} r5={25d,17u} r6={4d,4u} r7={1d,60u} r8={12d} r9={12d} r10={12d} r11={12d} r12={12d} r13={12d} r14={12d} r15={12d} r16={2u} r17={26d,9u} r18={12d} r19={12d} r20={12e} r21={13d} r22={13d} r23={13d} r24={13d} r25={13d} r26={13d} r27={13d} r28={13d} r29={12d} r30={12d} r31={12d} r32={12d} r33={12d} r34={12d} r35={12d} r36={12d} r37={13d} r38={13d} r39={12d} r40={12d} r41={1d,4u} r42={1d,1u} r43={4d,3u} r44={1d,4u} r45={12d} r46={12d} r47={12d} r48={12d} r49={12d} r50={12d} r51={12d} r52={12d} r53={12d} r54={12d} r55={12d} r56={12d} r57={12d} r58={12d} r59={12d} r60={12d} r61={12d} r62={12d} r63={12d} r64={12d} r65={12d} r66={12d} r67={12d} r68={12d} r69={12d} r70={12d} r71={12d} r72={12d} r73={12d} r74={12d} r75={12d} r76={12d} r77={12d} r78={12d} r79={12d} r80={12d} 
;;    total ref usage 1079{937d,130u,12e} in 81{69 regular + 12 call} insns.
(note 1 0 12 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 7 [sp] 16 [argp]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 6 [bp] 17 [flags] 41 [r12] 42 [r13]
;; live  in  	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 6 [bp] 17 [flags] 41 [r12] 42 [r13]
;; live  kill	 17 [flags]
(note 12 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 12 3 2 (set (reg/v/f:DI 42 r13 [orig:99 options ] [99])
        (reg:DI 5 di [ options ])) db/c.cc:281 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg/v/f:DI 41 r12 [orig:100 name ] [100])
        (reg:DI 4 si [ name ])) db/c.cc:281 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [46 %sfp+-72 S8 A64])
        (reg:DI 1 dx [ errptr ])) db/c.cc:281 89 {*movdi_internal}
     (nil))
(note 5 4 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 5 15 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                        (const_int 72 [0x48])) [3 D.37221+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [133])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) db/c.cc:281 986 {stack_tls_protect_set_di}
     (nil))
(insn 15 7 16 2 (parallel [
            (set (reg/f:DI 3 bx [131])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:109 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(insn 16 15 17 2 (parallel [
            (set (reg/f:DI 6 bp [106])
                (plus:DI (reg/f:DI 3 bx [131])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:109 218 {*adddi_1}
     (nil))
(insn 17 16 18 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [3 MEM[(struct _Alloc_hider *)&D.31531]._M_p+0 S8 A128])
        (reg/f:DI 6 bp [106])) /usr/include/c++/5/bits/basic_string.h:109 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 41 r12 [orig:100 name ] [100])
            (const_int 0 [0]))) /usr/include/c++/5/bits/basic_string.h:456 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 19 18 20 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 137)
            (pc))) /usr/include/c++/5/bits/basic_string.h:456 612 {*jcc_1}
     (int_list:REG_BR_PROB 2163 (nil))
 -> 137)
;;  succ:       3 [78.4%]  (FALLTHRU)
;;              25 [21.6%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

;; basic block 3, loop depth 0, count 0, freq 9996, maybe hot
;; Invalid sum of incoming frequencies 7837, should be 9996
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [78.4%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 44 [r15]
;; live  kill	
(note 20 19 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 3 (set (reg:DI 5 di)
        (reg/v/f:DI 41 r12 [orig:100 name ] [100])) /usr/include/c++/5/bits/char_traits.h:267 89 {*movdi_internal}
     (nil))
(call_insn/i 22 21 23 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7fb538cf5870 __builtin_strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) /usr/include/c++/5/bits/char_traits.h:267 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7fb538cf5870 __builtin_strlen>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 23 22 25 3 (set (reg:DI 44 r15 [108])
        (reg:DI 0 ax)) /usr/include/c++/5/bits/char_traits.h:267 89 {*movdi_internal}
     (nil))
(insn 25 23 26 3 (set (reg:DI 0 ax [orig:92 D.37218 ] [92])
        (reg:DI 44 r15 [108])) /usr/include/c++/5/bits/char_traits.h:267 89 {*movdi_internal}
     (nil))
(insn 26 25 27 3 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [9 __dnew+0 S8 A128])
        (reg:DI 44 r15 [108])) /usr/include/c++/5/bits/basic_string.tcc:219 89 {*movdi_internal}
     (nil))
(insn 27 26 28 3 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 44 r15 [108])
            (const_int 15 [0xf]))) /usr/include/c++/5/bits/basic_string.tcc:221 8 {*cmpdi_1}
     (nil))
(jump_insn 28 27 29 3 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 42)
            (pc))) /usr/include/c++/5/bits/basic_string.tcc:221 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 42)
;;  succ:       4 [29.0%]  (FALLTHRU)
;;              5 [71.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 4, loop depth 0, count 0, freq 2899, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [29.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 43 [r14] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 43 [r14]
;; live  kill	
(note 29 28 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 32 4 (set (reg/f:DI 43 r14 [132])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 16 [0x10]))) /usr/include/c++/5/bits/basic_string.tcc:223 214 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
(insn 32 30 33 4 (set (reg:DI 1 dx)
        (const_int 0 [0])) /usr/include/c++/5/bits/basic_string.tcc:223 89 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:DI 4 si)
        (reg/f:DI 43 r14 [132])) /usr/include/c++/5/bits/basic_string.tcc:223 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
(insn 34 33 35 4 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [131])) /usr/include/c++/5/bits/basic_string.tcc:223 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(call_insn 35 34 36 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm") [flags 0x41]  <function_decl 0x7fb537cba5e8 _M_create>) [0 _M_create S1 A8])
            (const_int 0 [0]))) /usr/include/c++/5/bits/basic_string.tcc:223 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm") [flags 0x41]  <function_decl 0x7fb537cba5e8 _M_create>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 36 35 37 4 (set (reg/f:DI 5 di [orig:94 D.37217 ] [94])
        (reg:DI 0 ax)) /usr/include/c++/5/bits/basic_string.tcc:223 89 {*movdi_internal}
     (nil))
(insn 37 36 38 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [3 MEM[(char * *)&D.31531]+0 S8 A128])
        (reg/f:DI 5 di [orig:94 D.37217 ] [94])) /usr/include/c++/5/bits/basic_string.h:127 89 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (set (reg:DI 0 ax [orig:112 __dnew ] [112])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [9 __dnew+0 S8 A128])) /usr/include/c++/5/bits/basic_string.h:159 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [9 __dnew+0 S8 A128])
        (nil)))
(insn 39 38 186 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [9 MEM[(size_type *)&D.31531 + 16B]+0 S8 A128])
        (reg:DI 0 ax [orig:112 __dnew ] [112])) /usr/include/c++/5/bits/basic_string.h:159 89 {*movdi_internal}
     (nil))
(jump_insn 186 39 187 4 (set (pc)
        (label_ref 60)) 654 {jump}
     (nil)
 -> 60)
;;  succ:       10 [100.0%] 
;; lr  out 	 3 [bx] 5 [di] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 187 186 42)
;; basic block 5, loop depth 0, count 0, freq 7097, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [71.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 42 187 43 5 235 "" [1 uses])
(note 43 42 44 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:92 D.37218 ] [92])
            (const_int 1 [0x1]))) /usr/include/c++/5/bits/basic_string.h:296 8 {*cmpdi_1}
     (nil))
(jump_insn 45 44 46 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 51)
            (pc))) /usr/include/c++/5/bits/basic_string.h:296 612 {*jcc_1}
     (int_list:REG_BR_PROB 7196 (nil))
 -> 51)
;;  succ:       6 [28.0%]  (FALLTHRU)
;;              7 [72.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 6, loop depth 0, count 0, freq 1990, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [28.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp] 41 [r12]
;; lr  def 	 1 [dx] 43 [r14]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx] 43 [r14]
;; live  kill	
(note 46 45 47 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 6 (set (reg:QI 1 dx [orig:113 MEM[(const char_type &)name_5(D)] ] [113])
        (mem:QI (reg/v/f:DI 41 r12 [orig:100 name ] [100]) [0 MEM[(const char_type &)name_5(D)]+0 S1 A8])) /usr/include/c++/5/bits/char_traits.h:243 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 MEM[(char_type &)&D.31531 + 16]+0 S1 A128])
        (nil)))
(insn 48 47 173 6 (set (mem/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [0 MEM[(char_type &)&D.31531 + 16]+0 S1 A128])
        (reg:QI 1 dx [orig:113 MEM[(const char_type &)name_5(D)] ] [113])) /usr/include/c++/5/bits/char_traits.h:243 93 {*movqi_internal}
     (nil))
(insn 173 48 188 6 (set (reg/f:DI 43 r14 [132])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 16 [0x10]))) 214 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
(jump_insn 188 173 189 6 (set (pc)
        (label_ref 73)) 654 {jump}
     (nil)
 -> 73)
;;  succ:       11 [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

(barrier 189 188 51)
;; basic block 7, loop depth 0, count 0, freq 5107, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [72.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 51 189 52 7 237 "" [1 uses])
(note 52 51 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:92 D.37218 ] [92])
            (const_int 0 [0]))) /usr/include/c++/5/bits/char_traits.h:288 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 54 53 55 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 151)
            (pc))) /usr/include/c++/5/bits/char_traits.h:288 612 {*jcc_1}
     (int_list:REG_BR_PROB 434 (nil))
 -> 151)
;;  succ:       8 [95.7%]  (FALLTHRU)
;;              9 [4.3%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 8, loop depth 0, count 0, freq 4885, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [95.7%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 43 [r14]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 42 [r13]
;; live  gen 	 43 [r14]
;; live  kill	
(note 55 54 174 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 174 55 190 8 (set (reg/f:DI 43 r14 [132])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 16 [0x10]))) 214 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
(jump_insn 190 174 191 8 (set (pc)
        (label_ref 73)) 654 {jump}
     (nil)
 -> 73)
;;  succ:       11 [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

(barrier 191 190 151)
;; basic block 9, loop depth 0, count 0, freq 222, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [4.3%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 5 [di] 43 [r14]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 5 [di] 43 [r14]
;; live  kill	
(code_label 151 191 150 9 246 "" [1 uses])
(note 150 151 9 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 9 150 175 9 (set (reg/f:DI 5 di [orig:94 D.37217 ] [94])
        (reg/f:DI 6 bp [106])) /usr/include/c++/5/bits/char_traits.h:288 89 {*movdi_internal}
     (nil))
(insn 175 9 60 9 (set (reg/f:DI 43 r14 [132])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 16 [0x10]))) 214 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
;;  succ:       10 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 10, loop depth 0, count 0, freq 3121, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [100.0%]  (FALLTHRU)
;;              4 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp] 41 [r12] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 6 [bp]
;; live  kill	
(code_label 60 175 61 10 236 "" [1 uses])
(note 61 60 65 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 65 61 66 10 (set (reg:DI 1 dx)
        (reg:DI 44 r15 [108])) /usr/include/c++/5/bits/char_traits.h:290 89 {*movdi_internal}
     (nil))
(insn 66 65 68 10 (set (reg:DI 4 si)
        (reg/v/f:DI 41 r12 [orig:100 name ] [100])) /usr/include/c++/5/bits/char_traits.h:290 89 {*movdi_internal}
     (nil))
(call_insn 68 66 71 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x41]  <function_decl 0x7fb5372f5948 memcpy>) [0 memcpy S1 A8])
            (const_int 0 [0]))) /usr/include/c++/5/bits/char_traits.h:290 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("memcpy") [flags 0x41]  <function_decl 0x7fb5372f5948 memcpy>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 71 68 72 10 (set (reg:DI 0 ax [orig:92 D.37218 ] [92])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [9 __dnew+0 S8 A128])) 89 {*movdi_internal}
     (nil))
(insn 72 71 73 10 (set (reg/f:DI 6 bp [orig:93 D.37217 ] [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [3 MEM[(char * *)&D.31531]+0 S8 A128])) 89 {*movdi_internal}
     (nil))
;;  succ:       11 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

;; basic block 11, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [100.0%]  (FALLTHRU)
;;              6 [100.0%] 
;;              8 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 1 [dx] 4 [si] 5 [di]
;; live  kill	
(code_label 73 72 74 11 238 "" [2 uses])
(note 74 73 75 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 11 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [9 MEM[(size_type *)&D.31531 + 8B]+0 S8 A64])
        (reg:DI 0 ax [orig:92 D.37218 ] [92])) /usr/include/c++/5/bits/basic_string.h:131 89 {*movdi_internal}
     (nil))
(insn 76 75 79 11 (set (mem:QI (plus:DI (reg/f:DI 6 bp [orig:93 D.37217 ] [93])
                (reg:DI 0 ax [orig:92 D.37218 ] [92])) [0 MEM[(char_type &)_47]+0 S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/bits/char_traits.h:243 93 {*movqi_internal}
     (nil))
(insn 79 76 80 11 (set (reg:DI 1 dx)
        (reg/v/f:DI 42 r13 [orig:99 options ] [99])) db/c.cc:282 89 {*movdi_internal}
     (nil))
(insn 80 79 81 11 (set (reg:DI 4 si)
        (reg/f:DI 3 bx [131])) db/c.cc:282 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(insn 81 80 82 11 (set (reg:DI 5 di)
        (reg/f:DI 43 r14 [132])) db/c.cc:282 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
(call_insn 82 81 83 11 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb9DestroyDBERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_7OptionsE") [flags 0x41]  <function_decl 0x7fb5378210d8 DestroyDB>) [0 DestroyDB S1 A8])
        (const_int 0 [0])) db/c.cc:282 660 {*call}
     (expr_list:REG_EH_REGION (const_int 2 [0x2])
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb9DestroyDBERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_7OptionsE") [flags 0x41]  <function_decl 0x7fb5378210d8 DestroyDB>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       21 (ABNORMAL,ABNORMAL_CALL,EH)
;;              12 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp] 16 [argp] 43 [r14]
;; live  out 	 3 [bx] 7 [sp] 43 [r14]

;; basic block 12, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [100.0%]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 16 [argp] 43 [r14]
;; lr  use 	 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp] 43 [r14]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	
(note 83 82 85 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 85 83 86 12 (set (reg:DI 4 si)
        (reg/f:DI 43 r14 [132])) db/c.cc:282 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
(insn 86 85 87 12 (set (reg:DI 5 di)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [46 %sfp+-72 S8 A64])) db/c.cc:282 89 {*movdi_internal}
     (nil))
(call_insn 87 86 88 12 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("SaveError") [flags 0x3]  <function_decl 0x7fb53738c798 SaveError>) [0 SaveError S1 A8])
            (const_int 0 [0]))) db/c.cc:282 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("SaveError") [flags 0x3]  <function_decl 0x7fb53738c798 SaveError>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       17 (ABNORMAL,ABNORMAL_CALL,EH)
;;              13 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp] 16 [argp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 13, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       12 [100.0%]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(note 88 87 89 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 13 (set (reg/f:DI 5 di [orig:89 D.37216 ] [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [3 D.31532.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn 90 89 91 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:89 D.37216 ] [89])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 91 90 92 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 95)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (int_list:REG_BR_PROB 3017 (nil))
 -> 95)
;;  succ:       14 [69.8%]  (FALLTHRU)
;;              15 [30.2%] 
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

;; basic block 14, loop depth 0, count 0, freq 6980, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       13 [69.8%]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 92 91 94 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(call_insn 94 92 95 14 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       15 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 15, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       13 [30.2%] 
;;              14 [100.0%]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 3 [bx] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 3 [bx] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 95 94 96 15 239 "" [1 uses])
(note 96 95 97 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 99 15 (set (reg/f:DI 5 di [orig:91 D.37217 ] [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [3 MEM[(char * *)&D.31531]+0 S8 A128])) 89 {*movdi_internal}
     (nil))
(insn 99 97 100 15 (parallel [
            (set (reg/f:DI 3 bx [123])
                (plus:DI (reg/f:DI 3 bx [131])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:179 218 {*adddi_1}
     (nil))
(insn 100 99 101 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:91 D.37217 ] [91])
            (reg/f:DI 3 bx [123]))) /usr/include/c++/5/bits/basic_string.h:179 8 {*cmpdi_1}
     (nil))
(jump_insn 101 100 102 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 142)
            (pc))) /usr/include/c++/5/bits/basic_string.h:179 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 142)
;;  succ:       16 [78.3%]  (FALLTHRU)
;;              26 [21.6%] 
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

;; basic block 16, loop depth 0, count 0, freq 7832, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [78.3%]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 102 101 104 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(call_insn 104 102 192 16 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/ext/new_allocator.h:110 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 192 104 193 16 (set (pc)
        (label_ref 142)) db/c.cc:283 654 {jump}
     (nil)
 -> 142)
;;  succ:       26 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 193 192 160)
;; basic block 17, loop depth 0, count 0, freq 0
;;  prev block 16, next block 19, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       12 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 17 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 17 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 3 [bx] 7 [sp] 16 [argp]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	
(code_label/s 160 193 163 17 248 "" [1 uses])
(note 163 160 161 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 161 163 111 17 (set (reg:DI 6 bp [125])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (nil))
(insn 111 161 112 17 (set (reg/f:DI 5 di [orig:88 D.37216 ] [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [3 D.31532.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn 112 111 113 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:88 D.37216 ] [88])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 113 112 114 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 121)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (int_list:REG_BR_PROB 3017 (nil))
 -> 121)
;;  succ:       19 [69.8%]  (FALLTHRU)
;;              22 [30.2%] 
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 19, loop depth 0, count 0, freq 0
;;  prev block 17, next block 21, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       17 [69.8%]  (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(note 114 113 116 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(call_insn 116 114 194 19 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 194 116 195 19 (set (pc)
        (label_ref 121)) 654 {jump}
     (nil)
 -> 121)
;;  succ:       22 [100.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

(barrier 195 194 154)
;; basic block 21, loop depth 0, count 0, freq 0
;;  prev block 19, next block 22, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 21 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 21 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 3 [bx] 7 [sp] 16 [argp]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 6 [bp]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 6 [bp]
;; live  kill	
(code_label/s 154 195 159 21 247 "" [1 uses])
(note 159 154 155 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 155 159 121 21 (set (reg:DI 6 bp [124])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (nil))
;;  succ:       22 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 22, loop depth 0, count 0, freq 0
;;  prev block 21, next block 23, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       21 [100.0%]  (FALLTHRU)
;;              19 [100.0%] 
;;              17 [30.2%] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 3 [bx] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 3 [bx] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 121 155 122 22 243 "" [2 uses])
(note 122 121 123 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 123 122 125 22 (set (reg/f:DI 5 di [orig:90 D.37217 ] [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [3 MEM[(char * *)&D.31531]+0 S8 A128])) 89 {*movdi_internal}
     (nil))
(insn 125 123 126 22 (parallel [
            (set (reg/f:DI 3 bx [129])
                (plus:DI (reg/f:DI 3 bx [131])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:179 218 {*adddi_1}
     (nil))
(insn 126 125 127 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:90 D.37217 ] [90])
            (reg/f:DI 3 bx [129]))) /usr/include/c++/5/bits/basic_string.h:179 8 {*cmpdi_1}
     (nil))
(jump_insn 127 126 128 22 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 131)
            (pc))) /usr/include/c++/5/bits/basic_string.h:179 612 {*jcc_1}
     (int_list:REG_BR_PROB 3017 (nil))
 -> 131)
;;  succ:       23 [69.8%]  (FALLTHRU)
;;              24 [30.2%] 
;; lr  out 	 5 [di] 6 [bp] 7 [sp]
;; live  out 	 5 [di] 6 [bp] 7 [sp]

;; basic block 23, loop depth 0, count 0, freq 0
;;  prev block 22, next block 24, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       22 [69.8%]  (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(note 128 127 130 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(call_insn 130 128 131 23 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/ext/new_allocator.h:110 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       24 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

;; basic block 24, loop depth 0, count 0, freq 0
;;  prev block 23, next block 25, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       22 [30.2%] 
;;              23 [100.0%]  (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 131 130 132 24 244 "" [1 uses])
(note 132 131 134 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 134 132 135 24 (set (reg:DI 5 di)
        (reg:DI 6 bp [124])) 89 {*movdi_internal}
     (nil))
(call_insn 135 134 136 24 (call (mem:QI (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>) [0 __builtin_unwind_resume S1 A8])
        (const_int 0 [0])) 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 136 135 137)
;; basic block 25, loop depth 0, count 0, freq 1275, maybe hot
;; Invalid sum of incoming frequencies 2163, should be 1275
;;  prev block 24, next block 26, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [21.6%] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 137 136 138 25 234 "" [1 uses])
(note 138 137 139 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 25 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7fb536e46480 *.LC23>)) /usr/include/c++/5/bits/basic_string.tcc:216 89 {*movdi_internal}
     (nil))
(call_insn 140 139 141 25 (call (mem:QI (symbol_ref:DI ("_ZSt19__throw_logic_errorPKc") [flags 0x41]  <function_decl 0x7fb5388d86c0 __throw_logic_error>) [0 __throw_logic_error S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/bits/basic_string.tcc:216 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZSt19__throw_logic_errorPKc") [flags 0x41]  <function_decl 0x7fb5388d86c0 __throw_logic_error>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 141 140 142)
;; basic block 26, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 25, next block 27, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [21.6%] 
;;              16 [100.0%] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	 0 [ax]
(code_label 142 141 149 26 233 "" [2 uses])
(note 149 142 144 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 144 149 145 26 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                                (const_int 72 [0x48])) [3 D.37221+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 0 ax [134]))
        ]) db/c.cc:283 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 145 144 152 26 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 148)
            (pc))) db/c.cc:283 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 148)
;;  succ:       28 [100.0%] 
;;              27 [0.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 27, loop depth 0, count 0, freq 4
;;  prev block 26, next block 28, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       26 [0.0%]  (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 152 145 146 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(call_insn 146 152 147 27 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) db/c.cc:283 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 147 146 148)
;; basic block 28, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 27, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       26 [100.0%] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 148 147 153 28 245 "" [1 uses])
(note 153 148 196 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 196 153 0 NOTE_INSN_DELETED)

;; Function void leveldb_repair_db(const leveldb_options_t*, const char*, char**) (leveldb_repair_db, funcdef_no=1444, decl_uid=2217, cgraph_uid=551, symbol_order=554)

      Creating newreg=133
Removing SCRATCH in insn #7 (nop 2)
rescanning insn with uid = 7.
      Creating newreg=134
Removing SCRATCH in insn #144 (nop 3)
rescanning insn with uid = 144.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=128, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-56, prev_offset=0)
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non input pseudo reload: reject++
          alt=3,overall=607,losers=1,rld_nregs=1
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            0 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r133
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 15:  (0) r  (1) r  (2) le {*adddi_1}
            1 Matching alt: reject+=2
          alt=0,overall=8,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
          alt=1,overall=8,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 16:  (0) r  (1) r  (2) le {*adddi_1}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 26:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 27:  (0) rm  (1) re {*cmpdi_1}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 32:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 35:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 37:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 39:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 44:  (0) rm  (1) re {*cmpdi_1}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 47:  (0) q  (1) qm {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 48:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 53:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 68:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 75:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 76:  (0) m  (1) qn {*movqi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 82:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=3,overall=1,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 87:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 90:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 94:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 99:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 100:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 104:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 112:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 116:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 125:  (0) =r  (1) %0  (2) rme {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 126:  (0) rm  (1) re {*cmpdi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 130:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 135:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
          alt=4,overall=0,losers=0,rld_nregs=0
	 Choosing alt 4 in insn 139:  (0) r  (1) i {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 140:  (0) rBwBz {*call}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r134
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 146:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 24
   Insn 135: point = 0
   Insn 134: point = 0
  BB 23
   Insn 130: point = 2
   Insn 129: point = 2
  BB 22
   Insn 127: point = 4
   Insn 126: point = 4
   Insn 125: point = 5
   Insn 123: point = 7
  BB 20
   Insn 194: point = 9
   Insn 119: point = 9
  BB 19
   Insn 116: point = 12
   Insn 115: point = 12
  BB 18
   Insn 113: point = 14
   Insn 112: point = 14
   Insn 111: point = 14
  BB 17
   Insn 161: point = 16
  BB 21
   Insn 155: point = 18
  BB 25
   Insn 140: point = 20
   Insn 139: point = 20
  BB 27
   Insn 146: point = 20
  BB 28
  BB 26
   Insn 145: point = 20
   Insn 144: point = 20
  BB 16
   Insn 192: point = 21
   Insn 104: point = 21
   Insn 103: point = 21
  BB 15
   Insn 101: point = 23
   Insn 100: point = 23
   Insn 99: point = 24
   Insn 97: point = 26
  BB 14
   Insn 94: point = 28
   Insn 93: point = 28
  BB 13
   Insn 91: point = 30
   Insn 90: point = 30
   Insn 89: point = 30
  BB 12
   Insn 87: point = 32
   Insn 86: point = 32
   Insn 85: point = 33
  BB 11
   Insn 82: point = 35
   Insn 81: point = 35
   Insn 80: point = 35
   Insn 79: point = 35
   Insn 76: point = 36
   Insn 75: point = 37
  BB 8
   Insn 190: point = 38
   Insn 174: point = 38
   Insn 57: point = 39
  BB 6
   Insn 188: point = 42
   Insn 173: point = 42
   Insn 11: point = 43
   Insn 48: point = 45
   Insn 47: point = 46
  BB 10
   Insn 72: point = 49
   Insn 71: point = 50
   Insn 68: point = 51
   Insn 67: point = 51
   Insn 66: point = 52
   Insn 65: point = 53
  BB 4
   Insn 186: point = 55
   Insn 39: point = 55
   Insn 38: point = 56
   Insn 37: point = 57
   Insn 36: point = 57
   Insn 35: point = 58
   Insn 34: point = 58
   Insn 33: point = 58
   Insn 32: point = 58
   Insn 30: point = 58
  BB 9
   Insn 175: point = 60
   Insn 9: point = 61
  BB 7
   Insn 54: point = 64
   Insn 53: point = 64
  BB 5
   Insn 45: point = 65
   Insn 44: point = 65
  BB 3
   Insn 28: point = 66
   Insn 27: point = 66
   Insn 26: point = 66
   Insn 25: point = 66
   Insn 23: point = 67
   Insn 22: point = 68
   Insn 21: point = 68
  BB 2
   Insn 19: point = 69
   Insn 18: point = 69
   Insn 17: point = 69
   Insn 16: point = 69
   Insn 15: point = 70
   Insn 7: point = 71
   Insn 4: point = 73
   Insn 3: point = 74
   Insn 2: point = 75
 r88: [12..14]
 r89: [28..30]
 r90: [2..7]
 r91: [21..26]
 r92: [64..66] [36..50]
 r93: [49..49] [42..43] [36..39]
 r94: [60..61] [51..57]
 r99: [35..75]
 r100: [52..74] [47..48]
 r101: [32..73]
 r106: [62..69] [44..48] [40..41]
 r108: [53..67]
 r112: [55..56]
 r113: [45..46]
 r123: [23..24]
 r124: [18..18] [0..9]
 r125: [10..16]
 r129: [4..5]
 r131: [25..70] [6..19]
 r132: [60..60] [49..58] [42..42] [33..38]
 r133: [71..72]
 r134: [20..20]
Compressing live ranges: from 76 to 35 - 46%
Ranges after the compression:
 r88: [4..5]
 r89: [13..14]
 r90: [0..3]
 r91: [9..12]
 r92: [31..32] [15..26]
 r93: [25..25] [19..20] [15..16]
 r94: [27..30]
 r99: [15..34]
 r100: [27..34] [23..24]
 r101: [15..34]
 r106: [31..32] [21..24] [17..18]
 r108: [27..32]
 r112: [27..28]
 r113: [21..22]
 r123: [9..10]
 r124: [6..6] [0..3]
 r125: [4..5]
 r129: [0..1]
 r131: [11..32] [2..7]
 r132: [25..29] [19..19] [15..16]
 r133: [33..34]
 r134: [8..8]

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5
EBB 6
EBB 7 8
EBB 9
EBB 10
EBB 11 12 13 14
EBB 15 16
EBB 17
EBB 18 19
EBB 20
EBB 21
EBB 22 23
EBB 24
EBB 25
EBB 26
EBB 27
EBB 28

********** Pseudo live ranges #2: **********

  BB 24
   Insn 135: point = 0
   Insn 134: point = 0
  BB 23
   Insn 130: point = 2
   Insn 129: point = 2
  BB 22
   Insn 127: point = 4
   Insn 126: point = 4
   Insn 125: point = 5
   Insn 123: point = 7
  BB 20
   Insn 194: point = 9
   Insn 119: point = 9
  BB 19
   Insn 116: point = 12
   Insn 115: point = 12
  BB 18
   Insn 113: point = 14
   Insn 112: point = 14
   Insn 111: point = 14
  BB 17
   Insn 161: point = 16
  BB 21
   Insn 155: point = 18
  BB 25
   Insn 140: point = 20
   Insn 139: point = 20
  BB 27
   Insn 146: point = 20
  BB 28
  BB 26
   Insn 145: point = 20
   Insn 144: point = 20
  BB 16
   Insn 192: point = 21
   Insn 104: point = 21
   Insn 103: point = 21
  BB 15
   Insn 101: point = 23
   Insn 100: point = 23
   Insn 99: point = 24
   Insn 97: point = 26
  BB 14
   Insn 94: point = 28
   Insn 93: point = 28
  BB 13
   Insn 91: point = 30
   Insn 90: point = 30
   Insn 89: point = 30
  BB 12
   Insn 87: point = 32
   Insn 86: point = 32
   Insn 85: point = 33
  BB 11
   Insn 82: point = 35
   Insn 81: point = 35
   Insn 80: point = 35
   Insn 79: point = 35
   Insn 76: point = 36
   Insn 75: point = 37
  BB 8
   Insn 190: point = 38
   Insn 174: point = 38
   Insn 57: point = 39
  BB 6
   Insn 188: point = 42
   Insn 173: point = 42
   Insn 11: point = 43
   Insn 48: point = 45
   Insn 47: point = 46
  BB 10
   Insn 72: point = 49
   Insn 71: point = 50
   Insn 68: point = 51
   Insn 67: point = 51
   Insn 66: point = 52
   Insn 65: point = 53
  BB 4
   Insn 186: point = 55
   Insn 39: point = 55
   Insn 38: point = 56
   Insn 37: point = 57
   Insn 36: point = 57
   Insn 35: point = 58
   Insn 34: point = 58
   Insn 33: point = 58
   Insn 32: point = 58
   Insn 30: point = 58
  BB 9
   Insn 175: point = 60
   Insn 9: point = 61
  BB 7
   Insn 54: point = 64
   Insn 53: point = 64
  BB 5
   Insn 45: point = 65
   Insn 44: point = 65
  BB 3
   Insn 28: point = 66
   Insn 27: point = 66
   Insn 26: point = 66
   Insn 25: point = 66
   Insn 23: point = 67
   Insn 22: point = 68
   Insn 21: point = 68
  BB 2
   Insn 19: point = 69
   Insn 18: point = 69
   Insn 17: point = 69
   Insn 16: point = 69
   Insn 15: point = 70
   Insn 7: point = 71
   Insn 4: point = 73
   Insn 3: point = 74
   Insn 2: point = 75
 r88: [12..14]
 r89: [28..30]
 r90: [2..7]
 r91: [21..26]
 r92: [64..66] [36..50]
 r93: [49..49] [42..43] [36..39]
 r94: [60..61] [51..57]
 r99: [35..75]
 r100: [52..74] [47..48]
 r101: [32..73]
 r106: [62..69] [44..48] [40..41]
 r108: [53..67]
 r112: [55..56]
 r113: [45..46]
 r123: [23..24]
 r124: [18..18] [0..9]
 r125: [10..16]
 r129: [4..5]
 r131: [25..70] [6..19]
 r132: [60..60] [49..58] [42..42] [33..38]
 r133: [71..72]
 r134: [20..20]
Compressing live ranges: from 76 to 35 - 46%
Ranges after the compression:
 r88: [4..5]
 r89: [13..14]
 r90: [0..3]
 r91: [9..12]
 r92: [31..32] [15..26]
 r93: [25..25] [19..20] [15..16]
 r94: [27..30]
 r99: [15..34]
 r100: [27..34] [23..24]
 r101: [15..34]
 r106: [31..32] [21..24] [17..18]
 r108: [27..32]
 r112: [27..28]
 r113: [21..22]
 r123: [9..10]
 r124: [6..6] [0..3]
 r125: [4..5]
 r129: [0..1]
 r131: [11..32] [2..7]
 r132: [25..29] [19..19] [15..16]
 r133: [33..34]
 r134: [8..8]

********** Assignment #1: **********

	 Assigning to 133 (cl=INDEX_REGS, orig=133, freq=1000, tfirst=133, tfreq=1000)...
	   Assign 0 to reload r133 (freq=1000)
	 Assigning to 134 (cl=INDEX_REGS, orig=134, freq=1000, tfirst=134, tfreq=1000)...
	   Assign 0 to reload r134 (freq=1000)
  Reassigning non-reload pseudos

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7

******** Rematerialization #1: ********

df_worklist_dataflow_doublequeue:n_basic_blocks 29 n_edges 36 count 29 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 29 n_edges 36 count 29 (    1)

Cands:

BB 2:
  register live in: 1 [dx] 4 [si] 5 [di] 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 99 100 101 106 131
  changed regs: 99 100 101 106 131 133
  dead regs: 1 [dx] 4 [si] 5 [di] 17 [flags] 20 [frame]

BB 3:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 99 100 101 106 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 99 100 101 106 108 131
  changed regs: 0 [ax] 5 [di] 92 108
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 4:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 99 100 101 108 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94 99 100 101 108 131 132
  changed regs: 0 [ax] 1 [dx] 4 [si] 5 [di] 94 112 132
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 112

BB 5:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 99 100 101 106 108 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 99 100 101 106 108 131
  changed regs:
  dead regs: 17 [flags]

BB 6:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 99 100 101 106 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 93 99 101 131 132
  changed regs: 93 113 132
  dead regs: 20 [frame] 100 106 113

BB 7:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 99 100 101 106 108 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 99 100 101 106 108 131
  changed regs:
  dead regs: 17 [flags]

BB 8:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 99 101 106 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 93 99 101 131 132
  changed regs: 93 132
  dead regs: 20 [frame] 106

BB 9:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 99 100 101 106 108 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94 99 100 101 108 131 132
  changed regs: 94 132
  dead regs: 20 [frame] 106

BB 10:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 94 99 100 101 108 131 132
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 93 99 101 131 132
  changed regs: 0 [ax] 1 [dx] 4 [si] 5 [di] 92 93
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 94 100 108

BB 11:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 92 93 99 101 131 132
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 131 132
  changed regs: 1 [dx] 4 [si] 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 92 93 99

BB 12:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 101 131 132
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 131
  changed regs: 0 [ax] 4 [si] 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 101 132

BB 13:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 131
  changed regs: 89
  dead regs: 17 [flags] 20 [frame]

BB 14:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 89 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 131
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 89

BB 15:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91
  changed regs: 91 123
  dead regs: 17 [flags] 20 [frame] 123 131

BB 16:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 91
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 91

BB 17:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 125 131
  changed regs: 125
  dead regs: 0 [ax]

BB 18:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 125 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 125 131
  changed regs: 88
  dead regs: 17 [flags] 20 [frame]

BB 19:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 88 125 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 125 131
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 88

BB 20:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 125 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 124 131
  changed regs: 124
  dead regs: 125

BB 21:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 124 131
  changed regs: 124
  dead regs: 0 [ax]

BB 22:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 124 131
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90 124
  changed regs: 90 129
  dead regs: 17 [flags] 20 [frame] 129 131

BB 23:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 90 124
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 124
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 90

BB 24:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame] 124
  register live out: 7 [sp] 16 [argp] 20 [frame]
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 [] 124

BB 25:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  register live out: 7 [sp] 16 [argp] 20 [frame]
  changed regs: 5 [di]
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 26:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs: 17 [flags] 134
  dead regs: 17 [flags] 20 [frame]

BB 27:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  register live out: 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs: 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 16 [argp] 17 [flags] 18 [fpsr] 19 [fpcr] 20 [frame] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []

BB 28:
  register live in: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  register live out: 6 [bp] 7 [sp] 16 [argp] 20 [frame]
  changed regs:
  dead regs:
subreg regs:
  Slot 0 regnos (width = 8):	 101
Changing spilled pseudos to memory in insn #4
Changing spilled pseudos to memory in insn #86
	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=144, prev_offset=128)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=80, prev_offset=64)
Can eliminate 20 to 6 (offset=-56, prev_offset=0)

********** Local #3: **********

	   Spilling non-eliminable hard regs: 7
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 175:  (0) =r  (1) Ts {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 174:  (0) =r  (1) Ts {*leadi}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 173:  (0) =r  (1) Ts {*leadi}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 144:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 123:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 111:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 97:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 89:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 75:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 72:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 71:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=609,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=5,overall=615,losers=1,rld_nregs=1
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 48:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 39:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 38:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 37:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 30:  (0) =r  (1) Ts {*leadi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 26:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 15:  (0) r  (1) r  (2) le {*adddi_1}
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 86:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 4:  (0) m  (1) re {*movdi_internal}
New elimination table:
Can eliminate 16 to 7 (offset=144, prev_offset=144)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=80, prev_offset=80)
Can eliminate 20 to 6 (offset=-56, prev_offset=0)
changing reg in insn 111
changing reg in insn 115
changing reg in insn 112
changing reg in insn 89
changing reg in insn 93
changing reg in insn 90
changing reg in insn 123
changing reg in insn 129
changing reg in insn 126
changing reg in insn 97
changing reg in insn 103
changing reg in insn 100
changing reg in insn 25
changing reg in insn 71
changing reg in insn 53
changing reg in insn 44
changing reg in insn 76
changing reg in insn 75
changing reg in insn 57
changing reg in insn 11
changing reg in insn 72
changing reg in insn 76
changing reg in insn 9
changing reg in insn 36
changing reg in insn 67
changing reg in insn 37
changing reg in insn 2
changing reg in insn 79
changing reg in insn 3
changing reg in insn 66
changing reg in insn 47
changing reg in insn 21
changing reg in insn 18
changing reg in insn 16
changing reg in insn 57
changing reg in insn 11
changing reg in insn 9
changing reg in insn 17
changing reg in insn 23
changing reg in insn 65
changing reg in insn 27
changing reg in insn 26
changing reg in insn 25
changing reg in insn 38
changing reg in insn 39
changing reg in insn 47
changing reg in insn 48
changing reg in insn 99
changing reg in insn 100
changing reg in insn 155
changing reg in insn 119
changing reg in insn 134
changing reg in insn 161
changing reg in insn 119
changing reg in insn 125
changing reg in insn 126
changing reg in insn 15
changing reg in insn 34
changing reg in insn 125
changing reg in insn 99
changing reg in insn 80
changing reg in insn 16
changing reg in insn 175
changing reg in insn 174
changing reg in insn 173
changing reg in insn 30
changing reg in insn 85
changing reg in insn 81
changing reg in insn 33
changing reg in insn 7
changing reg in insn 144
deleting insn with uid = 11.
deleting insn with uid = 57.
deleting insn with uid = 67.
deleting insn with uid = 93.
deleting insn with uid = 103.
deleting insn with uid = 115.
deleting insn with uid = 119.
deleting insn with uid = 129.


try_optimize_cfg iteration 1

Merging block 18 into block 17...
changing bb of uid 111
  from 18 to 17
changing bb of uid 112
  from 18 to 17
changing bb of uid 113
  from 18 to 17
Merged blocks 17 and 18.
Merged 17 and 18 without moving.
Edge 17->20 redirected to 22
Merging block 20 into block 19...
changing bb of uid 194
  from 20 to 19
Merged blocks 19 and 20.
Merged 19 and 20 without moving.


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 35.
verify found no changes in insn with uid = 68.
verify found no changes in insn with uid = 82.
verify found no changes in insn with uid = 87.
verify found no changes in insn with uid = 94.
verify found no changes in insn with uid = 104.
verify found no changes in insn with uid = 116.
verify found no changes in insn with uid = 130.
verify found no changes in insn with uid = 135.
verify found no changes in insn with uid = 140.
verify found no changes in insn with uid = 146.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 27 n_edges 34 count 27 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 27 n_edges 34 count 27 (    1)


void leveldb_repair_db(const leveldb_options_t*, const char*, char**)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 41[r12] 42[r13] 43[r14] 44[r15]
;;  ref usage 	r0={20d,9u} r1={19d,5u} r2={13d} r3={3d,7u} r4={17d,5u} r5={25d,17u} r6={4d,4u} r7={1d,60u} r8={12d} r9={12d} r10={12d} r11={12d} r12={12d} r13={12d} r14={12d} r15={12d} r16={2u} r17={26d,9u} r18={12d} r19={12d} r20={12e} r21={13d} r22={13d} r23={13d} r24={13d} r25={13d} r26={13d} r27={13d} r28={13d} r29={12d} r30={12d} r31={12d} r32={12d} r33={12d} r34={12d} r35={12d} r36={12d} r37={13d} r38={13d} r39={12d} r40={12d} r41={1d,4u} r42={1d,1u} r43={4d,3u} r44={1d,4u} r45={12d} r46={12d} r47={12d} r48={12d} r49={12d} r50={12d} r51={12d} r52={12d} r53={12d} r54={12d} r55={12d} r56={12d} r57={12d} r58={12d} r59={12d} r60={12d} r61={12d} r62={12d} r63={12d} r64={12d} r65={12d} r66={12d} r67={12d} r68={12d} r69={12d} r70={12d} r71={12d} r72={12d} r73={12d} r74={12d} r75={12d} r76={12d} r77={12d} r78={12d} r79={12d} r80={12d} 
;;    total ref usage 1079{937d,130u,12e} in 81{69 regular + 12 call} insns.
(note 1 0 12 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 7 [sp] 16 [argp]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 3 [bx] 6 [bp] 17 [flags] 41 [r12] 42 [r13]
;; live  in  	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 6 [bp] 17 [flags] 41 [r12] 42 [r13]
;; live  kill	 17 [flags]
(note 12 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 12 3 2 (set (reg/v/f:DI 42 r13 [orig:99 options ] [99])
        (reg:DI 5 di [ options ])) db/c.cc:288 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg/v/f:DI 41 r12 [orig:100 name ] [100])
        (reg:DI 4 si [ name ])) db/c.cc:288 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [46 %sfp+-72 S8 A64])
        (reg:DI 1 dx [ errptr ])) db/c.cc:288 89 {*movdi_internal}
     (nil))
(note 5 4 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 5 15 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                        (const_int 72 [0x48])) [3 D.37244+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [133])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) db/c.cc:288 986 {stack_tls_protect_set_di}
     (nil))
(insn 15 7 16 2 (parallel [
            (set (reg/f:DI 3 bx [131])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 32 [0x20])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:109 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(insn 16 15 17 2 (parallel [
            (set (reg/f:DI 6 bp [106])
                (plus:DI (reg/f:DI 3 bx [131])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:109 218 {*adddi_1}
     (nil))
(insn 17 16 18 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [3 MEM[(struct _Alloc_hider *)&D.31540]._M_p+0 S8 A128])
        (reg/f:DI 6 bp [106])) /usr/include/c++/5/bits/basic_string.h:109 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 41 r12 [orig:100 name ] [100])
            (const_int 0 [0]))) /usr/include/c++/5/bits/basic_string.h:456 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 19 18 20 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 137)
            (pc))) /usr/include/c++/5/bits/basic_string.h:456 612 {*jcc_1}
     (int_list:REG_BR_PROB 2163 (nil))
 -> 137)
;;  succ:       3 [78.4%]  (FALLTHRU)
;;              25 [21.6%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13]
;; live  out 	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]

;; basic block 3, loop depth 0, count 0, freq 9996, maybe hot
;; Invalid sum of incoming frequencies 7837, should be 9996
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [78.4%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp] 41 [r12]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 44 [r15] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 0 [ax] 5 [di] 17 [flags] 44 [r15]
;; live  kill	
(note 20 19 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 3 (set (reg:DI 5 di)
        (reg/v/f:DI 41 r12 [orig:100 name ] [100])) /usr/include/c++/5/bits/char_traits.h:267 89 {*movdi_internal}
     (nil))
(call_insn/i 22 21 23 3 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7fb538cf5870 __builtin_strlen>) [0 __builtin_strlen S1 A8])
            (const_int 0 [0]))) /usr/include/c++/5/bits/char_traits.h:267 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("strlen") [flags 0x41]  <function_decl 0x7fb538cf5870 __builtin_strlen>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 23 22 25 3 (set (reg:DI 44 r15 [108])
        (reg:DI 0 ax)) /usr/include/c++/5/bits/char_traits.h:267 89 {*movdi_internal}
     (nil))
(insn 25 23 26 3 (set (reg:DI 0 ax [orig:92 D.37241 ] [92])
        (reg:DI 44 r15 [108])) /usr/include/c++/5/bits/char_traits.h:267 89 {*movdi_internal}
     (nil))
(insn 26 25 27 3 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [9 __dnew+0 S8 A128])
        (reg:DI 44 r15 [108])) /usr/include/c++/5/bits/basic_string.tcc:219 89 {*movdi_internal}
     (nil))
(insn 27 26 28 3 (set (reg:CC 17 flags)
        (compare:CC (reg:DI 44 r15 [108])
            (const_int 15 [0xf]))) /usr/include/c++/5/bits/basic_string.tcc:221 8 {*cmpdi_1}
     (nil))
(jump_insn 28 27 29 3 (set (pc)
        (if_then_else (leu (reg:CC 17 flags)
                (const_int 0 [0]))
            (label_ref 42)
            (pc))) /usr/include/c++/5/bits/basic_string.tcc:221 612 {*jcc_1}
     (int_list:REG_BR_PROB 7100 (nil))
 -> 42)
;;  succ:       4 [29.0%]  (FALLTHRU)
;;              5 [71.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 4, loop depth 0, count 0, freq 2899, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [29.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 43 [r14] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 5 [di] 43 [r14]
;; live  kill	
(note 29 28 30 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 30 29 32 4 (set (reg/f:DI 43 r14 [132])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 16 [0x10]))) /usr/include/c++/5/bits/basic_string.tcc:223 214 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
(insn 32 30 33 4 (set (reg:DI 1 dx)
        (const_int 0 [0])) /usr/include/c++/5/bits/basic_string.tcc:223 89 {*movdi_internal}
     (nil))
(insn 33 32 34 4 (set (reg:DI 4 si)
        (reg/f:DI 43 r14 [132])) /usr/include/c++/5/bits/basic_string.tcc:223 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
(insn 34 33 35 4 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [131])) /usr/include/c++/5/bits/basic_string.tcc:223 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(call_insn 35 34 36 4 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm") [flags 0x41]  <function_decl 0x7fb537cba5e8 _M_create>) [0 _M_create S1 A8])
            (const_int 0 [0]))) /usr/include/c++/5/bits/basic_string.tcc:223 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERmm") [flags 0x41]  <function_decl 0x7fb537cba5e8 _M_create>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 36 35 37 4 (set (reg/f:DI 5 di [orig:94 D.37240 ] [94])
        (reg:DI 0 ax)) /usr/include/c++/5/bits/basic_string.tcc:223 89 {*movdi_internal}
     (nil))
(insn 37 36 38 4 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [3 MEM[(char * *)&D.31540]+0 S8 A128])
        (reg/f:DI 5 di [orig:94 D.37240 ] [94])) /usr/include/c++/5/bits/basic_string.h:127 89 {*movdi_internal}
     (nil))
(insn 38 37 39 4 (set (reg:DI 0 ax [orig:112 __dnew ] [112])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [9 __dnew+0 S8 A128])) /usr/include/c++/5/bits/basic_string.h:159 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/c:DI (plus:DI (reg/f:DI 20 frame)
                (const_int -64 [0xffffffffffffffc0])) [9 __dnew+0 S8 A128])
        (nil)))
(insn 39 38 186 4 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [9 MEM[(size_type *)&D.31540 + 16B]+0 S8 A128])
        (reg:DI 0 ax [orig:112 __dnew ] [112])) /usr/include/c++/5/bits/basic_string.h:159 89 {*movdi_internal}
     (nil))
(jump_insn 186 39 187 4 (set (pc)
        (label_ref 60)) 654 {jump}
     (nil)
 -> 60)
;;  succ:       10 [100.0%] 
;; lr  out 	 3 [bx] 5 [di] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

(barrier 187 186 42)
;; basic block 5, loop depth 0, count 0, freq 7097, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [71.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 42 187 43 5 261 "" [1 uses])
(note 43 42 44 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 44 43 45 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:92 D.37241 ] [92])
            (const_int 1 [0x1]))) /usr/include/c++/5/bits/basic_string.h:296 8 {*cmpdi_1}
     (nil))
(jump_insn 45 44 46 5 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 51)
            (pc))) /usr/include/c++/5/bits/basic_string.h:296 612 {*jcc_1}
     (int_list:REG_BR_PROB 7196 (nil))
 -> 51)
;;  succ:       6 [28.0%]  (FALLTHRU)
;;              7 [72.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 6, loop depth 0, count 0, freq 1990, maybe hot
;;  prev block 5, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [28.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13]
;; lr  use 	 7 [sp] 41 [r12]
;; lr  def 	 1 [dx] 43 [r14]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13]
;; live  gen 	 1 [dx] 43 [r14]
;; live  kill	
(note 46 45 47 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 47 46 48 6 (set (reg:QI 1 dx [orig:113 MEM[(const char_type &)name_5(D)] ] [113])
        (mem:QI (reg/v/f:DI 41 r12 [orig:100 name ] [100]) [0 MEM[(const char_type &)name_5(D)]+0 S1 A8])) /usr/include/c++/5/bits/char_traits.h:243 93 {*movqi_internal}
     (expr_list:REG_EQUIV (mem/c:QI (plus:DI (reg/f:DI 20 frame)
                (const_int -32 [0xffffffffffffffe0])) [0 MEM[(char_type &)&D.31540 + 16]+0 S1 A128])
        (nil)))
(insn 48 47 173 6 (set (mem/c:QI (plus:DI (reg/f:DI 7 sp)
                (const_int 48 [0x30])) [0 MEM[(char_type &)&D.31540 + 16]+0 S1 A128])
        (reg:QI 1 dx [orig:113 MEM[(const char_type &)name_5(D)] ] [113])) /usr/include/c++/5/bits/char_traits.h:243 93 {*movqi_internal}
     (nil))
(insn 173 48 188 6 (set (reg/f:DI 43 r14 [132])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 16 [0x10]))) 214 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
(jump_insn 188 173 189 6 (set (pc)
        (label_ref 73)) 654 {jump}
     (nil)
 -> 73)
;;  succ:       11 [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

(barrier 189 188 51)
;; basic block 7, loop depth 0, count 0, freq 5107, maybe hot
;;  prev block 6, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [72.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 0 [ax] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 17 [flags]
;; live  kill	
(code_label 51 189 52 7 263 "" [1 uses])
(note 52 51 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 53 52 54 7 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:DI 0 ax [orig:92 D.37241 ] [92])
            (const_int 0 [0]))) /usr/include/c++/5/bits/char_traits.h:288 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 54 53 55 7 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 151)
            (pc))) /usr/include/c++/5/bits/char_traits.h:288 612 {*jcc_1}
     (int_list:REG_BR_PROB 434 (nil))
 -> 151)
;;  succ:       8 [95.7%]  (FALLTHRU)
;;              9 [4.3%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]

;; basic block 8, loop depth 0, count 0, freq 4885, maybe hot
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [95.7%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 42 [r13]
;; lr  use 	 7 [sp]
;; lr  def 	 43 [r14]
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 42 [r13]
;; live  gen 	 43 [r14]
;; live  kill	
(note 55 54 174 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 174 55 190 8 (set (reg/f:DI 43 r14 [132])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 16 [0x10]))) 214 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
(jump_insn 190 174 191 8 (set (pc)
        (label_ref 73)) 654 {jump}
     (nil)
 -> 73)
;;  succ:       11 [100.0%] 
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

(barrier 191 190 151)
;; basic block 9, loop depth 0, count 0, freq 222, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       7 [4.3%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 44 [r15]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 5 [di] 43 [r14]
;; live  in  	 3 [bx] 6 [bp] 7 [sp] 41 [r12] 42 [r13] 44 [r15]
;; live  gen 	 5 [di] 43 [r14]
;; live  kill	
(code_label 151 191 150 9 272 "" [1 uses])
(note 150 151 9 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 9 150 175 9 (set (reg/f:DI 5 di [orig:94 D.37240 ] [94])
        (reg/f:DI 6 bp [106])) /usr/include/c++/5/bits/char_traits.h:288 89 {*movdi_internal}
     (nil))
(insn 175 9 60 9 (set (reg/f:DI 43 r14 [132])
        (plus:DI (reg/f:DI 7 sp)
            (const_int 16 [0x10]))) 214 {*leadi}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
;;  succ:       10 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 5 [di] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  out 	 3 [bx] 5 [di] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]

;; basic block 10, loop depth 0, count 0, freq 3121, maybe hot
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [100.0%]  (FALLTHRU)
;;              4 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp] 16 [argp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; lr  use 	 5 [di] 7 [sp] 41 [r12] 44 [r15]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp] 41 [r12] 42 [r13] 43 [r14] 44 [r15]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 6 [bp]
;; live  kill	
(code_label 60 175 61 10 262 "" [1 uses])
(note 61 60 65 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(insn 65 61 66 10 (set (reg:DI 1 dx)
        (reg:DI 44 r15 [108])) /usr/include/c++/5/bits/char_traits.h:290 89 {*movdi_internal}
     (nil))
(insn 66 65 68 10 (set (reg:DI 4 si)
        (reg/v/f:DI 41 r12 [orig:100 name ] [100])) /usr/include/c++/5/bits/char_traits.h:290 89 {*movdi_internal}
     (nil))
(call_insn 68 66 71 10 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("memcpy") [flags 0x41]  <function_decl 0x7fb5372f5948 memcpy>) [0 memcpy S1 A8])
            (const_int 0 [0]))) /usr/include/c++/5/bits/char_traits.h:290 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("memcpy") [flags 0x41]  <function_decl 0x7fb5372f5948 memcpy>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (set (reg:DI 0 ax)
            (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 5 di))
            (expr_list:DI (use (reg:DI 4 si))
                (expr_list:DI (use (reg:DI 1 dx))
                    (nil))))))
(insn 71 68 72 10 (set (reg:DI 0 ax [orig:92 D.37241 ] [92])
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [9 __dnew+0 S8 A128])) 89 {*movdi_internal}
     (nil))
(insn 72 71 73 10 (set (reg/f:DI 6 bp [orig:93 D.37240 ] [93])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [3 MEM[(char * *)&D.31540]+0 S8 A128])) 89 {*movdi_internal}
     (nil))
;;  succ:       11 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 42 [r13] 43 [r14]
;; live  out 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]

;; basic block 11, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 10, next block 12, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       10 [100.0%]  (FALLTHRU)
;;              6 [100.0%] 
;;              8 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 16 [argp] 42 [r13] 43 [r14]
;; lr  use 	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 3 [bx] 6 [bp] 7 [sp] 42 [r13] 43 [r14]
;; live  gen 	 1 [dx] 4 [si] 5 [di]
;; live  kill	
(code_label 73 72 74 11 264 "" [2 uses])
(note 74 73 75 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
(insn 75 74 76 11 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [9 MEM[(size_type *)&D.31540 + 8B]+0 S8 A64])
        (reg:DI 0 ax [orig:92 D.37241 ] [92])) /usr/include/c++/5/bits/basic_string.h:131 89 {*movdi_internal}
     (nil))
(insn 76 75 79 11 (set (mem:QI (plus:DI (reg/f:DI 6 bp [orig:93 D.37240 ] [93])
                (reg:DI 0 ax [orig:92 D.37241 ] [92])) [0 MEM[(char_type &)_47]+0 S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/bits/char_traits.h:243 93 {*movqi_internal}
     (nil))
(insn 79 76 80 11 (set (reg:DI 1 dx)
        (reg/v/f:DI 42 r13 [orig:99 options ] [99])) db/c.cc:289 89 {*movdi_internal}
     (nil))
(insn 80 79 81 11 (set (reg:DI 4 si)
        (reg/f:DI 3 bx [131])) db/c.cc:289 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(insn 81 80 82 11 (set (reg:DI 5 di)
        (reg/f:DI 43 r14 [132])) db/c.cc:289 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
(call_insn 82 81 83 11 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb8RepairDBERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_7OptionsE") [flags 0x41]  <function_decl 0x7fb5378211b0 RepairDB>) [0 RepairDB S1 A8])
        (const_int 0 [0])) db/c.cc:289 660 {*call}
     (expr_list:REG_EH_REGION (const_int 2 [0x2])
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb8RepairDBERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKNS_7OptionsE") [flags 0x41]  <function_decl 0x7fb5378211b0 RepairDB>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       21 (ABNORMAL,ABNORMAL_CALL,EH)
;;              12 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp] 16 [argp] 43 [r14]
;; live  out 	 3 [bx] 7 [sp] 43 [r14]

;; basic block 12, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 11, next block 13, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 [100.0%]  (FALLTHRU)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp] 16 [argp] 43 [r14]
;; lr  use 	 7 [sp] 43 [r14]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp] 43 [r14]
;; live  gen 	 0 [ax] 4 [si] 5 [di]
;; live  kill	
(note 83 82 85 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
(insn 85 83 86 12 (set (reg:DI 4 si)
        (reg/f:DI 43 r14 [132])) db/c.cc:289 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
(insn 86 85 87 12 (set (reg:DI 5 di)
        (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [46 %sfp+-72 S8 A64])) db/c.cc:289 89 {*movdi_internal}
     (nil))
(call_insn 87 86 88 12 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("SaveError") [flags 0x3]  <function_decl 0x7fb53738c798 SaveError>) [0 SaveError S1 A8])
            (const_int 0 [0]))) db/c.cc:289 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 3 [0x3])
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("SaveError") [flags 0x3]  <function_decl 0x7fb53738c798 SaveError>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       17 (ABNORMAL,ABNORMAL_CALL,EH)
;;              13 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp] 16 [argp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 13, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 12, next block 14, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       12 [100.0%]  (FALLTHRU)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(note 88 87 89 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
(insn 89 88 90 13 (set (reg/f:DI 5 di [orig:89 D.37239 ] [89])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [3 D.31541.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn 90 89 91 13 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:89 D.37239 ] [89])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 91 90 92 13 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 95)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (int_list:REG_BR_PROB 3017 (nil))
 -> 95)
;;  succ:       14 [69.8%]  (FALLTHRU)
;;              15 [30.2%] 
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

;; basic block 14, loop depth 0, count 0, freq 6980, maybe hot
;;  prev block 13, next block 15, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       13 [69.8%]  (FALLTHRU)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 92 91 94 14 [bb 14] NOTE_INSN_BASIC_BLOCK)
(call_insn 94 92 95 14 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       15 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 15, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 14, next block 16, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       13 [30.2%] 
;;              14 [100.0%]  (FALLTHRU)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 3 [bx] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 3 [bx] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 95 94 96 15 265 "" [1 uses])
(note 96 95 97 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
(insn 97 96 99 15 (set (reg/f:DI 5 di [orig:91 D.37240 ] [91])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [3 MEM[(char * *)&D.31540]+0 S8 A128])) 89 {*movdi_internal}
     (nil))
(insn 99 97 100 15 (parallel [
            (set (reg/f:DI 3 bx [123])
                (plus:DI (reg/f:DI 3 bx [131])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:179 218 {*adddi_1}
     (nil))
(insn 100 99 101 15 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:91 D.37240 ] [91])
            (reg/f:DI 3 bx [123]))) /usr/include/c++/5/bits/basic_string.h:179 8 {*cmpdi_1}
     (nil))
(jump_insn 101 100 102 15 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 142)
            (pc))) /usr/include/c++/5/bits/basic_string.h:179 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 142)
;;  succ:       16 [78.3%]  (FALLTHRU)
;;              26 [21.6%] 
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

;; basic block 16, loop depth 0, count 0, freq 7832, maybe hot
;;  prev block 15, next block 17, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [78.3%]  (FALLTHRU)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 102 101 104 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
(call_insn 104 102 192 16 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/ext/new_allocator.h:110 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 192 104 193 16 (set (pc)
        (label_ref 142)) db/c.cc:290 654 {jump}
     (nil)
 -> 142)
;;  succ:       26 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 193 192 160)
;; basic block 17, loop depth 0, count 0, freq 0
;;  prev block 16, next block 19, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       12 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 17 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 17 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 3 [bx] 7 [sp] 16 [argp]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 5 [di] 6 [bp] 17 [flags]
;; live  kill	
(code_label/s 160 193 163 17 274 "" [1 uses])
(note 163 160 161 17 [bb 17] NOTE_INSN_BASIC_BLOCK)
(insn 161 163 111 17 (set (reg:DI 6 bp [125])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (nil))
(insn 111 161 112 17 (set (reg/f:DI 5 di [orig:88 D.37239 ] [88])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [3 D.31541.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn 112 111 113 17 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:88 D.37239 ] [88])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 113 112 114 17 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 121)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (int_list:REG_BR_PROB 3017 (nil))
 -> 121)
;;  succ:       19 [69.8%]  (FALLTHRU)
;;              22 [30.2%] 
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 19, loop depth 0, count 0, freq 0
;;  prev block 17, next block 21, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       17 [69.8%]  (FALLTHRU)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(note 114 113 116 19 [bb 19] NOTE_INSN_BASIC_BLOCK)
(call_insn 116 114 194 19 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 194 116 195 19 (set (pc)
        (label_ref 121)) 654 {jump}
     (nil)
 -> 121)
;;  succ:       22 [100.0%] 
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

(barrier 195 194 154)
;; basic block 21, loop depth 0, count 0, freq 0
;;  prev block 19, next block 22, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       11 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 21 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 21 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 3 [bx] 7 [sp] 16 [argp]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 6 [bp]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 6 [bp]
;; live  kill	
(code_label/s 154 195 159 21 273 "" [1 uses])
(note 159 154 155 21 [bb 21] NOTE_INSN_BASIC_BLOCK)
(insn 155 159 121 21 (set (reg:DI 6 bp [124])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (nil))
;;  succ:       22 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 22, loop depth 0, count 0, freq 0
;;  prev block 21, next block 23, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       21 [100.0%]  (FALLTHRU)
;;              19 [100.0%] 
;;              17 [30.2%] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 3 [bx] 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 3 [bx] 5 [di] 17 [flags]
;; live  kill	 17 [flags]
(code_label 121 155 122 22 269 "" [2 uses])
(note 122 121 123 22 [bb 22] NOTE_INSN_BASIC_BLOCK)
(insn 123 122 125 22 (set (reg/f:DI 5 di [orig:90 D.37240 ] [90])
        (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [3 MEM[(char * *)&D.31540]+0 S8 A128])) 89 {*movdi_internal}
     (nil))
(insn 125 123 126 22 (parallel [
            (set (reg/f:DI 3 bx [129])
                (plus:DI (reg/f:DI 3 bx [131])
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) /usr/include/c++/5/bits/basic_string.h:179 218 {*adddi_1}
     (nil))
(insn 126 125 127 22 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:90 D.37240 ] [90])
            (reg/f:DI 3 bx [129]))) /usr/include/c++/5/bits/basic_string.h:179 8 {*cmpdi_1}
     (nil))
(jump_insn 127 126 128 22 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 131)
            (pc))) /usr/include/c++/5/bits/basic_string.h:179 612 {*jcc_1}
     (int_list:REG_BR_PROB 3017 (nil))
 -> 131)
;;  succ:       23 [69.8%]  (FALLTHRU)
;;              24 [30.2%] 
;; lr  out 	 5 [di] 6 [bp] 7 [sp]
;; live  out 	 5 [di] 6 [bp] 7 [sp]

;; basic block 23, loop depth 0, count 0, freq 0
;;  prev block 22, next block 24, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       22 [69.8%]  (FALLTHRU)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(note 128 127 130 23 [bb 23] NOTE_INSN_BASIC_BLOCK)
(call_insn 130 128 131 23 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/ext/new_allocator.h:110 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       24 [100.0%]  (FALLTHRU)
;; lr  out 	 6 [bp] 7 [sp]
;; live  out 	 6 [bp] 7 [sp]

;; basic block 24, loop depth 0, count 0, freq 0
;;  prev block 23, next block 25, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       22 [30.2%] 
;;              23 [100.0%]  (FALLTHRU)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(7){ }}
;; lr  in  	 6 [bp] 7 [sp]
;; lr  use 	 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 6 [bp] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 131 130 132 24 270 "" [1 uses])
(note 132 131 134 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
(insn 134 132 135 24 (set (reg:DI 5 di)
        (reg:DI 6 bp [124])) 89 {*movdi_internal}
     (nil))
(call_insn 135 134 136 24 (call (mem:QI (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>) [0 __builtin_unwind_resume S1 A8])
        (const_int 0 [0])) 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 136 135 137)
;; basic block 25, loop depth 0, count 0, freq 1275, maybe hot
;; Invalid sum of incoming frequencies 2163, should be 1275
;;  prev block 24, next block 26, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [21.6%] 
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 137 136 138 25 260 "" [1 uses])
(note 138 137 139 25 [bb 25] NOTE_INSN_BASIC_BLOCK)
(insn 139 138 140 25 (set (reg:DI 5 di)
        (symbol_ref/f:DI ("*.LC23") [flags 0x2]  <var_decl 0x7fb536e46480 *.LC23>)) /usr/include/c++/5/bits/basic_string.tcc:216 89 {*movdi_internal}
     (nil))
(call_insn 140 139 141 25 (call (mem:QI (symbol_ref:DI ("_ZSt19__throw_logic_errorPKc") [flags 0x41]  <function_decl 0x7fb5388d86c0 __throw_logic_error>) [0 __throw_logic_error S1 A8])
        (const_int 0 [0])) /usr/include/c++/5/bits/basic_string.tcc:216 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZSt19__throw_logic_errorPKc") [flags 0x41]  <function_decl 0x7fb5388d86c0 __throw_logic_error>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 141 140 142)
;; basic block 26, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 25, next block 27, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       15 [21.6%] 
;;              16 [100.0%] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	 0 [ax]
(code_label 142 141 149 26 259 "" [2 uses])
(note 149 142 144 26 [bb 26] NOTE_INSN_BASIC_BLOCK)
(insn 144 149 145 26 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                                (const_int 72 [0x48])) [3 D.37244+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 0 ax [134]))
        ]) db/c.cc:290 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 145 144 152 26 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 148)
            (pc))) db/c.cc:290 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 148)
;;  succ:       28 [100.0%] 
;;              27 [0.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 27, loop depth 0, count 0, freq 4
;;  prev block 26, next block 28, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       26 [0.0%]  (FALLTHRU)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 152 145 146 27 [bb 27] NOTE_INSN_BASIC_BLOCK)
(call_insn 146 152 147 27 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) db/c.cc:290 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 147 146 148)
;; basic block 28, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 27, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       26 [100.0%] 
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 148 147 153 28 271 "" [1 uses])
(note 153 148 196 28 [bb 28] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 196 153 0 NOTE_INSN_DELETED)

;; Function void leveldb_iter_destroy(leveldb_iterator_t*) (leveldb_iter_destroy, funcdef_no=1445, decl_uid=2219, cgraph_uid=552, symbol_order=555)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 4
   Insn 17: point = 0
   Insn 16: point = 0
  BB 3
   Insn 13: point = 2
   Insn 12: point = 3
   Insn 10: point = 4
  BB 2
   Insn 8: point = 6
   Insn 7: point = 6
   Insn 6: point = 6
   Insn 2: point = 7
Compressing live ranges: from 8 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 6
changing reg in insn 12
changing reg in insn 10
changing reg in insn 7
changing reg in insn 2
changing reg in insn 16
changing reg in insn 6
changing reg in insn 10
changing reg in insn 13
deleting insn with uid = 12.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 13.
verify found no changes in insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)


void leveldb_iter_destroy(leveldb_iterator_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={4d,1u} r1={3d} r2={3d} r3={1d,2u} r4={3d} r5={5d,5u} r7={1d,6u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={3d,1u} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 180{165d,15u,0e} in 8{6 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 3 [bx] 5 [di] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 3 [bx] 5 [di] 17 [flags]
;; live  kill	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v/f:DI 3 bx [orig:90 iter ] [90])
        (reg:DI 5 di [ iter ])) db/c.cc:292 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 5 di [orig:87 D.37251 ] [87])
        (mem/f:DI (reg/v/f:DI 3 bx [orig:90 iter ] [90]) [3 iter_3(D)->rep+0 S8 A64])) db/c.cc:293 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:87 D.37251 ] [87])
            (const_int 0 [0]))) db/c.cc:293 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 14)
            (pc))) db/c.cc:293 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 14)
;;  succ:       3 [78.3%]  (FALLTHRU)
;;              4 [21.6%] 
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 7835, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [78.3%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:DI 0 ax [orig:91 _4->_vptr.Iterator ] [91])
        (mem/f:DI (reg/f:DI 5 di [orig:87 D.37251 ] [87]) [3 _4->_vptr.Iterator+0 S8 A64])) db/c.cc:293 89 {*movdi_internal}
     (nil))
(note 11 10 13 3 NOTE_INSN_DELETED)
(call_insn 13 11 14 3 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:91 _4->_vptr.Iterator ] [91])
                    (const_int 8 [0x8])) [3 MEM[(int (*__vtbl_ptr_type) () *)_5 + 8B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_6;(struct Iterator)_4->1) S1 A8])
        (const_int 0 [0])) db/c.cc:293 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (expr_list:REG_CALL_DECL (nil)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 3, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [21.6%] 
;;              3 [100.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 14 13 15 4 286 "" [1 uses])
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:90 iter ] [90])) db/c.cc:294 89 {*movdi_internal}
     (nil))
(call_insn/j 17 16 18 4 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) db/c.cc:294 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 18 17 27)
(note 27 18 0 NOTE_INSN_DELETED)

;; Function unsigned char leveldb_iter_valid(const leveldb_iterator_t*) (leveldb_iter_valid, funcdef_no=1446, decl_uid=2221, cgraph_uid=553, symbol_order=556)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) UBsBz {*sibcall_value}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 10: point = 0
   Insn 9: point = 1
   Insn 8: point = 2
   Insn 7: point = 4
   Insn 6: point = 5
   Insn 2: point = 7
Compressing live ranges: from 8 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 9
changing reg in insn 7
changing reg in insn 7
changing reg in insn 2
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 10
deleting insn with uid = 2.
deleting insn with uid = 9.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


unsigned char leveldb_iter_valid(const leveldb_iterator_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 5[di] 7[sp]
;;  ref usage 	r0={4d,3u} r1={2d} r2={2d} r4={2d} r5={3d,3u,1e} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 101{91d,9u,1e} in 4{3 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 5 di [orig:87 D.37256 ] [87])
        (mem/f:DI (reg/v/f:DI 5 di [orig:93 iter ] [93]) [3 iter_2(D)->rep+0 S8 A64])) db/c.cc:298 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:94 _3->_vptr.Iterator ] [94])
        (mem/f:DI (reg/f:DI 5 di [orig:87 D.37256 ] [87]) [3 _3->_vptr.Iterator+0 S8 A64])) db/c.cc:298 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 5 di [orig:87 D.37256 ] [87]) [3 _3->_vptr.Iterator+0 S8 A64])
        (nil)))
(insn 8 7 10 2 (set (reg/f:DI 0 ax [orig:95 MEM[(int (*__vtbl_ptr_type) () *)_4 + 16B] ] [95])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:94 _3->_vptr.Iterator ] [94])
                (const_int 16 [0x10])) [3 MEM[(int (*__vtbl_ptr_type) () *)_4 + 16B]+0 S8 A64])) db/c.cc:298 89 {*movdi_internal}
     (nil))
(call_insn/j 10 8 11 2 (set (reg:QI 0 ax)
        (call (mem:QI (reg/f:DI 0 ax [orig:95 MEM[(int (*__vtbl_ptr_type) () *)_4 + 16B] ] [95]) [0 *OBJ_TYPE_REF(_5;(const struct Iterator)_3->2) S1 A8])
            (const_int 0 [0]))) db/c.cc:298 671 {*sibcall_value}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(barrier 11 10 17)
(note 17 11 0 NOTE_INSN_DELETED)

;; Function void leveldb_iter_seek_to_first(leveldb_iterator_t*) (leveldb_iter_seek_to_first, funcdef_no=1447, decl_uid=2223, cgraph_uid=554, symbol_order=557)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 10: point = 0
   Insn 9: point = 1
   Insn 8: point = 2
   Insn 7: point = 4
   Insn 6: point = 5
   Insn 2: point = 7
Compressing live ranges: from 8 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 9
changing reg in insn 7
changing reg in insn 7
changing reg in insn 2
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 10
deleting insn with uid = 2.
deleting insn with uid = 9.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 10.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_iter_seek_to_first(leveldb_iterator_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 5[di] 7[sp]
;;  ref usage 	r0={4d,2u} r1={2d} r2={2d} r4={2d} r5={3d,3u,1e} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 100{91d,8u,1e} in 4{3 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 5 di [orig:87 D.37263 ] [87])
        (mem/f:DI (reg/v/f:DI 5 di [orig:90 iter ] [90]) [3 iter_2(D)->rep+0 S8 A64])) db/c.cc:302 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:91 _3->_vptr.Iterator ] [91])
        (mem/f:DI (reg/f:DI 5 di [orig:87 D.37263 ] [87]) [3 _3->_vptr.Iterator+0 S8 A64])) db/c.cc:302 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 5 di [orig:87 D.37263 ] [87]) [3 _3->_vptr.Iterator+0 S8 A64])
        (nil)))
(insn 8 7 10 2 (set (reg/f:DI 0 ax [orig:92 MEM[(int (*__vtbl_ptr_type) () *)_4 + 24B] ] [92])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:91 _3->_vptr.Iterator ] [91])
                (const_int 24 [0x18])) [3 MEM[(int (*__vtbl_ptr_type) () *)_4 + 24B]+0 S8 A64])) db/c.cc:302 89 {*movdi_internal}
     (nil))
(call_insn/j 10 8 11 2 (call (mem:QI (reg/f:DI 0 ax [orig:92 MEM[(int (*__vtbl_ptr_type) () *)_4 + 24B] ] [92]) [0 *OBJ_TYPE_REF(_5;(struct Iterator)_3->3) S1 A8])
        (const_int 0 [0])) db/c.cc:302 662 {*sibcall}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 11 10 14)
(note 14 11 0 NOTE_INSN_DELETED)

;; Function void leveldb_iter_seek_to_last(leveldb_iterator_t*) (leveldb_iter_seek_to_last, funcdef_no=1448, decl_uid=2225, cgraph_uid=555, symbol_order=558)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 10: point = 0
   Insn 9: point = 1
   Insn 8: point = 2
   Insn 7: point = 4
   Insn 6: point = 5
   Insn 2: point = 7
Compressing live ranges: from 8 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 9
changing reg in insn 7
changing reg in insn 7
changing reg in insn 2
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 10
deleting insn with uid = 2.
deleting insn with uid = 9.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 10.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_iter_seek_to_last(leveldb_iterator_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 5[di] 7[sp]
;;  ref usage 	r0={4d,2u} r1={2d} r2={2d} r4={2d} r5={3d,3u,1e} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 100{91d,8u,1e} in 4{3 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 5 di [orig:87 D.37268 ] [87])
        (mem/f:DI (reg/v/f:DI 5 di [orig:90 iter ] [90]) [3 iter_2(D)->rep+0 S8 A64])) db/c.cc:306 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:91 _3->_vptr.Iterator ] [91])
        (mem/f:DI (reg/f:DI 5 di [orig:87 D.37268 ] [87]) [3 _3->_vptr.Iterator+0 S8 A64])) db/c.cc:306 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 5 di [orig:87 D.37268 ] [87]) [3 _3->_vptr.Iterator+0 S8 A64])
        (nil)))
(insn 8 7 10 2 (set (reg/f:DI 0 ax [orig:92 MEM[(int (*__vtbl_ptr_type) () *)_4 + 32B] ] [92])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:91 _3->_vptr.Iterator ] [91])
                (const_int 32 [0x20])) [3 MEM[(int (*__vtbl_ptr_type) () *)_4 + 32B]+0 S8 A64])) db/c.cc:306 89 {*movdi_internal}
     (nil))
(call_insn/j 10 8 11 2 (call (mem:QI (reg/f:DI 0 ax [orig:92 MEM[(int (*__vtbl_ptr_type) () *)_4 + 32B] ] [92]) [0 *OBJ_TYPE_REF(_5;(struct Iterator)_3->4) S1 A8])
        (const_int 0 [0])) db/c.cc:306 662 {*sibcall}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 11 10 14)
(note 14 11 0 NOTE_INSN_DELETED)

;; Function void leveldb_iter_seek(leveldb_iterator_t*, const char*, size_t) (leveldb_iter_seek, funcdef_no=1449, decl_uid=2229, cgraph_uid=556, symbol_order=559)

      Creating newreg=97
Removing SCRATCH in insn #7 (nop 2)
rescanning insn with uid = 7.
      Creating newreg=98
Removing SCRATCH in insn #21 (nop 3)
rescanning insn with uid = 21.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r97
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 12:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) rBwBz {*call}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r98
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 23:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 3
   Insn 23: point = 0
  BB 4
  BB 2
   Insn 22: point = 0
   Insn 21: point = 0
   Insn 18: point = 1
   Insn 17: point = 2
   Insn 16: point = 3
   Insn 15: point = 4
   Insn 14: point = 5
   Insn 13: point = 6
   Insn 12: point = 7
   Insn 11: point = 9
   Insn 10: point = 10
   Insn 7: point = 12
   Insn 4: point = 14
   Insn 3: point = 15
   Insn 2: point = 16
 r87: [2..10]
 r89: [1..7]
 r90: [11..16]
 r91: [6..15]
 r92: [5..14]
 r94: [8..9]
 r95: [3..4]
 r97: [12..13]
 r98: [0..0]
Compressing live ranges: from 17 to 9 - 52%
Ranges after the compression:
 r87: [1..6]
 r89: [1..4]
 r90: [7..8]
 r91: [3..8]
 r92: [3..8]
 r94: [5..6]
 r95: [1..2]
 r97: [7..8]
 r98: [0..0]

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4

********** Pseudo live ranges #2: **********

  BB 3
   Insn 23: point = 0
  BB 4
  BB 2
   Insn 22: point = 0
   Insn 21: point = 0
   Insn 18: point = 1
   Insn 17: point = 2
   Insn 16: point = 3
   Insn 15: point = 4
   Insn 14: point = 5
   Insn 13: point = 6
   Insn 12: point = 7
   Insn 11: point = 9
   Insn 10: point = 10
   Insn 7: point = 12
   Insn 4: point = 14
   Insn 3: point = 15
   Insn 2: point = 16
 r87: [2..10]
 r89: [1..7]
 r90: [11..16]
 r91: [6..15]
 r92: [5..14]
 r94: [8..9]
 r95: [3..4]
 r97: [12..13]
 r98: [0..0]
Compressing live ranges: from 17 to 9 - 52%
Ranges after the compression:
 r87: [1..6]
 r89: [1..4]
 r90: [7..8]
 r91: [3..8]
 r92: [3..8]
 r94: [5..6]
 r95: [1..2]
 r97: [7..8]
 r98: [0..0]

********** Assignment #1: **********

	 Assigning to 97 (cl=INDEX_REGS, orig=97, freq=1000, tfirst=97, tfreq=1000)...
	   Assign 0 to reload r97 (freq=1000)
	 Assigning to 98 (cl=INDEX_REGS, orig=98, freq=1000, tfirst=98, tfreq=1000)...
	   Assign 0 to reload r98 (freq=1000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=48)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=32, prev_offset=32)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 10
changing reg in insn 17
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 18
changing reg in insn 2
changing reg in insn 10
changing reg in insn 3
changing reg in insn 13
changing reg in insn 4
changing reg in insn 14
changing reg in insn 11
changing reg in insn 12
changing reg in insn 15
changing reg in insn 16
changing reg in insn 7
changing reg in insn 21
deleting insn with uid = 2.
deleting insn with uid = 3.
deleting insn with uid = 4.
deleting insn with uid = 16.
deleting insn with uid = 17.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 18.
verify found no changes in insn with uid = 23.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 4 count 5 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 4 count 5 (    1)


void leveldb_iter_seek(leveldb_iterator_t*, const char*, size_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={7d,2u} r1={3d,1u} r2={3d} r4={4d,2u} r5={4d,3u,1e} r7={1d,11u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d,1u} r18={2d} r19={2d} r20={1e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 190{168d,20u,2e} in 11{9 regular + 2 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 5 [di] 17 [flags]
;; live  kill	 0 [ax] 17 [flags]
(note 8 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 8 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 5 10 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                        (const_int 24 [0x18])) [3 D.37276+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [97])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) db/c.cc:309 986 {stack_tls_protect_set_di}
     (nil))
(insn 10 7 11 2 (set (reg/f:DI 5 di [orig:87 D.37273 ] [87])
        (mem/f:DI (reg/v/f:DI 5 di [orig:90 iter ] [90]) [3 iter_2(D)->rep+0 S8 A64])) db/c.cc:310 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [orig:94 _3->_vptr.Iterator ] [94])
        (mem/f:DI (reg/f:DI 5 di [orig:87 D.37273 ] [87]) [3 _3->_vptr.Iterator+0 S8 A64])) db/c.cc:310 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 5 di [orig:87 D.37273 ] [87]) [3 _3->_vptr.Iterator+0 S8 A64])
        (nil)))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [orig:89 D.37275 ] [89])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:94 _3->_vptr.Iterator ] [94])
                (const_int 40 [0x28])) [3 MEM[(int (*__vtbl_ptr_type) () *)_4 + 40B]+0 S8 A64])) db/c.cc:310 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/f/c:DI (reg/f:DI 7 sp) [3 D.31577.data_+0 S8 A128])
        (reg/v/f:DI 4 si [orig:91 k ] [91])) ./include/leveldb/slice.h:31 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [9 D.31577.size_+0 S8 A64])
        (reg/v:DI 1 dx [orig:92 klen ] [92])) ./include/leveldb/slice.h:31 89 {*movdi_internal}
     (nil))
(insn 15 14 18 2 (set (reg/f:DI 4 si [95])
        (reg/f:DI 7 sp)) db/c.cc:310 89 {*movdi_internal}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -32 [0xffffffffffffffe0]))
        (nil)))
(call_insn 18 15 21 2 (call (mem:QI (reg/f:DI 0 ax [orig:89 D.37275 ] [89]) [0 *OBJ_TYPE_REF(_5;(struct Iterator)_3->5) S1 A8])
        (const_int 0 [0])) db/c.cc:310 660 {*call}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 21 18 22 2 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                                (const_int 24 [0x18])) [3 D.37276+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 0 ax [98]))
        ]) db/c.cc:311 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 22 21 27 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 25)
            (pc))) db/c.cc:311 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 25)
;;  succ:       4 [100.0%] 
;;              3 [0.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 4
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [0.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 27 22 23 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(call_insn 23 27 24 3 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) db/c.cc:311 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 24 23 25)
;; basic block 4, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 3, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 25 24 28 4 295 "" [1 uses])
(note 28 25 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 29 28 0 NOTE_INSN_DELETED)

;; Function void leveldb_iter_next(leveldb_iterator_t*) (leveldb_iter_next, funcdef_no=1450, decl_uid=2231, cgraph_uid=557, symbol_order=560)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 10: point = 0
   Insn 9: point = 1
   Insn 8: point = 2
   Insn 7: point = 4
   Insn 6: point = 5
   Insn 2: point = 7
Compressing live ranges: from 8 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 9
changing reg in insn 7
changing reg in insn 7
changing reg in insn 2
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 10
deleting insn with uid = 2.
deleting insn with uid = 9.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 10.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_iter_next(leveldb_iterator_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 5[di] 7[sp]
;;  ref usage 	r0={4d,2u} r1={2d} r2={2d} r4={2d} r5={3d,3u,1e} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 100{91d,8u,1e} in 4{3 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 5 di [orig:87 D.37279 ] [87])
        (mem/f:DI (reg/v/f:DI 5 di [orig:90 iter ] [90]) [3 iter_2(D)->rep+0 S8 A64])) db/c.cc:314 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:91 _3->_vptr.Iterator ] [91])
        (mem/f:DI (reg/f:DI 5 di [orig:87 D.37279 ] [87]) [3 _3->_vptr.Iterator+0 S8 A64])) db/c.cc:314 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 5 di [orig:87 D.37279 ] [87]) [3 _3->_vptr.Iterator+0 S8 A64])
        (nil)))
(insn 8 7 10 2 (set (reg/f:DI 0 ax [orig:92 MEM[(int (*__vtbl_ptr_type) () *)_4 + 48B] ] [92])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:91 _3->_vptr.Iterator ] [91])
                (const_int 48 [0x30])) [3 MEM[(int (*__vtbl_ptr_type) () *)_4 + 48B]+0 S8 A64])) db/c.cc:314 89 {*movdi_internal}
     (nil))
(call_insn/j 10 8 11 2 (call (mem:QI (reg/f:DI 0 ax [orig:92 MEM[(int (*__vtbl_ptr_type) () *)_4 + 48B] ] [92]) [0 *OBJ_TYPE_REF(_5;(struct Iterator)_3->6) S1 A8])
        (const_int 0 [0])) db/c.cc:314 662 {*sibcall}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 11 10 14)
(note 14 11 0 NOTE_INSN_DELETED)

;; Function void leveldb_iter_prev(leveldb_iterator_t*) (leveldb_iter_prev, funcdef_no=1451, decl_uid=2233, cgraph_uid=558, symbol_order=561)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 10: point = 0
   Insn 9: point = 1
   Insn 8: point = 2
   Insn 7: point = 4
   Insn 6: point = 5
   Insn 2: point = 7
Compressing live ranges: from 8 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 6
changing reg in insn 9
changing reg in insn 7
changing reg in insn 7
changing reg in insn 2
changing reg in insn 6
changing reg in insn 7
changing reg in insn 8
changing reg in insn 8
changing reg in insn 10
deleting insn with uid = 2.
deleting insn with uid = 9.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 10.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_iter_prev(leveldb_iterator_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 5[di] 7[sp]
;;  ref usage 	r0={4d,2u} r1={2d} r2={2d} r4={2d} r5={3d,3u,1e} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 100{91d,8u,1e} in 4{3 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 5 di [orig:87 D.37284 ] [87])
        (mem/f:DI (reg/v/f:DI 5 di [orig:90 iter ] [90]) [3 iter_2(D)->rep+0 S8 A64])) db/c.cc:318 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg/f:DI 0 ax [orig:91 _3->_vptr.Iterator ] [91])
        (mem/f:DI (reg/f:DI 5 di [orig:87 D.37284 ] [87]) [3 _3->_vptr.Iterator+0 S8 A64])) db/c.cc:318 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 5 di [orig:87 D.37284 ] [87]) [3 _3->_vptr.Iterator+0 S8 A64])
        (nil)))
(insn 8 7 10 2 (set (reg/f:DI 0 ax [orig:92 MEM[(int (*__vtbl_ptr_type) () *)_4 + 56B] ] [92])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:91 _3->_vptr.Iterator ] [91])
                (const_int 56 [0x38])) [3 MEM[(int (*__vtbl_ptr_type) () *)_4 + 56B]+0 S8 A64])) db/c.cc:318 89 {*movdi_internal}
     (nil))
(call_insn/j 10 8 11 2 (call (mem:QI (reg/f:DI 0 ax [orig:92 MEM[(int (*__vtbl_ptr_type) () *)_4 + 56B] ] [92]) [0 *OBJ_TYPE_REF(_5;(struct Iterator)_3->7) S1 A8])
        (const_int 0 [0])) db/c.cc:318 662 {*sibcall}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 11 10 14)
(note 14 11 0 NOTE_INSN_DELETED)

;; Function const char* leveldb_iter_key(const leveldb_iterator_t*, size_t*) (leveldb_iter_key, funcdef_no=1452, decl_uid=2236, cgraph_uid=559, symbol_order=562)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 20: point = 0
   Insn 19: point = 0
   Insn 13: point = 1
   Insn 23: point = 2
   Insn 22: point = 3
   Insn 11: point = 4
   Insn 10: point = 5
   Insn 8: point = 6
   Insn 7: point = 7
   Insn 3: point = 9
   Insn 2: point = 10
Compressing live ranges: from 11 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 7
changing reg in insn 10
changing reg in insn 8
changing reg in insn 2
changing reg in insn 7
changing reg in insn 3
changing reg in insn 13
changing reg in insn 23
changing reg in insn 8
changing reg in insn 11
changing reg in insn 22
changing reg in insn 19
changing reg in insn 23
changing reg in insn 13
deleting insn with uid = 2.
deleting insn with uid = 10.
deleting insn with uid = 23.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 11.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


const char* leveldb_iter_key(const leveldb_iterator_t*, size_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 4[si] 5[di] 7[sp]
;;  ref usage 	r0={5d,5u} r1={3d,1u} r2={2d} r3={1d,1u} r4={2d,1u} r5={3d,3u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 108{94d,14u,0e} in 8{7 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di]
;; live  kill	
(note 5 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 3 5 4 2 (set (reg/v/f:DI 3 bx [orig:95 klen ] [95])
        (reg:DI 4 si [ klen ])) db/c.cc:321 89 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 5 di [orig:87 D.37289 ] [87])
        (mem/f:DI (reg/v/f:DI 5 di [orig:94 iter ] [94]) [3 iter_2(D)->rep+0 S8 A64])) db/c.cc:322 89 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [orig:96 _3->_vptr.Iterator ] [96])
        (mem/f:DI (reg/f:DI 5 di [orig:87 D.37289 ] [87]) [3 _3->_vptr.Iterator+0 S8 A64])) db/c.cc:322 89 {*movdi_internal}
     (nil))
(note 9 8 11 2 NOTE_INSN_DELETED)
(call_insn 11 9 22 2 (set (reg:TI 0 ax)
        (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:96 _3->_vptr.Iterator ] [96])
                        (const_int 64 [0x40])) [3 MEM[(int (*__vtbl_ptr_type) () *)_4 + 64B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_5;(const struct Iterator)_3->8) S1 A8])
            (const_int 0 [0]))) db/c.cc:322 669 {*call_value}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 22 11 13 2 (set (reg:DI 0 ax [orig:99 s ] [99])
        (reg:DI 0 ax)) db/c.cc:322 89 {*movdi_internal}
     (nil))
(insn 13 22 19 2 (set (mem:DI (reg/v/f:DI 3 bx [orig:95 klen ] [95]) [9 *klen_7(D)+0 S8 A64])
        (reg:DI 1 dx [orig:100 s+8 ] [100])) db/c.cc:323 89 {*movdi_internal}
     (nil))
(insn 19 13 20 2 (set (reg/i:DI 0 ax)
        (reg:DI 0 ax [orig:99 s ] [99])) db/c.cc:325 89 {*movdi_internal}
     (nil))
(insn 20 19 24 2 (use (reg/i:DI 0 ax)) db/c.cc:325 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 24 20 0 NOTE_INSN_DELETED)

;; Function const char* leveldb_iter_value(const leveldb_iterator_t*, size_t*) (leveldb_iter_value, funcdef_no=1453, decl_uid=2239, cgraph_uid=560, symbol_order=563)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 8:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 20: point = 0
   Insn 19: point = 0
   Insn 13: point = 1
   Insn 23: point = 2
   Insn 22: point = 3
   Insn 11: point = 4
   Insn 10: point = 5
   Insn 8: point = 6
   Insn 7: point = 7
   Insn 3: point = 9
   Insn 2: point = 10
Compressing live ranges: from 11 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 7
changing reg in insn 10
changing reg in insn 8
changing reg in insn 2
changing reg in insn 7
changing reg in insn 3
changing reg in insn 13
changing reg in insn 23
changing reg in insn 8
changing reg in insn 11
changing reg in insn 22
changing reg in insn 19
changing reg in insn 23
changing reg in insn 13
deleting insn with uid = 2.
deleting insn with uid = 10.
deleting insn with uid = 23.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 11.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


const char* leveldb_iter_value(const leveldb_iterator_t*, size_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 3[bx] 4[si] 5[di] 7[sp]
;;  ref usage 	r0={5d,5u} r1={3d,1u} r2={2d} r3={1d,1u} r4={2d,1u} r5={3d,3u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 108{94d,14u,0e} in 8{7 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di]
;; live  kill	
(note 5 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 3 5 4 2 (set (reg/v/f:DI 3 bx [orig:95 vlen ] [95])
        (reg:DI 4 si [ vlen ])) db/c.cc:327 89 {*movdi_internal}
     (nil))
(note 4 3 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 5 di [orig:87 D.37296 ] [87])
        (mem/f:DI (reg/v/f:DI 5 di [orig:94 iter ] [94]) [3 iter_2(D)->rep+0 S8 A64])) db/c.cc:328 89 {*movdi_internal}
     (nil))
(insn 8 7 9 2 (set (reg/f:DI 0 ax [orig:96 _3->_vptr.Iterator ] [96])
        (mem/f:DI (reg/f:DI 5 di [orig:87 D.37296 ] [87]) [3 _3->_vptr.Iterator+0 S8 A64])) db/c.cc:328 89 {*movdi_internal}
     (nil))
(note 9 8 11 2 NOTE_INSN_DELETED)
(call_insn 11 9 22 2 (set (reg:TI 0 ax)
        (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:96 _3->_vptr.Iterator ] [96])
                        (const_int 72 [0x48])) [3 MEM[(int (*__vtbl_ptr_type) () *)_4 + 72B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_5;(const struct Iterator)_3->9) S1 A8])
            (const_int 0 [0]))) db/c.cc:328 669 {*call_value}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 22 11 13 2 (set (reg:DI 0 ax [orig:99 s ] [99])
        (reg:DI 0 ax)) db/c.cc:328 89 {*movdi_internal}
     (nil))
(insn 13 22 19 2 (set (mem:DI (reg/v/f:DI 3 bx [orig:95 vlen ] [95]) [9 *vlen_7(D)+0 S8 A64])
        (reg:DI 1 dx [orig:100 s+8 ] [100])) db/c.cc:329 89 {*movdi_internal}
     (nil))
(insn 19 13 20 2 (set (reg/i:DI 0 ax)
        (reg:DI 0 ax [orig:99 s ] [99])) db/c.cc:331 89 {*movdi_internal}
     (nil))
(insn 20 19 24 2 (use (reg/i:DI 0 ax)) db/c.cc:331 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 24 20 0 NOTE_INSN_DELETED)

;; Function void leveldb_iter_get_error(const leveldb_iterator_t*, char**) (leveldb_iter_get_error, funcdef_no=1454, decl_uid=2242, cgraph_uid=561, symbol_order=564)

      Creating newreg=102
Removing SCRATCH in insn #6 (nop 2)
rescanning insn with uid = 6.
      Creating newreg=103
Removing SCRATCH in insn #47 (nop 3)
rescanning insn with uid = 47.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=16, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r102
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 21:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 33:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) rBwBz {*call}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r103
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 49:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 8
   Insn 43: point = 0
   Insn 42: point = 0
  BB 7
   Insn 38: point = 2
   Insn 37: point = 2
  BB 6
   Insn 35: point = 4
   Insn 34: point = 4
   Insn 33: point = 4
  BB 5
   Insn 56: point = 6
  BB 10
   Insn 49: point = 7
  BB 11
  BB 9
   Insn 48: point = 7
   Insn 47: point = 7
  BB 4
   Insn 70: point = 8
   Insn 26: point = 8
   Insn 25: point = 8
  BB 3
   Insn 23: point = 10
   Insn 22: point = 10
   Insn 21: point = 10
  BB 2
   Insn 19: point = 11
   Insn 18: point = 11
   Insn 17: point = 12
   Insn 15: point = 13
   Insn 14: point = 14
   Insn 13: point = 14
   Insn 11: point = 15
   Insn 10: point = 16
   Insn 9: point = 17
   Insn 6: point = 19
   Insn 3: point = 21
   Insn 2: point = 22
 r87: [14..17]
 r90: [2..4]
 r91: [8..10]
 r93: [18..22]
 r94: [11..21]
 r96: [12..16]
 r97: [13..15]
 r100: [0..6]
 r102: [19..20]
 r103: [7..7]
Compressing live ranges: from 23 to 9 - 39%
Ranges after the compression:
 r87: [5..6]
 r90: [0..1]
 r91: [3..4]
 r93: [7..8]
 r94: [5..8]
 r96: [5..6]
 r97: [5..6]
 r100: [0..1]
 r102: [7..8]
 r103: [2..2]

********** Inheritance #1: **********

EBB 2 3 4
EBB 5
EBB 6 7
EBB 8
EBB 9
EBB 10
EBB 11

********** Pseudo live ranges #2: **********

  BB 8
   Insn 43: point = 0
   Insn 42: point = 0
  BB 7
   Insn 38: point = 2
   Insn 37: point = 2
  BB 6
   Insn 35: point = 4
   Insn 34: point = 4
   Insn 33: point = 4
  BB 5
   Insn 56: point = 6
  BB 10
   Insn 49: point = 7
  BB 11
  BB 9
   Insn 48: point = 7
   Insn 47: point = 7
  BB 4
   Insn 70: point = 8
   Insn 26: point = 8
   Insn 25: point = 8
  BB 3
   Insn 23: point = 10
   Insn 22: point = 10
   Insn 21: point = 10
  BB 2
   Insn 19: point = 11
   Insn 18: point = 11
   Insn 17: point = 12
   Insn 15: point = 13
   Insn 14: point = 14
   Insn 13: point = 14
   Insn 11: point = 15
   Insn 10: point = 16
   Insn 9: point = 17
   Insn 6: point = 19
   Insn 3: point = 21
   Insn 2: point = 22
 r87: [14..17]
 r90: [2..4]
 r91: [8..10]
 r93: [18..22]
 r94: [11..21]
 r96: [12..16]
 r97: [13..15]
 r100: [0..6]
 r102: [19..20]
 r103: [7..7]
Compressing live ranges: from 23 to 9 - 39%
Ranges after the compression:
 r87: [5..6]
 r90: [0..1]
 r91: [3..4]
 r93: [7..8]
 r94: [5..8]
 r96: [5..6]
 r97: [5..6]
 r100: [0..1]
 r102: [7..8]
 r103: [2..2]

********** Assignment #1: **********

	 Assigning to 102 (cl=INDEX_REGS, orig=102, freq=1000, tfirst=102, tfreq=1000)...
	   Assign 0 to reload r102 (freq=1000)
	 Assigning to 103 (cl=INDEX_REGS, orig=103, freq=1000, tfirst=103, tfreq=1000)...
	   Assign 0 to reload r103 (freq=1000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=48)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=16, prev_offset=16)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
changing reg in insn 9
changing reg in insn 13
changing reg in insn 11
changing reg in insn 33
changing reg in insn 37
changing reg in insn 34
changing reg in insn 21
changing reg in insn 25
changing reg in insn 22
changing reg in insn 2
changing reg in insn 9
changing reg in insn 3
changing reg in insn 18
changing reg in insn 10
changing reg in insn 17
changing reg in insn 14
changing reg in insn 11
changing reg in insn 15
changing reg in insn 56
changing reg in insn 42
changing reg in insn 6
changing reg in insn 47
deleting insn with uid = 2.
deleting insn with uid = 13.
deleting insn with uid = 25.
deleting insn with uid = 37.


try_optimize_cfg iteration 1

Merging block 6 into block 5...
changing bb of uid 33
  from 6 to 5
changing bb of uid 34
  from 6 to 5
changing bb of uid 35
  from 6 to 5
Merged blocks 5 and 6.
Merged 5 and 6 without moving.


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 15.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 49.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 12 count 11 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 12 count 11 (    1)


void leveldb_iter_get_error(const leveldb_iterator_t*, char**)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags]
;;  ref usage 	r0={11d,2u} r1={8d} r2={7d} r3={2d,3u} r4={9d,4u} r5={12d,8u} r6={1d,1u} r7={1d,21u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r16={1u} r17={10d,3u} r18={6d} r19={6d} r20={3e} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={7d} r38={7d} r39={6d} r40={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} 
;;    total ref usage 513{467d,43u,3e} in 25{19 regular + 6 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp] 16 [argp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 4 [si] 5 [di] 6 [bp]
;; live  kill	 17 [flags]
(note 7 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 3 7 4 2 (set (reg/v/f:DI 6 bp [orig:94 errptr ] [94])
        (reg:DI 4 si [ errptr ])) db/c.cc:333 89 {*movdi_internal}
     (nil))
(note 4 3 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 4 9 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                        (const_int 8 [0x8])) [3 D.37308+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [102])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) db/c.cc:333 986 {stack_tls_protect_set_di}
     (nil))
(insn 9 6 10 2 (set (reg/f:DI 4 si [orig:87 D.37304 ] [87])
        (mem/f:DI (reg/v/f:DI 5 di [orig:93 iter ] [93]) [3 iter_2(D)->rep+0 S8 A64])) db/c.cc:334 89 {*movdi_internal}
     (nil))
(insn 10 9 11 2 (set (reg/f:DI 3 bx [96])
        (reg/f:DI 7 sp)) db/c.cc:334 89 {*movdi_internal}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [orig:97 _3->_vptr.Iterator ] [97])
        (mem/f:DI (reg/f:DI 4 si [orig:87 D.37304 ] [87]) [3 _3->_vptr.Iterator+0 S8 A64])) db/c.cc:334 89 {*movdi_internal}
     (nil))
(note 12 11 14 2 NOTE_INSN_DELETED)
(insn 14 12 15 2 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [96])) db/c.cc:334 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))
(call_insn 15 14 17 2 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:97 _3->_vptr.Iterator ] [97])
                    (const_int 80 [0x50])) [3 MEM[(int (*__vtbl_ptr_type) () *)_4 + 80B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_5;(const struct Iterator)_3->10) S1 A8])
        (const_int 0 [0])) db/c.cc:334 660 {*call}
     (expr_list:REG_CALL_DECL (nil)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 17 15 18 2 (set (reg:DI 4 si)
        (reg/f:DI 3 bx [96])) db/c.cc:334 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -16 [0xfffffffffffffff0]))
        (nil)))
(insn 18 17 19 2 (set (reg:DI 5 di)
        (reg/v/f:DI 6 bp [orig:94 errptr ] [94])) db/c.cc:334 89 {*movdi_internal}
     (nil))
(call_insn 19 18 20 2 (set (reg:QI 0 ax)
        (call (mem:QI (symbol_ref:DI ("SaveError") [flags 0x3]  <function_decl 0x7fb53738c798 SaveError>) [0 SaveError S1 A8])
            (const_int 0 [0]))) db/c.cc:334 669 {*call_value}
     (expr_list:REG_EH_REGION (const_int 1 [0x1])
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("SaveError") [flags 0x3]  <function_decl 0x7fb53738c798 SaveError>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
;;  succ:       5 (ABNORMAL,ABNORMAL_CALL,EH)
;;              3 [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp] 16 [argp]
;; live  out 	 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(note 20 19 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 21 20 22 3 (set (reg/f:DI 5 di [orig:91 D.37307 ] [91])
        (mem/f/c:DI (reg/f:DI 7 sp) [3 D.31600.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn 22 21 23 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:91 D.37307 ] [91])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 23 22 24 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 45)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 45)
;;  succ:       4 [78.3%]  (FALLTHRU)
;;              9 [21.6%] 
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 7835, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [78.3%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 24 23 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn 26 24 70 4 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(jump_insn 70 26 71 4 (set (pc)
        (label_ref 45)) db/c.cc:335 654 {jump}
     (nil)
 -> 45)
;;  succ:       9 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 71 70 55)
;; basic block 5, loop depth 0, count 0, freq 0
;;  prev block 4, next block 7, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 5 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 5 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 7 [sp] 16 [argp]
;; lr  use 	 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 17 [flags]
;; live  kill	
(code_label/s 55 71 57 5 309 "" [1 uses])
(note 57 55 56 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 56 57 33 5 (set (reg:DI 3 bx [100])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (nil))
(insn 33 56 34 5 (set (reg/f:DI 5 di [orig:90 D.37307 ] [90])
        (mem/f/c:DI (reg/f:DI 7 sp) [3 D.31600.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn 34 33 35 5 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:90 D.37307 ] [90])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 35 34 36 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 39)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (int_list:REG_BR_PROB 3017 (nil))
 -> 39)
;;  succ:       7 [69.8%]  (FALLTHRU)
;;              8 [30.2%] 
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

;; basic block 7, loop depth 0, count 0, freq 0
;;  prev block 5, next block 8, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [69.8%]  (FALLTHRU)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 36 35 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(call_insn 38 36 39 7 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       8 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 8, loop depth 0, count 0, freq 0
;;  prev block 7, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [30.2%] 
;;              7 [100.0%]  (FALLTHRU)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 39 38 40 8 307 "" [1 uses])
(note 40 39 42 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
(insn 42 40 43 8 (set (reg:DI 5 di)
        (reg:DI 3 bx [100])) 89 {*movdi_internal}
     (nil))
(call_insn 43 42 44 8 (call (mem:QI (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>) [0 __builtin_unwind_resume S1 A8])
        (const_int 0 [0])) 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 44 43 45)
;; basic block 9, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 8, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [21.6%] 
;;              4 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	 0 [ax]
(code_label 45 44 52 9 304 "" [2 uses])
(note 52 45 47 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(insn 47 52 48 9 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                                (const_int 8 [0x8])) [3 D.37308+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 0 ax [103]))
        ]) db/c.cc:335 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 48 47 53 9 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 51)
            (pc))) db/c.cc:335 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 51)
;;  succ:       11 [100.0%] 
;;              10 [0.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 10, loop depth 0, count 0, freq 4
;;  prev block 9, next block 11, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [0.0%]  (FALLTHRU)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 53 48 49 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
(call_insn 49 53 50 10 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) db/c.cc:335 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 50 49 51)
;; basic block 11, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 10, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 51 50 54 11 308 "" [1 uses])
(note 54 51 72 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 72 54 0 NOTE_INSN_DELETED)

;; Function leveldb_writebatch_t* leveldb_writebatch_create() (leveldb_writebatch_create, funcdef_no=1455, decl_uid=2243, cgraph_uid=565, symbol_order=568)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 5:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) rBwBz {*call}

********** Pseudo live ranges #1: **********

  BB 5
   Insn 21: point = 0
   Insn 20: point = 0
   Insn 18: point = 1
   Insn 17: point = 1
  BB 4
   Insn 28: point = 3
  BB 6
   Insn 25: point = 5
   Insn 24: point = 5
  BB 3
   Insn 32: point = 7
  BB 2
   Insn 10: point = 8
   Insn 9: point = 8
   Insn 7: point = 8
   Insn 6: point = 9
   Insn 5: point = 9
Compressing live ranges: from 9 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
changing reg in insn 7
changing reg in insn 24
changing reg in insn 17
changing reg in insn 9
changing reg in insn 28
changing reg in insn 20


try_optimize_cfg iteration 1

Forwarding edge 2->3 to 6 failed.
Merging block 5 into block 4...
changing bb of uid 17
  from 5 to 4
changing bb of uid 18
  from 5 to 4
changing bb of uid 20
  from 5 to 4
changing bb of uid 21
  from 5 to 4
Merged blocks 4 and 5.
Merged 4 and 5 without moving.


try_optimize_cfg iteration 2

Forwarding edge 2->3 to 6 failed.


try_optimize_cfg iteration 1

Forwarding edge 2->3 to 6 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 6.
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 21.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 5 count 6 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 5 count 6 (    1)


leveldb_writebatch_t* leveldb_writebatch_create()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={7d,4u} r1={6d} r2={5d} r3={1d,3u} r4={5d} r5={9d,4u} r6={1d,1u} r7={1d,9u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1u} r17={4d} r18={4d} r19={4d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 335{313d,22u,0e} in 13{9 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 16 [argp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di]
;; live  kill	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 5 di)
        (const_int 32 [0x20])) db/c.cc:338 89 {*movdi_internal}
     (nil))
(call_insn 6 5 7 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>) [0 operator new S1 A8])
            (const_int 0 [0]))) db/c.cc:338 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 7 6 9 2 (set (reg/f:DI 3 bx [orig:87 D.37315 ] [87])
        (reg:DI 0 ax)) db/c.cc:338 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 91)
        (nil)))
(insn 9 7 10 2 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:87 D.37315 ] [87])) db/c.cc:48 89 {*movdi_internal}
     (nil))
(call_insn 10 9 30 2 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb10WriteBatchC1Ev") [flags 0x41]  <function_decl 0x7fb537669438 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) db/c.cc:48 660 {*call}
     (expr_list:REG_EH_REGION (const_int 1 [0x1])
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb10WriteBatchC1Ev") [flags 0x41]  <function_decl 0x7fb537669438 __comp_ctor >)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       3 [100.0%]  (FALLTHRU)
;;              4 (ABNORMAL,ABNORMAL_CALL,EH)
;; lr  out 	 3 [bx] 7 [sp] 16 [argp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	
;; live  kill	
(note 30 10 32 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(jump_insn 32 30 33 3 (set (pc)
        (label_ref 31)) 654 {jump}
     (nil)
 -> 31)
;;  succ:       6 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 33 32 27)
;; basic block 4, loop depth 0, count 0, freq 0
;;  prev block 3, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 4 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 4 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 3 [bx] 7 [sp] 16 [argp]
;; lr  use 	 3 [bx] 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 5 [di] 6 [bp]
;; live  kill	
(code_label/s 27 33 29 4 320 "" [1 uses])
(note 29 27 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 28 29 17 4 (set (reg:DI 6 bp [93])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (nil))
(insn 17 28 18 4 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:87 D.37315 ] [87])) db/c.cc:338 89 {*movdi_internal}
     (nil))
(call_insn 18 17 20 4 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) db/c.cc:338 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 20 18 21 4 (set (reg:DI 5 di)
        (reg:DI 6 bp [93])) 89 {*movdi_internal}
     (nil))
(call_insn 21 20 22 4 (call (mem:QI (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>) [0 __builtin_unwind_resume S1 A8])
        (const_int 0 [0])) 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 22 21 31)
;; basic block 6, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 4, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 31 22 26 6 321 "" [1 uses])
(note 26 31 24 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 24 26 25 6 (set (reg/i:DI 0 ax)
        (reg/f:DI 3 bx [orig:87 D.37315 ] [87])) db/c.cc:339 89 {*movdi_internal}
     (nil))
(insn 25 24 34 6 (use (reg/i:DI 0 ax)) db/c.cc:339 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 34 25 0 NOTE_INSN_DELETED)

;; Function void leveldb_writebatch_destroy(leveldb_writebatch_t*) (leveldb_writebatch_destroy, funcdef_no=1459, decl_uid=2245, cgraph_uid=569, symbol_order=572)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 4
  BB 3
   Insn 12: point = 0
   Insn 11: point = 0
   Insn 10: point = 1
   Insn 9: point = 1
   Insn 18: point = 1
  BB 2
   Insn 7: point = 4
   Insn 6: point = 4
   Insn 2: point = 4
Compressing live ranges: from 5 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 2
changing reg in insn 18
changing reg in insn 6
changing reg in insn 18
changing reg in insn 9
changing reg in insn 11
deleting insn with uid = 2.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 12.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)


void leveldb_writebatch_destroy(leveldb_writebatch_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 3[bx] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={3d} r1={3d} r2={3d} r3={1d,2u} r4={3d} r5={5d,4u} r7={1d,6u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={3d,1u} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 177{164d,13u,0e} in 7{5 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 5 di [orig:88 b ] [88])
            (const_int 0 [0]))) db/c.cc:342 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 16)
            (pc))) db/c.cc:342 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 16)
;;  succ:       3 [78.3%]  (FALLTHRU)
;;              4 [21.6%] 
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 7835, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [78.3%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 3 [bx] 5 [di]
;; live  kill	
(note 8 7 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 18 8 9 3 (set (reg/v/f:DI 3 bx [orig:88 b ] [88])
        (reg/v/f:DI 5 di [orig:88 b ] [88])) 89 {*movdi_internal}
     (nil))
(insn 9 18 10 3 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:88 b ] [88])) db/c.cc:48 89 {*movdi_internal}
     (nil))
(call_insn 10 9 11 3 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb10WriteBatchD1Ev") [flags 0x41]  <function_decl 0x7fb5376695e8 __comp_dtor >) [0 __comp_dtor  S1 A8])
        (const_int 0 [0])) db/c.cc:48 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb10WriteBatchD1Ev") [flags 0x41]  <function_decl 0x7fb5376695e8 __comp_dtor >)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 12 3 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:88 b ] [88])) db/c.cc:342 89 {*movdi_internal}
     (nil))
(call_insn/j 12 11 13 3 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) db/c.cc:342 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 13 12 16)
;; basic block 4, loop depth 0, count 0, freq 2165, maybe hot
;;  prev block 3, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [21.6%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 16 13 17 4 324 "" [1 uses])
(note 17 16 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 19 17 0 NOTE_INSN_DELETED)

;; Function void leveldb_writebatch_clear(leveldb_writebatch_t*) (leveldb_writebatch_clear, funcdef_no=1463, decl_uid=2247, cgraph_uid=570, symbol_order=573)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 7: point = 0
   Insn 6: point = 0
   Insn 2: point = 1
Compressing live ranges: from 2 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 6
deleting insn with uid = 2.
deleting insn with uid = 6.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_writebatch_clear(leveldb_writebatch_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 5[di] 7[sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={2d} r5={2d,1u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 92{88d,4u,0e} in 1{0 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 7 2 NOTE_INSN_FUNCTION_BEG)
(call_insn/j 7 3 8 2 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb10WriteBatch5ClearEv") [flags 0x41]  <function_decl 0x7fb537663870 Clear>) [0 Clear S1 A8])
        (const_int 0 [0])) db/c.cc:346 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb10WriteBatch5ClearEv") [flags 0x41]  <function_decl 0x7fb537663870 Clear>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 8 7 11)
(note 11 8 0 NOTE_INSN_DELETED)

;; Function void leveldb_writebatch_put(leveldb_writebatch_t*, const char*, size_t, const char*, size_t) (leveldb_writebatch_put, funcdef_no=1464, decl_uid=2253, cgraph_uid=571, symbol_order=574)

      Creating newreg=97
Removing SCRATCH in insn #9 (nop 2)
rescanning insn with uid = 9.
      Creating newreg=98
Removing SCRATCH in insn #24 (nop 3)
rescanning insn with uid = 24.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=64, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=48, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r97
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 16:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) rBwBz {*call}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r98
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 3
   Insn 26: point = 0
  BB 4
  BB 2
   Insn 25: point = 0
   Insn 24: point = 0
   Insn 21: point = 1
   Insn 20: point = 1
   Insn 19: point = 2
   Insn 18: point = 3
   Insn 17: point = 4
   Insn 16: point = 5
   Insn 15: point = 6
   Insn 14: point = 7
   Insn 13: point = 8
   Insn 12: point = 8
   Insn 9: point = 9
   Insn 5: point = 11
   Insn 4: point = 12
   Insn 3: point = 13
   Insn 2: point = 14
 r88: [1..14]
 r89: [7..13]
 r90: [6..12]
 r91: [8..11]
 r94: [3..5]
 r95: [2..4]
 r97: [9..10]
 r98: [0..0]
Compressing live ranges: from 15 to 5 - 33%
Ranges after the compression:
 r88: [1..4]
 r89: [3..4]
 r90: [3..4]
 r91: [3..4]
 r94: [1..2]
 r95: [1..2]
 r97: [3..4]
 r98: [0..0]

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4

********** Pseudo live ranges #2: **********

  BB 3
   Insn 26: point = 0
  BB 4
  BB 2
   Insn 25: point = 0
   Insn 24: point = 0
   Insn 21: point = 1
   Insn 20: point = 1
   Insn 19: point = 2
   Insn 18: point = 3
   Insn 17: point = 4
   Insn 16: point = 5
   Insn 15: point = 6
   Insn 14: point = 7
   Insn 13: point = 8
   Insn 12: point = 8
   Insn 9: point = 9
   Insn 5: point = 11
   Insn 4: point = 12
   Insn 3: point = 13
   Insn 2: point = 14
 r88: [1..14]
 r89: [7..13]
 r90: [6..12]
 r91: [8..11]
 r94: [3..5]
 r95: [2..4]
 r97: [9..10]
 r98: [0..0]
Compressing live ranges: from 15 to 5 - 33%
Ranges after the compression:
 r88: [1..4]
 r89: [3..4]
 r90: [3..4]
 r91: [3..4]
 r94: [1..2]
 r95: [1..2]
 r97: [3..4]
 r98: [0..0]

********** Assignment #1: **********

	 Assigning to 97 (cl=INDEX_REGS, orig=97, freq=1000, tfirst=97, tfreq=1000)...
	   Assign 0 to reload r97 (freq=1000)
	 Assigning to 98 (cl=INDEX_REGS, orig=98, freq=1000, tfirst=98, tfreq=1000)...
	   Assign 0 to reload r98 (freq=1000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=64, prev_offset=64)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=48, prev_offset=48)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 2
changing reg in insn 20
changing reg in insn 3
changing reg in insn 14
changing reg in insn 4
changing reg in insn 15
changing reg in insn 5
changing reg in insn 12
changing reg in insn 16
changing reg in insn 18
changing reg in insn 17
changing reg in insn 19
changing reg in insn 9
changing reg in insn 24
deleting insn with uid = 2.
deleting insn with uid = 3.
deleting insn with uid = 4.
deleting insn with uid = 5.
deleting insn with uid = 18.
deleting insn with uid = 19.
deleting insn with uid = 20.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 26.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 4 count 5 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 4 count 5 (    1)


void leveldb_writebatch_put(leveldb_writebatch_t*, const char*, size_t, const char*, size_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 4[si] 5[di] 7[sp] 17[flags] 37[r8]
;;  ref usage 	r0={5d} r1={4d,2u} r2={3d,1u} r4={4d,2u} r5={3d,1u} r7={1d,14u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={5d,1u} r18={2d} r19={2d} r20={2e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d,1u} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 191{167d,22u,2e} in 11{9 regular + 2 call} insns.
(note 1 0 10 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 1 [dx] 4 [si] 17 [flags]
;; live  kill	 0 [ax] 17 [flags]
(note 10 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 6 10 7 2 NOTE_INSN_DELETED)
(note 7 6 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 7 12 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                        (const_int 40 [0x28])) [3 D.37326+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [97])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) db/c.cc:352 986 {stack_tls_protect_set_di}
     (nil))
(insn 12 9 13 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [3 D.31655.data_+0 S8 A128])
        (reg/v/f:DI 2 cx [orig:91 val ] [91])) ./include/leveldb/slice.h:31 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [9 D.31655.size_+0 S8 A64])
        (reg:DI 37 r8 [ vlen ])) ./include/leveldb/slice.h:31 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (mem/f/c:DI (reg/f:DI 7 sp) [3 D.31654.data_+0 S8 A128])
        (reg/v/f:DI 4 si [orig:89 key ] [89])) ./include/leveldb/slice.h:31 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [9 D.31654.size_+0 S8 A64])
        (reg/v:DI 1 dx [orig:90 klen ] [90])) ./include/leveldb/slice.h:31 89 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (parallel [
            (set (reg/f:DI 1 dx [94])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) db/c.cc:353 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -32 [0xffffffffffffffe0]))
        (nil)))
(insn 17 16 21 2 (set (reg/f:DI 4 si [95])
        (reg/f:DI 7 sp)) db/c.cc:353 89 {*movdi_internal}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(call_insn 21 17 24 2 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb10WriteBatch3PutERKNS_5SliceES3_") [flags 0x41]  <function_decl 0x7fb5376636c0 Put>) [0 Put S1 A8])
        (const_int 0 [0])) db/c.cc:353 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb10WriteBatch3PutERKNS_5SliceES3_") [flags 0x41]  <function_decl 0x7fb5376636c0 Put>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
(insn 24 21 25 2 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                                (const_int 40 [0x28])) [3 D.37326+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 0 ax [98]))
        ]) db/c.cc:354 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 25 24 30 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) db/c.cc:354 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 28)
;;  succ:       4 [100.0%] 
;;              3 [0.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 4
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [0.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 30 25 26 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(call_insn 26 30 27 3 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) db/c.cc:354 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 27 26 28)
;; basic block 4, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 3, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 28 27 31 4 330 "" [1 uses])
(note 31 28 32 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 32 31 0 NOTE_INSN_DELETED)

;; Function void leveldb_writebatch_delete(leveldb_writebatch_t*, const char*, size_t) (leveldb_writebatch_delete, funcdef_no=1465, decl_uid=2257, cgraph_uid=572, symbol_order=575)

      Creating newreg=94
Removing SCRATCH in insn #7 (nop 2)
rescanning insn with uid = 7.
      Creating newreg=95
Removing SCRATCH in insn #18 (nop 3)
rescanning insn with uid = 18.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=32, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r94
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 10:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) rBwBz {*call}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r95
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 3
   Insn 20: point = 0
  BB 4
  BB 2
   Insn 19: point = 0
   Insn 18: point = 0
   Insn 15: point = 1
   Insn 14: point = 1
   Insn 13: point = 2
   Insn 12: point = 3
   Insn 11: point = 4
   Insn 10: point = 5
   Insn 7: point = 6
   Insn 4: point = 8
   Insn 3: point = 9
   Insn 2: point = 10
 r88: [1..10]
 r89: [5..9]
 r90: [4..8]
 r92: [2..3]
 r94: [6..7]
 r95: [0..0]
Compressing live ranges: from 11 to 5 - 45%
Ranges after the compression:
 r88: [1..4]
 r89: [3..4]
 r90: [3..4]
 r92: [1..2]
 r94: [3..4]
 r95: [0..0]

********** Inheritance #1: **********

EBB 2
EBB 3
EBB 4

********** Pseudo live ranges #2: **********

  BB 3
   Insn 20: point = 0
  BB 4
  BB 2
   Insn 19: point = 0
   Insn 18: point = 0
   Insn 15: point = 1
   Insn 14: point = 1
   Insn 13: point = 2
   Insn 12: point = 3
   Insn 11: point = 4
   Insn 10: point = 5
   Insn 7: point = 6
   Insn 4: point = 8
   Insn 3: point = 9
   Insn 2: point = 10
 r88: [1..10]
 r89: [5..9]
 r90: [4..8]
 r92: [2..3]
 r94: [6..7]
 r95: [0..0]
Compressing live ranges: from 11 to 5 - 45%
Ranges after the compression:
 r88: [1..4]
 r89: [3..4]
 r90: [3..4]
 r92: [1..2]
 r94: [3..4]
 r95: [0..0]

********** Assignment #1: **********

	 Assigning to 94 (cl=INDEX_REGS, orig=94, freq=1000, tfirst=94, tfreq=1000)...
	   Assign 0 to reload r94 (freq=1000)
	 Assigning to 95 (cl=INDEX_REGS, orig=95, freq=1000, tfirst=95, tfreq=1000)...
	   Assign 0 to reload r95 (freq=1000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=48)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=32, prev_offset=32)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 2
changing reg in insn 14
changing reg in insn 3
changing reg in insn 10
changing reg in insn 4
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
changing reg in insn 7
changing reg in insn 18
deleting insn with uid = 2.
deleting insn with uid = 3.
deleting insn with uid = 4.
deleting insn with uid = 13.
deleting insn with uid = 14.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 20.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 4 count 5 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 4 count 5 (    1)


void leveldb_writebatch_delete(leveldb_writebatch_t*, const char*, size_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 4[si] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={5d} r1={3d,1u} r2={3d} r4={4d,2u} r5={3d,1u} r7={1d,11u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d,1u} r18={2d} r19={2d} r20={1e} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 182{165d,16u,1e} in 8{6 regular + 2 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 4 [si] 17 [flags]
;; live  kill	 0 [ax] 17 [flags]
(note 8 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 8 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 5 10 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                        (const_int 24 [0x18])) [3 D.37330+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 0 ax [94])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) db/c.cc:358 986 {stack_tls_protect_set_di}
     (nil))
(insn 10 7 11 2 (set (mem/f/c:DI (reg/f:DI 7 sp) [3 D.31661.data_+0 S8 A128])
        (reg/v/f:DI 4 si [orig:89 key ] [89])) ./include/leveldb/slice.h:31 89 {*movdi_internal}
     (nil))
(insn 11 10 12 2 (set (mem/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 8 [0x8])) [9 D.31661.size_+0 S8 A64])
        (reg/v:DI 1 dx [orig:90 klen ] [90])) ./include/leveldb/slice.h:31 89 {*movdi_internal}
     (nil))
(insn 12 11 15 2 (set (reg/f:DI 4 si [92])
        (reg/f:DI 7 sp)) db/c.cc:359 89 {*movdi_internal}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -32 [0xffffffffffffffe0]))
        (nil)))
(call_insn 15 12 18 2 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb10WriteBatch6DeleteERKNS_5SliceE") [flags 0x41]  <function_decl 0x7fb537663798 Delete>) [0 Delete S1 A8])
        (const_int 0 [0])) db/c.cc:359 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb10WriteBatch6DeleteERKNS_5SliceE") [flags 0x41]  <function_decl 0x7fb537663798 Delete>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (nil))))
(insn 18 15 19 2 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                                (const_int 24 [0x18])) [3 D.37330+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 0 ax [95]))
        ]) db/c.cc:360 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 19 18 24 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 22)
            (pc))) db/c.cc:360 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 22)
;;  succ:       4 [100.0%] 
;;              3 [0.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 4
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [0.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 24 19 20 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(call_insn 20 24 21 3 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) db/c.cc:360 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 21 20 22)
;; basic block 4, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 3, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 22 21 25 4 334 "" [1 uses])
(note 25 22 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 26 25 0 NOTE_INSN_DELETED)

;; Function void leveldb_writebatch_iterate(leveldb_writebatch_t*, void*, void (*)(void*, const char*, size_t, const char*, size_t), void (*)(void*, const char*, size_t)) (leveldb_writebatch_iterate, funcdef_no=1466, decl_uid=2270, cgraph_uid=581, symbol_order=584)

      Creating newreg=109
Removing SCRATCH in insn #8 (nop 2)
rescanning insn with uid = 8.
      Creating newreg=110
Removing SCRATCH in insn #54 (nop 3)
rescanning insn with uid = 54.

********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=96, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=64, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
            2 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) =m  (1) i  (2) =&r {stack_tls_protect_set_di}
      Change to class INDEX_REGS for r109
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) =r  (1) Ts {*leadi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) re {*movdi_internal}
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=0,overall=10,losers=1,rld_nregs=1
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
          alt=1,overall=10,losers=1,rld_nregs=1
            2 Matching alt: reject+=2
            2 Non-pseudo reload: reject+=2
            2 Non input pseudo reload: reject++
            alt=2,overall=11,losers=1 -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=11,losers=1 -- refuse
            1 Matching alt: reject+=2
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=11,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
	 Choosing alt 3 in insn 18:  (0) r  (1) r  (2) le {*adddi_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) rBwBz {*call}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) r {*cmpdi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 29:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 33:  (0) =r  (1) Ts {*leadi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 34:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 37:  (0) rBwBz {*call}
            3 Scratch win: reject+=2
          alt=0,overall=2,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 54:  (1) m  (2) i  (3) =r {stack_tls_protect_test_di}
      Change to class INDEX_REGS for r110
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) Ts {*leadi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 44:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 47:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 50:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 56:  (0) rBwBz {*call}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 8
   Insn 50: point = 0
   Insn 49: point = 0
   Insn 47: point = 1
   Insn 46: point = 1
   Insn 44: point = 2
   Insn 43: point = 3
  BB 7
   Insn 63: point = 6
  BB 9
   Insn 56: point = 8
  BB 6
   Insn 79: point = 8
  BB 10
  BB 5
   Insn 55: point = 8
   Insn 54: point = 8
   Insn 37: point = 9
   Insn 36: point = 9
   Insn 34: point = 10
   Insn 33: point = 11
  BB 4
   Insn 29: point = 14
   Insn 28: point = 14
  BB 3
   Insn 26: point = 16
   Insn 25: point = 16
   Insn 24: point = 16
  BB 2
   Insn 22: point = 18
   Insn 21: point = 18
   Insn 20: point = 19
   Insn 19: point = 20
   Insn 18: point = 20
   Insn 17: point = 21
   Insn 16: point = 22
   Insn 15: point = 23
   Insn 14: point = 24
   Insn 13: point = 25
   Insn 12: point = 26
   Insn 11: point = 27
   Insn 8: point = 28
   Insn 5: point = 30
   Insn 4: point = 31
   Insn 3: point = 32
   Insn 2: point = 33
 r88: [14..16]
 r90: [19..33]
 r91: [24..32]
 r92: [23..31]
 r93: [22..30]
 r95: [25..26]
 r97: [18..21]
 r99: [10..11]
 r102: [2..3]
 r105: [0..6]
 r107: [12..27] [4..7]
 r108: [9..20] [1..7]
 r109: [28..29]
 r110: [8..8]
Compressing live ranges: from 34 to 15 - 44%
Ranges after the compression:
 r88: [7..8]
 r90: [9..14]
 r91: [11..14]
 r92: [11..14]
 r93: [11..14]
 r95: [11..12]
 r97: [9..10]
 r99: [5..6]
 r102: [0..1]
 r105: [0..3]
 r107: [7..12] [2..3]
 r108: [5..10] [0..3]
 r109: [13..14]
 r110: [4..4]

********** Inheritance #1: **********

EBB 2 3 4
EBB 5
EBB 6
EBB 7
EBB 8
EBB 9
EBB 10

********** Pseudo live ranges #2: **********

  BB 8
   Insn 50: point = 0
   Insn 49: point = 0
   Insn 47: point = 1
   Insn 46: point = 1
   Insn 44: point = 2
   Insn 43: point = 3
  BB 7
   Insn 63: point = 6
  BB 9
   Insn 56: point = 8
  BB 6
   Insn 79: point = 8
  BB 10
  BB 5
   Insn 55: point = 8
   Insn 54: point = 8
   Insn 37: point = 9
   Insn 36: point = 9
   Insn 34: point = 10
   Insn 33: point = 11
  BB 4
   Insn 29: point = 14
   Insn 28: point = 14
  BB 3
   Insn 26: point = 16
   Insn 25: point = 16
   Insn 24: point = 16
  BB 2
   Insn 22: point = 18
   Insn 21: point = 18
   Insn 20: point = 19
   Insn 19: point = 20
   Insn 18: point = 20
   Insn 17: point = 21
   Insn 16: point = 22
   Insn 15: point = 23
   Insn 14: point = 24
   Insn 13: point = 25
   Insn 12: point = 26
   Insn 11: point = 27
   Insn 8: point = 28
   Insn 5: point = 30
   Insn 4: point = 31
   Insn 3: point = 32
   Insn 2: point = 33
 r88: [14..16]
 r90: [19..33]
 r91: [24..32]
 r92: [23..31]
 r93: [22..30]
 r95: [25..26]
 r97: [18..21]
 r99: [10..11]
 r102: [2..3]
 r105: [0..6]
 r107: [12..27] [4..7]
 r108: [9..20] [1..7]
 r109: [28..29]
 r110: [8..8]
Compressing live ranges: from 34 to 15 - 44%
Ranges after the compression:
 r88: [7..8]
 r90: [9..14]
 r91: [11..14]
 r92: [11..14]
 r93: [11..14]
 r95: [11..12]
 r97: [9..10]
 r99: [5..6]
 r102: [0..1]
 r105: [0..3]
 r107: [7..12] [2..3]
 r108: [5..10] [0..3]
 r109: [13..14]
 r110: [4..4]

********** Assignment #1: **********

	 Assigning to 109 (cl=INDEX_REGS, orig=109, freq=1000, tfirst=109, tfreq=1000)...
	   Assign 3 to reload r109 (freq=1000)
	 Assigning to 110 (cl=INDEX_REGS, orig=110, freq=1000, tfirst=110, tfreq=1000)...
	   Assign 0 to reload r110 (freq=1000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=96, prev_offset=96)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=64, prev_offset=64)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
changing reg in insn 24
changing reg in insn 28
changing reg in insn 25
changing reg in insn 2
changing reg in insn 20
changing reg in insn 3
changing reg in insn 14
changing reg in insn 4
changing reg in insn 15
changing reg in insn 5
changing reg in insn 16
changing reg in insn 12
changing reg in insn 13
changing reg in insn 17
changing reg in insn 21
changing reg in insn 33
changing reg in insn 34
changing reg in insn 43
changing reg in insn 44
changing reg in insn 63
changing reg in insn 49
changing reg in insn 11
changing reg in insn 43
changing reg in insn 33
changing reg in insn 12
changing reg in insn 18
changing reg in insn 46
changing reg in insn 36
changing reg in insn 19
changing reg in insn 8
changing reg in insn 54
deleting insn with uid = 3.
deleting insn with uid = 4.
deleting insn with uid = 5.
deleting insn with uid = 21.
deleting insn with uid = 28.


try_optimize_cfg iteration 1

Forwarding edge 5->6 to 9 failed.
Merging block 8 into block 7...
changing bb of uid 43
  from 8 to 7
changing bb of uid 44
  from 8 to 7
changing bb of uid 46
  from 8 to 7
changing bb of uid 47
  from 8 to 7
changing bb of uid 49
  from 8 to 7
changing bb of uid 50
  from 8 to 7
Merged blocks 7 and 8.
Merged 7 and 8 without moving.


try_optimize_cfg iteration 2

Forwarding edge 5->6 to 9 failed.


try_optimize_cfg iteration 1

Forwarding edge 5->6 to 9 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 37.
verify found no changes in insn with uid = 47.
verify found no changes in insn with uid = 50.
verify found no changes in insn with uid = 56.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 10 count 10 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 10 n_edges 10 count 10 (    1)


void leveldb_writebatch_iterate(leveldb_writebatch_t*, void*, void (*)(void*, const char*, size_t, const char*, size_t), void (*)(void*, const char*, size_t))

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 17[flags] 41[r12]
;;  ref usage 	r0={11d,3u} r1={10d,3u} r2={7d,1u} r3={2d,3u} r4={8d,2u} r5={13d,8u} r6={1d,3u} r7={1d,26u} r8={6d} r9={6d} r10={6d} r11={6d} r12={6d} r13={6d} r14={6d} r15={6d} r16={1u} r17={10d,2u} r18={6d} r19={6d} r20={5e} r21={7d} r22={7d} r23={7d} r24={7d} r25={7d} r26={7d} r27={7d} r28={7d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={7d} r38={7d} r39={6d} r40={6d} r41={1d,1u} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} 
;;    total ref usage 528{470d,53u,5e} in 32{26 regular + 6 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 16 [argp]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 4 [si] 5 [di] 6 [bp]
;; live  kill	 17 [flags]
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 9 6 2 (set (reg/v/f:DI 0 ax [orig:90 b ] [90])
        (reg:DI 5 di [ b ])) db/c.cc:366 89 {*movdi_internal}
     (nil))
(note 6 2 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 6 11 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                        (const_int 56 [0x38])) [3 D.37336+0 S8 A64])
                (unspec:DI [
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_SET))
            (set (reg:DI 3 bx [109])
                (const_int 0 [0]))
            (clobber (reg:CC 17 flags))
        ]) db/c.cc:366 986 {stack_tls_protect_set_di}
     (nil))
(insn 11 8 12 2 (set (reg:DI 6 bp [107])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTVZ26leveldb_writebatch_iterateE1H")  <var_decl 0x7fb5373d9ab0 _ZTVZ26leveldb_writebatch_iterateE1H>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])) db/c.cc:367 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTVZ26leveldb_writebatch_iterateE1H")  <var_decl 0x7fb5373d9ab0 _ZTVZ26leveldb_writebatch_iterateE1H>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])
        (nil)))
(insn 12 11 13 2 (set (reg/f:DI 5 di [95])
        (plus:DI (reg:DI 6 bp [107])
            (const_int 16 [0x10]))) db/c.cc:367 214 {*leadi}
     (expr_list:REG_EQUIV (const:DI (plus:DI (symbol_ref/i:DI ("_ZTVZ26leveldb_writebatch_iterateE1H")  <var_decl 0x7fb5373d9ab0 _ZTVZ26leveldb_writebatch_iterateE1H>)
                (const_int 16 [0x10])))
        (nil)))
(insn 13 12 14 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [3 handler.D.31723._vptr.Handler+0 S8 A128])
        (reg/f:DI 5 di [95])) db/c.cc:367 89 {*movdi_internal}
     (nil))
(insn 14 13 15 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 24 [0x18])) [3 handler.state_+0 S8 A64])
        (reg/v/f:DI 4 si [orig:91 state ] [91])) db/c.cc:380 89 {*movdi_internal}
     (nil))
(insn 15 14 16 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 32 [0x20])) [3 handler.put_+0 S8 A128])
        (reg/v/f:DI 1 dx [orig:92 put ] [92])) db/c.cc:381 89 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 40 [0x28])) [3 handler.deleted_+0 S8 A64])
        (reg/v/f:DI 2 cx [orig:93 deleted ] [93])) db/c.cc:382 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (reg/f:DI 5 di [97])
        (reg/f:DI 7 sp)) db/c.cc:383 89 {*movdi_internal}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -64 [0xffffffffffffffc0]))
        (nil)))
(insn 18 17 19 2 (parallel [
            (set (reg/f:DI 3 bx [108])
                (plus:DI (reg/f:DI 7 sp)
                    (const_int 16 [0x10])))
            (clobber (reg:CC 17 flags))
        ]) db/c.cc:383 218 {*adddi_1}
     (expr_list:REG_EQUIV (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(insn 19 18 20 2 (set (reg:DI 1 dx)
        (reg/f:DI 3 bx [108])) db/c.cc:383 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(insn 20 19 22 2 (set (reg:DI 4 si)
        (reg/v/f:DI 0 ax [orig:90 b ] [90])) db/c.cc:383 89 {*movdi_internal}
     (nil))
(call_insn 22 20 23 2 (call (mem:QI (symbol_ref:DI ("_ZNK7leveldb10WriteBatch7IterateEPNS0_7HandlerE") [flags 0x41]  <function_decl 0x7fb537669360 Iterate>) [0 Iterate S1 A8])
        (const_int 0 [0])) db/c.cc:383 660 {*call}
     (expr_list:REG_EH_REGION (const_int 1 [0x1])
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZNK7leveldb10WriteBatch7IterateEPNS0_7HandlerE") [flags 0x41]  <function_decl 0x7fb537669360 Iterate>)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (expr_list:DI (use (reg:DI 4 si))
            (expr_list:DI (use (reg:DI 1 dx))
                (nil)))))
;;  succ:       7 (ABNORMAL,ABNORMAL_CALL,EH)
;;              3 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp] 16 [argp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(note 23 22 24 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 24 23 25 3 (set (reg/f:DI 5 di [orig:88 D.37335 ] [88])
        (mem/f/c:DI (reg/f:DI 7 sp) [3 D.31757.state_+0 S8 A128])) ./include/leveldb/status.h:25 89 {*movdi_internal}
     (nil))
(insn 25 24 26 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:88 D.37335 ] [88])
            (const_int 0 [0]))) ./include/leveldb/status.h:25 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 26 25 27 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 30)
            (pc))) ./include/leveldb/status.h:25 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 30)
;;  succ:       4 [78.3%]  (FALLTHRU)
;;              5 [21.6%] 
;; lr  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 6 [bp] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 7835, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [78.3%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 6 [bp] 7 [sp]
;; live  gen 	
;; live  kill	
(note 27 26 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(call_insn 29 27 30 4 (call (mem:QI (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>) [0 operator delete [] S1 A8])
        (const_int 0 [0])) ./include/leveldb/status.h:25 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdaPv") [flags 0x41]  <function_decl 0x7fb538d99438 operator delete []>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 6 [bp] 7 [sp]
;; live  out 	 3 [bx] 6 [bp] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [21.6%] 
;;              4 [100.0%]  (FALLTHRU)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 5 [di] 17 [flags]
;; live  kill	 0 [ax]
(code_label 30 29 31 5 338 "" [1 uses])
(note 31 30 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 33 31 34 5 (set (reg/f:DI 0 ax [99])
        (plus:DI (reg:DI 6 bp [107])
            (const_int 16 [0x10]))) db/c.cc:367 214 {*leadi}
     (expr_list:REG_EQUIV (const:DI (plus:DI (symbol_ref/i:DI ("_ZTVZ26leveldb_writebatch_iterateE1H")  <var_decl 0x7fb5373d9ab0 _ZTVZ26leveldb_writebatch_iterateE1H>)
                (const_int 16 [0x10])))
        (nil)))
(insn 34 33 36 5 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [3 handler.D.31723._vptr.Handler+0 S8 A128])
        (reg/f:DI 0 ax [99])) db/c.cc:367 89 {*movdi_internal}
     (nil))
(insn 36 34 37 5 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [108])) db/c.cc:367 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(call_insn 37 36 54 5 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb10WriteBatch7HandlerD2Ev") [flags 0x41]  <function_decl 0x7fb5376690d8 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) db/c.cc:367 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb10WriteBatch7HandlerD2Ev") [flags 0x41]  <function_decl 0x7fb5376690d8 __base_dtor >)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 54 37 55 5 (parallel [
            (set (reg:CCZ 17 flags)
                (unspec:CCZ [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 7 sp)
                                (const_int 56 [0x38])) [3 D.37336+0 S8 A64])
                        (const_int 40 [0x28])
                    ] UNSPEC_SP_TLS_TEST))
            (clobber (reg:DI 0 ax [110]))
        ]) db/c.cc:384 990 {stack_tls_protect_test_di}
     (nil))
(jump_insn 55 54 77 5 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 58)
            (pc))) db/c.cc:384 612 {*jcc_1}
     (int_list:REG_BR_PROB 9996 (nil))
 -> 58)
;;  succ:       10 [100.0%] 
;;              6 [0.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

;; basic block 6, loop depth 0, count 0, freq 4
;;  prev block 5, next block 7, flags: (NEW, REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [0.0%]  (FALLTHRU)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(note 77 55 79 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(jump_insn 79 77 80 6 (set (pc)
        (label_ref 78)) 654 {jump}
     (nil)
 -> 78)
;;  succ:       9 [100.0%] 
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 80 79 62)
;; basic block 7, loop depth 0, count 0, freq 0
;;  prev block 6, next block 9, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 7 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 7 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 3 [bx] 6 [bp] 7 [sp] 16 [argp]
;; lr  use 	 3 [bx] 6 [bp] 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 6 [bp] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 5 [di] 41 [r12]
;; live  kill	
(code_label/s 62 80 64 7 341 "" [1 uses])
(note 64 62 63 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 63 64 43 7 (set (reg:DI 41 r12 [105])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (nil))
(insn 43 63 44 7 (set (reg/f:DI 1 dx [102])
        (plus:DI (reg:DI 6 bp [107])
            (const_int 16 [0x10]))) db/c.cc:367 214 {*leadi}
     (expr_list:REG_EQUIV (const:DI (plus:DI (symbol_ref/i:DI ("_ZTVZ26leveldb_writebatch_iterateE1H")  <var_decl 0x7fb5373d9ab0 _ZTVZ26leveldb_writebatch_iterateE1H>)
                (const_int 16 [0x10])))
        (nil)))
(insn 44 43 46 7 (set (mem/f/c:DI (plus:DI (reg/f:DI 7 sp)
                (const_int 16 [0x10])) [3 handler.D.31723._vptr.Handler+0 S8 A128])
        (reg/f:DI 1 dx [102])) db/c.cc:367 89 {*movdi_internal}
     (nil))
(insn 46 44 47 7 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [108])) db/c.cc:367 89 {*movdi_internal}
     (expr_list:REG_EQUAL (plus:DI (reg/f:DI 20 frame)
            (const_int -48 [0xffffffffffffffd0]))
        (nil)))
(call_insn 47 46 49 7 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb10WriteBatch7HandlerD2Ev") [flags 0x41]  <function_decl 0x7fb5376690d8 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) db/c.cc:367 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb10WriteBatch7HandlerD2Ev") [flags 0x41]  <function_decl 0x7fb5376690d8 __base_dtor >)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 49 47 50 7 (set (reg:DI 5 di)
        (reg:DI 41 r12 [105])) 89 {*movdi_internal}
     (nil))
(call_insn 50 49 51 7 (call (mem:QI (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>) [0 __builtin_unwind_resume S1 A8])
        (const_int 0 [0])) 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 51 50 78)
;; basic block 9, loop depth 0, count 0, freq 4
;;  prev block 7, next block 10, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       6 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 78 51 60 9 345 "" [1 uses])
(note 60 78 56 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
(call_insn 56 60 57 9 (call (mem:QI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>) [0 __stack_chk_fail S1 A8])
        (const_int 0 [0])) db/c.cc:384 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7fb5372f5a20 __stack_chk_fail>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (expr_list:REG_EH_REGION (const_int 0 [0])
                    (nil)))))
    (nil))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 57 56 58)
;; basic block 10, loop depth 0, count 0, freq 9996, maybe hot
;;  prev block 9, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       5 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 58 57 61 10 340 "" [1 uses])
(note 61 58 81 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 81 61 0 NOTE_INSN_DELETED)

;; Function leveldb_options_t* leveldb_options_create() (leveldb_options_create, funcdef_no=1475, decl_uid=2271, cgraph_uid=585, symbol_order=588)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 5:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 18:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 21:  (0) rBwBz {*call}

********** Pseudo live ranges #1: **********

  BB 5
   Insn 21: point = 0
   Insn 20: point = 0
   Insn 18: point = 1
   Insn 17: point = 1
  BB 4
   Insn 28: point = 3
  BB 6
   Insn 25: point = 5
   Insn 24: point = 5
  BB 3
   Insn 32: point = 7
  BB 2
   Insn 10: point = 8
   Insn 9: point = 8
   Insn 7: point = 8
   Insn 6: point = 9
   Insn 5: point = 9
Compressing live ranges: from 9 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
changing reg in insn 7
changing reg in insn 24
changing reg in insn 17
changing reg in insn 9
changing reg in insn 28
changing reg in insn 20


try_optimize_cfg iteration 1

Forwarding edge 2->3 to 6 failed.
Merging block 5 into block 4...
changing bb of uid 17
  from 5 to 4
changing bb of uid 18
  from 5 to 4
changing bb of uid 20
  from 5 to 4
changing bb of uid 21
  from 5 to 4
Merged blocks 4 and 5.
Merged 4 and 5 without moving.


try_optimize_cfg iteration 2

Forwarding edge 2->3 to 6 failed.


try_optimize_cfg iteration 1

Forwarding edge 2->3 to 6 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 6.
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 21.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 5 count 6 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 5 count 6 (    1)


leveldb_options_t* leveldb_options_create()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={7d,4u} r1={6d} r2={5d} r3={1d,3u} r4={5d} r5={9d,4u} r6={1d,1u} r7={1d,9u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r16={1u} r17={4d} r18={4d} r19={4d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 335{313d,22u,0e} in 13{9 regular + 4 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp] 16 [argp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di]
;; live  kill	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 5 di)
        (const_int 80 [0x50])) db/c.cc:387 89 {*movdi_internal}
     (nil))
(call_insn 6 5 7 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>) [0 operator new S1 A8])
            (const_int 0 [0]))) db/c.cc:387 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 7 6 9 2 (set (reg/f:DI 3 bx [orig:87 D.37343 ] [87])
        (reg:DI 0 ax)) db/c.cc:387 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 91)
        (nil)))
(insn 9 7 10 2 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:87 D.37343 ] [87])) db/c.cc:52 89 {*movdi_internal}
     (nil))
(call_insn 10 9 30 2 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb7OptionsC1Ev") [flags 0x41]  <function_decl 0x7fb537807360 __comp_ctor >) [0 __comp_ctor  S1 A8])
        (const_int 0 [0])) db/c.cc:52 660 {*call}
     (expr_list:REG_EH_REGION (const_int 1 [0x1])
        (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb7OptionsC1Ev") [flags 0x41]  <function_decl 0x7fb537807360 __comp_ctor >)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       3 [100.0%]  (FALLTHRU)
;;              4 (ABNORMAL,ABNORMAL_CALL,EH)
;; lr  out 	 3 [bx] 7 [sp] 16 [argp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 2, next block 4, flags: (NEW, REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [100.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	
;; live  kill	
(note 30 10 32 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(jump_insn 32 30 33 3 (set (pc)
        (label_ref 31)) 654 {jump}
     (nil)
 -> 31)
;;  succ:       6 [100.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

(barrier 33 32 27)
;; basic block 4, loop depth 0, count 0, freq 0
;;  prev block 3, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 (ABNORMAL,ABNORMAL_CALL,EH)
;; bb 4 artificial_defs: { d-1(0){ }d-1(1){ }}
;; bb 4 artificial_uses: { u-1(7){ }u-1(16){ }}
;; lr  in  	 3 [bx] 7 [sp] 16 [argp]
;; lr  use 	 3 [bx] 7 [sp] 16 [argp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 5 [di] 6 [bp]
;; live  kill	
(code_label/s 27 33 29 4 351 "" [1 uses])
(note 29 27 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 28 29 17 4 (set (reg:DI 6 bp [93])
        (reg:DI 0 ax)) 89 {*movdi_internal}
     (nil))
(insn 17 28 18 4 (set (reg:DI 5 di)
        (reg/f:DI 3 bx [orig:87 D.37343 ] [87])) db/c.cc:387 89 {*movdi_internal}
     (nil))
(call_insn 18 17 20 4 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) db/c.cc:387 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 20 18 21 4 (set (reg:DI 5 di)
        (reg:DI 6 bp [93])) 89 {*movdi_internal}
     (nil))
(call_insn 21 20 22 4 (call (mem:QI (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>) [0 __builtin_unwind_resume S1 A8])
        (const_int 0 [0])) 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Unwind_Resume") [flags 0x41]  <function_decl 0x7fb538d966c0 __builtin_unwind_resume>)
        (expr_list:REG_ARGS_SIZE (const_int 0 [0])
            (expr_list:REG_NORETURN (const_int 0 [0])
                (nil))))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:      
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 22 21 31)
;; basic block 6, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 4, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 31 22 26 6 352 "" [1 uses])
(note 26 31 24 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(insn 24 26 25 6 (set (reg/i:DI 0 ax)
        (reg/f:DI 3 bx [orig:87 D.37343 ] [87])) db/c.cc:388 89 {*movdi_internal}
     (nil))
(insn 25 24 34 6 (use (reg/i:DI 0 ax)) db/c.cc:388 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 34 25 0 NOTE_INSN_DELETED)

;; Function void leveldb_options_destroy(leveldb_options_t*) (leveldb_options_destroy, funcdef_no=1899, decl_uid=2273, cgraph_uid=586, symbol_order=589)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 7: point = 0
   Insn 6: point = 0
   Insn 2: point = 1
Compressing live ranges: from 2 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 6
deleting insn with uid = 2.
deleting insn with uid = 6.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_options_destroy(leveldb_options_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 5[di] 7[sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={2d} r5={2d,1u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 92{88d,4u,0e} in 1{0 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 7 2 NOTE_INSN_FUNCTION_BEG)
(call_insn/j 7 3 8 2 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) db/c.cc:552 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 8 7 11)
(note 11 8 0 NOTE_INSN_DELETED)

;; Function void leveldb_options_set_comparator(leveldb_options_t*, leveldb_comparator_t*) (leveldb_options_set_comparator, funcdef_no=1480, decl_uid=2276, cgraph_uid=587, symbol_order=590)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 7: point = 0
   Insn 3: point = 1
   Insn 2: point = 2
Compressing live ranges: from 3 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 7
changing reg in insn 3
changing reg in insn 3
changing reg in insn 7
deleting insn with uid = 2.
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_options_set_comparator(leveldb_options_t*, leveldb_comparator_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 4[si] 5[di]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 20{16d,4u,0e} in 1{1 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 5 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 10 2 (set (mem/f:DI (reg/v/f:DI 5 di [orig:87 opt ] [87]) [3 opt_2(D)->rep.comparator+0 S8 A64])
        (reg/v/f:DI 4 si [orig:88 cmp ] [88])) db/c.cc:397 89 {*movdi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 10 7 0 NOTE_INSN_DELETED)

;; Function void leveldb_options_set_filter_policy(leveldb_options_t*, leveldb_filterpolicy_t*) (leveldb_options_set_filter_policy, funcdef_no=1481, decl_uid=2279, cgraph_uid=588, symbol_order=591)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 7: point = 0
   Insn 3: point = 1
   Insn 2: point = 2
Compressing live ranges: from 3 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 7
changing reg in insn 3
changing reg in insn 3
changing reg in insn 7
deleting insn with uid = 2.
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_options_set_filter_policy(leveldb_options_t*, leveldb_filterpolicy_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 4[si] 5[di]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 20{16d,4u,0e} in 1{1 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 5 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 10 2 (set (mem/f:DI (plus:DI (reg/v/f:DI 5 di [orig:87 opt ] [87])
                (const_int 72 [0x48])) [3 opt_2(D)->rep.filter_policy+0 S8 A64])
        (reg/v/f:DI 4 si [orig:88 policy ] [88])) db/c.cc:403 89 {*movdi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 10 7 0 NOTE_INSN_DELETED)

;; Function void leveldb_options_set_create_if_missing(leveldb_options_t*, unsigned char) (leveldb_options_set_create_if_missing, funcdef_no=1482, decl_uid=2282, cgraph_uid=589, symbol_order=592)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =qm {*setcc_qi}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 10: point = 0
   Insn 8: point = 1
   Insn 3: point = 2
   Insn 2: point = 3
Compressing live ranges: from 4 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 10
changing reg in insn 3
deleting insn with uid = 2.
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_options_set_create_if_missing(leveldb_options_t*, unsigned char)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 4[si] 5[di] 17[flags]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r7={1d,2u} r17={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 22{17d,5u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 6 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 4 si [orig:90 v ] [90])
            (const_int 0 [0]))) db/c.cc:408 1 {*cmpqi_ccno_1}
     (nil))
(note 9 8 10 2 NOTE_INSN_DELETED)
(insn 10 9 13 2 (set (mem:QI (plus:DI (reg/v/f:DI 5 di [orig:88 opt ] [88])
                (const_int 8 [0x8])) [17 opt_4(D)->rep.create_if_missing+0 S1 A64])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) db/c.cc:408 607 {*setcc_qi}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 13 10 0 NOTE_INSN_DELETED)

;; Function void leveldb_options_set_error_if_exists(leveldb_options_t*, unsigned char) (leveldb_options_set_error_if_exists, funcdef_no=1483, decl_uid=2285, cgraph_uid=590, symbol_order=593)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =qm {*setcc_qi}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 10: point = 0
   Insn 8: point = 1
   Insn 3: point = 2
   Insn 2: point = 3
Compressing live ranges: from 4 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 10
changing reg in insn 3
deleting insn with uid = 2.
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_options_set_error_if_exists(leveldb_options_t*, unsigned char)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 4[si] 5[di] 17[flags]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r7={1d,2u} r17={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 22{17d,5u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 6 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 4 si [orig:90 v ] [90])
            (const_int 0 [0]))) db/c.cc:413 1 {*cmpqi_ccno_1}
     (nil))
(note 9 8 10 2 NOTE_INSN_DELETED)
(insn 10 9 13 2 (set (mem:QI (plus:DI (reg/v/f:DI 5 di [orig:88 opt ] [88])
                (const_int 9 [0x9])) [17 opt_4(D)->rep.error_if_exists+0 S1 A8])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) db/c.cc:413 607 {*setcc_qi}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 13 10 0 NOTE_INSN_DELETED)

;; Function void leveldb_options_set_paranoid_checks(leveldb_options_t*, unsigned char) (leveldb_options_set_paranoid_checks, funcdef_no=1484, decl_uid=2288, cgraph_uid=591, symbol_order=594)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =qm {*setcc_qi}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 10: point = 0
   Insn 8: point = 1
   Insn 3: point = 2
   Insn 2: point = 3
Compressing live ranges: from 4 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 10
changing reg in insn 3
deleting insn with uid = 2.
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_options_set_paranoid_checks(leveldb_options_t*, unsigned char)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 4[si] 5[di] 17[flags]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r7={1d,2u} r17={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 22{17d,5u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 6 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 4 si [orig:90 v ] [90])
            (const_int 0 [0]))) db/c.cc:418 1 {*cmpqi_ccno_1}
     (nil))
(note 9 8 10 2 NOTE_INSN_DELETED)
(insn 10 9 13 2 (set (mem:QI (plus:DI (reg/v/f:DI 5 di [orig:88 opt ] [88])
                (const_int 10 [0xa])) [17 opt_4(D)->rep.paranoid_checks+0 S1 A16])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) db/c.cc:418 607 {*setcc_qi}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 13 10 0 NOTE_INSN_DELETED)

;; Function void leveldb_options_set_env(leveldb_options_t*, leveldb_env_t*) (leveldb_options_set_env, funcdef_no=1485, decl_uid=2291, cgraph_uid=592, symbol_order=595)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 5:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}

********** Pseudo live ranges #1: **********

  BB 5
   Insn 14: point = 0
  BB 3
   Insn 21: point = 2
   Insn 11: point = 2
  BB 4
   Insn 5: point = 5
  BB 2
   Insn 9: point = 7
   Insn 8: point = 7
   Insn 3: point = 7
   Insn 2: point = 8
Compressing live ranges: from 9 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 5
changing reg in insn 11
changing reg in insn 14
changing reg in insn 2
changing reg in insn 14
changing reg in insn 3
changing reg in insn 11
changing reg in insn 8
deleting insn with uid = 2.
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 6 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 6 (    1)


void leveldb_options_set_env(leveldb_options_t*, leveldb_env_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 4[si] 5[di] 17[flags]
;;  ref usage 	r0={3d,1u} r1={1d} r2={1d} r4={1d,2u} r5={1d,1u} r7={1d,5u} r17={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 29{19d,10u,0e} in 6{6 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 6 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 6 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 4 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 4 si [orig:89 env ] [89])
            (const_int 0 [0]))) db/c.cc:422 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 20)
            (pc))) db/c.cc:422 612 {*jcc_1}
     (int_list:REG_BR_PROB 1014 (nil))
 -> 20)
;;  succ:       3 [89.9%]  (FALLTHRU)
;;              4 [10.1%] 
;; lr  out 	 4 [si] 5 [di] 7 [sp]
;; live  out 	 4 [si] 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 8986, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [89.9%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 21 3 (set (reg/f:DI 0 ax [orig:87 D.37366 ] [87])
        (mem/f:DI (reg/v/f:DI 4 si [orig:89 env ] [89]) [3 env_2(D)->rep+0 S8 A64])) db/c.cc:422 89 {*movdi_internal}
     (nil))
(jump_insn 21 11 22 3 (set (pc)
        (label_ref 12)) 654 {jump}
     (nil)
 -> 12)
;;  succ:       5 [100.0%] 
;; lr  out 	 0 [ax] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 5 [di] 7 [sp]

(barrier 22 21 20)
;; basic block 4, loop depth 0, count 0, freq 1014, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [10.1%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 20 22 19 4 363 "" [1 uses])
(note 19 20 5 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 5 19 12 4 (set (reg/f:DI 0 ax [orig:87 D.37366 ] [87])
        (const_int 0 [0])) db/c.cc:422 89 {*movdi_internal}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 5 [di] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 4, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [100.0%]  (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 12 5 13 5 362 "" [1 uses])
(note 13 12 14 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 23 5 (set (mem/f:DI (plus:DI (reg/v/f:DI 5 di [orig:88 opt ] [88])
                (const_int 16 [0x10])) [3 opt_5(D)->rep.env+0 S8 A64])
        (reg/f:DI 0 ax [orig:87 D.37366 ] [87])) db/c.cc:422 89 {*movdi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 23 14 0 NOTE_INSN_DELETED)

;; Function void leveldb_options_set_info_log(leveldb_options_t*, leveldb_logger_t*) (leveldb_options_set_info_log, funcdef_no=1486, decl_uid=2294, cgraph_uid=593, symbol_order=596)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 5:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}

********** Pseudo live ranges #1: **********

  BB 5
   Insn 14: point = 0
  BB 3
   Insn 21: point = 2
   Insn 11: point = 2
  BB 4
   Insn 5: point = 5
  BB 2
   Insn 9: point = 7
   Insn 8: point = 7
   Insn 3: point = 7
   Insn 2: point = 8
Compressing live ranges: from 9 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 5
changing reg in insn 11
changing reg in insn 14
changing reg in insn 2
changing reg in insn 14
changing reg in insn 3
changing reg in insn 11
changing reg in insn 8
deleting insn with uid = 2.
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 6 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 6 (    1)


void leveldb_options_set_info_log(leveldb_options_t*, leveldb_logger_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 4[si] 5[di] 17[flags]
;;  ref usage 	r0={3d,1u} r1={1d} r2={1d} r4={1d,2u} r5={1d,1u} r7={1d,5u} r17={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 29{19d,10u,0e} in 6{6 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 6 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 6 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 4 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 4 si [orig:89 l ] [89])
            (const_int 0 [0]))) db/c.cc:426 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 20)
            (pc))) db/c.cc:426 612 {*jcc_1}
     (int_list:REG_BR_PROB 1014 (nil))
 -> 20)
;;  succ:       3 [89.9%]  (FALLTHRU)
;;              4 [10.1%] 
;; lr  out 	 4 [si] 5 [di] 7 [sp]
;; live  out 	 4 [si] 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 8986, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [89.9%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 21 3 (set (reg/f:DI 0 ax [orig:87 D.37369 ] [87])
        (mem/f:DI (reg/v/f:DI 4 si [orig:89 l ] [89]) [3 l_2(D)->rep+0 S8 A64])) db/c.cc:426 89 {*movdi_internal}
     (nil))
(jump_insn 21 11 22 3 (set (pc)
        (label_ref 12)) 654 {jump}
     (nil)
 -> 12)
;;  succ:       5 [100.0%] 
;; lr  out 	 0 [ax] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 5 [di] 7 [sp]

(barrier 22 21 20)
;; basic block 4, loop depth 0, count 0, freq 1014, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [10.1%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 20 22 19 4 366 "" [1 uses])
(note 19 20 5 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 5 19 12 4 (set (reg/f:DI 0 ax [orig:87 D.37369 ] [87])
        (const_int 0 [0])) db/c.cc:426 89 {*movdi_internal}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 5 [di] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 4, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [100.0%]  (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 12 5 13 5 365 "" [1 uses])
(note 13 12 14 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 23 5 (set (mem/f:DI (plus:DI (reg/v/f:DI 5 di [orig:88 opt ] [88])
                (const_int 24 [0x18])) [3 opt_5(D)->rep.info_log+0 S8 A64])
        (reg/f:DI 0 ax [orig:87 D.37369 ] [87])) db/c.cc:426 89 {*movdi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 23 14 0 NOTE_INSN_DELETED)

;; Function void leveldb_options_set_write_buffer_size(leveldb_options_t*, size_t) (leveldb_options_set_write_buffer_size, funcdef_no=1487, decl_uid=2297, cgraph_uid=594, symbol_order=597)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 7: point = 0
   Insn 3: point = 1
   Insn 2: point = 2
Compressing live ranges: from 3 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 7
changing reg in insn 3
changing reg in insn 3
changing reg in insn 7
deleting insn with uid = 2.
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_options_set_write_buffer_size(leveldb_options_t*, size_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 4[si] 5[di]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 20{16d,4u,0e} in 1{1 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 5 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 10 2 (set (mem:DI (plus:DI (reg/v/f:DI 5 di [orig:87 opt ] [87])
                (const_int 32 [0x20])) [9 opt_2(D)->rep.write_buffer_size+0 S8 A64])
        (reg/v:DI 4 si [orig:88 s ] [88])) db/c.cc:430 89 {*movdi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 10 7 0 NOTE_INSN_DELETED)

;; Function void leveldb_options_set_max_open_files(leveldb_options_t*, int) (leveldb_options_set_max_open_files, funcdef_no=1488, decl_uid=2300, cgraph_uid=595, symbol_order=598)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 7: point = 0
   Insn 3: point = 1
   Insn 2: point = 2
Compressing live ranges: from 3 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 7
changing reg in insn 3
changing reg in insn 3
changing reg in insn 7
deleting insn with uid = 2.
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_options_set_max_open_files(leveldb_options_t*, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 4[si] 5[di]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 20{16d,4u,0e} in 1{1 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 5 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 10 2 (set (mem:SI (plus:DI (reg/v/f:DI 5 di [orig:87 opt ] [87])
                (const_int 40 [0x28])) [27 opt_2(D)->rep.max_open_files+0 S4 A64])
        (reg/v:SI 4 si [orig:88 n ] [88])) db/c.cc:434 90 {*movsi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 10 7 0 NOTE_INSN_DELETED)

;; Function void leveldb_options_set_cache(leveldb_options_t*, leveldb_cache_t*) (leveldb_options_set_cache, funcdef_no=1489, decl_uid=2303, cgraph_uid=596, symbol_order=599)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) rem {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 8:  (0) m  (1) re {*movdi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 8: point = 0
   Insn 7: point = 1
   Insn 3: point = 3
   Insn 2: point = 4
Compressing live ranges: from 5 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 8
changing reg in insn 7
changing reg in insn 3
changing reg in insn 7
changing reg in insn 7
changing reg in insn 8
deleting insn with uid = 2.
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_options_set_cache(leveldb_options_t*, leveldb_cache_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 4[si] 5[di]
;;  ref usage 	r0={2d,1u} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u,1e} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 23{17d,5u,1e} in 2{2 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 5 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 8 2 (set (reg/f:DI 0 ax [orig:90 c_2(D)->rep ] [90])
        (mem/f:DI (reg/v/f:DI 4 si [orig:89 c ] [89]) [3 c_2(D)->rep+0 S8 A64])) db/c.cc:438 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (plus:DI (reg/v/f:DI 5 di [orig:88 opt ] [88])
                (const_int 48 [0x30])) [3 opt_4(D)->rep.block_cache+0 S8 A64])
        (nil)))
(insn 8 7 11 2 (set (mem/f:DI (plus:DI (reg/v/f:DI 5 di [orig:88 opt ] [88])
                (const_int 48 [0x30])) [3 opt_4(D)->rep.block_cache+0 S8 A64])
        (reg/f:DI 0 ax [orig:90 c_2(D)->rep ] [90])) db/c.cc:438 89 {*movdi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 11 8 0 NOTE_INSN_DELETED)

;; Function void leveldb_options_set_block_size(leveldb_options_t*, size_t) (leveldb_options_set_block_size, funcdef_no=1490, decl_uid=2306, cgraph_uid=597, symbol_order=600)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 7:  (0) m  (1) re {*movdi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 7: point = 0
   Insn 3: point = 1
   Insn 2: point = 2
Compressing live ranges: from 3 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 7
changing reg in insn 3
changing reg in insn 3
changing reg in insn 7
deleting insn with uid = 2.
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_options_set_block_size(leveldb_options_t*, size_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 4[si] 5[di]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 20{16d,4u,0e} in 1{1 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 5 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 10 2 (set (mem:DI (plus:DI (reg/v/f:DI 5 di [orig:87 opt ] [87])
                (const_int 56 [0x38])) [9 opt_2(D)->rep.block_size+0 S8 A64])
        (reg/v:DI 4 si [orig:88 s ] [88])) db/c.cc:442 89 {*movdi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 10 7 0 NOTE_INSN_DELETED)

;; Function void leveldb_options_set_block_restart_interval(leveldb_options_t*, int) (leveldb_options_set_block_restart_interval, funcdef_no=1491, decl_uid=2309, cgraph_uid=598, symbol_order=601)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 7: point = 0
   Insn 3: point = 1
   Insn 2: point = 2
Compressing live ranges: from 3 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 7
changing reg in insn 3
changing reg in insn 3
changing reg in insn 7
deleting insn with uid = 2.
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_options_set_block_restart_interval(leveldb_options_t*, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 4[si] 5[di]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 20{16d,4u,0e} in 1{1 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 5 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 10 2 (set (mem:SI (plus:DI (reg/v/f:DI 5 di [orig:87 opt ] [87])
                (const_int 64 [0x40])) [27 opt_2(D)->rep.block_restart_interval+0 S4 A64])
        (reg/v:SI 4 si [orig:88 n ] [88])) db/c.cc:446 90 {*movsi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 10 7 0 NOTE_INSN_DELETED)

;; Function void leveldb_options_set_compression(leveldb_options_t*, int) (leveldb_options_set_compression, funcdef_no=1492, decl_uid=2315, cgraph_uid=599, symbol_order=602)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=609,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 7:  (0) m  (1) re {*movsi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 7: point = 0
   Insn 3: point = 1
   Insn 2: point = 2
Compressing live ranges: from 3 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 7
changing reg in insn 3
changing reg in insn 3
changing reg in insn 7
deleting insn with uid = 2.
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_options_set_compression(leveldb_options_t*, int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 4[si] 5[di]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 20{16d,4u,0e} in 1{1 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 5 7 2 NOTE_INSN_FUNCTION_BEG)
(insn 7 4 10 2 (set (mem:SI (plus:DI (reg/v/f:DI 5 di [orig:88 opt ] [88])
                (const_int 68 [0x44])) [28 opt_4(D)->rep.compression+0 S4 A32])
        (reg/v:SI 4 si [orig:89 t ] [89])) db/c.cc:450 90 {*movsi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 10 7 0 NOTE_INSN_DELETED)

;; Function leveldb_comparator_t* leveldb_comparator_create(void*, void (*)(void*), int (*)(void*, const char*, size_t, const char*, size_t), const char* (*)(void*)) (leveldb_comparator_create, funcdef_no=1493, decl_uid=2327, cgraph_uid=606, symbol_order=609)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-40, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 9:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) Ts {*leadi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 15:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) m  (1) re {*movdi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 25: point = 0
   Insn 24: point = 0
   Insn 19: point = 1
   Insn 18: point = 2
   Insn 17: point = 3
   Insn 16: point = 4
   Insn 15: point = 5
   Insn 14: point = 6
   Insn 13: point = 8
   Insn 11: point = 9
   Insn 10: point = 10
   Insn 9: point = 10
   Insn 5: point = 10
   Insn 4: point = 11
   Insn 3: point = 12
   Insn 2: point = 13
Compressing live ranges: from 14 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-40, prev_offset=0)
changing reg in insn 2
changing reg in insn 16
changing reg in insn 3
changing reg in insn 17
changing reg in insn 4
changing reg in insn 18
changing reg in insn 5
changing reg in insn 19
changing reg in insn 11
changing reg in insn 24
changing reg in insn 19
changing reg in insn 18
changing reg in insn 17
changing reg in insn 16
changing reg in insn 15
changing reg in insn 14
changing reg in insn 15
changing reg in insn 13
changing reg in insn 14


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


leveldb_comparator_t* leveldb_comparator_create(void*, void (*)(void*), int (*)(void*, const char*, size_t, const char*, size_t), const char* (*)(void*))

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 41[r12] 42[r13]
;;  ref usage 	r0={4d,9u} r1={4d,3u} r2={2d,1u} r3={1d,1u} r4={2d,1u} r5={3d,2u} r6={1d,1u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r41={1d,1u} r42={1d,1u} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 120{97d,23u,0e} in 16{15 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 41 [r12] 42 [r13]
;; live  kill	
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 7 3 2 (set (reg/v/f:DI 42 r13 [orig:89 state ] [89])
        (reg:DI 5 di [ state ])) db/c.cc:460 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg/v/f:DI 41 r12 [orig:90 destructor ] [90])
        (reg:DI 4 si [ destructor ])) db/c.cc:460 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (reg/v/f:DI 6 bp [orig:91 compare ] [91])
        (reg:DI 1 dx [ compare ])) db/c.cc:460 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (reg/v/f:DI 3 bx [orig:92 name ] [92])
        (reg:DI 2 cx [ name ])) db/c.cc:460 89 {*movdi_internal}
     (nil))
(note 6 5 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 6 10 2 (set (reg:DI 5 di)
        (const_int 40 [0x28])) db/c.cc:461 89 {*movdi_internal}
     (nil))
(call_insn 10 9 11 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>) [0 operator new S1 A8])
            (const_int 0 [0]))) db/c.cc:461 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 11 10 13 2 (set (reg/f:DI 0 ax [93])
        (reg:DI 0 ax)) db/c.cc:461 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [93])
        (nil)))
(insn 13 11 14 2 (set (reg:DI 1 dx [95])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTV20leveldb_comparator_t")  <var_decl 0x7fb537667870 _ZTV20leveldb_comparator_t>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])) db/c.cc:60 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTV20leveldb_comparator_t")  <var_decl 0x7fb537667870 _ZTV20leveldb_comparator_t>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])
        (nil)))
(insn 14 13 15 2 (set (reg/f:DI 1 dx [94])
        (plus:DI (reg:DI 1 dx [95])
            (const_int 16 [0x10]))) db/c.cc:60 214 {*leadi}
     (expr_list:REG_EQUIV (const:DI (plus:DI (symbol_ref/i:DI ("_ZTV20leveldb_comparator_t")  <var_decl 0x7fb537667870 _ZTV20leveldb_comparator_t>)
                (const_int 16 [0x10])))
        (nil)))
(insn 15 14 16 2 (set (mem/f:DI (reg/f:DI 0 ax [93]) [3 MEM[(struct leveldb_comparator_t *)_3].D.28873._vptr.Comparator+0 S8 A64])
        (reg/f:DI 1 dx [94])) db/c.cc:60 89 {*movdi_internal}
     (nil))
(insn 16 15 17 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [93])
                (const_int 8 [0x8])) [3 MEM[(struct leveldb_comparator_t *)_3].state_+0 S8 A64])
        (reg/v/f:DI 42 r13 [orig:89 state ] [89])) db/c.cc:462 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [93])
                (const_int 16 [0x10])) [3 MEM[(struct leveldb_comparator_t *)_3].destructor_+0 S8 A64])
        (reg/v/f:DI 41 r12 [orig:90 destructor ] [90])) db/c.cc:463 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [93])
                (const_int 24 [0x18])) [3 MEM[(struct leveldb_comparator_t *)_3].compare_+0 S8 A64])
        (reg/v/f:DI 6 bp [orig:91 compare ] [91])) db/c.cc:464 89 {*movdi_internal}
     (nil))
(insn 19 18 24 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [93])
                (const_int 32 [0x20])) [3 MEM[(struct leveldb_comparator_t *)_3].name_+0 S8 A64])
        (reg/v/f:DI 3 bx [orig:92 name ] [92])) db/c.cc:465 89 {*movdi_internal}
     (nil))
(insn 24 19 25 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [93])) db/c.cc:467 89 {*movdi_internal}
     (nil))
(insn 25 24 27 2 (use (reg/i:DI 0 ax)) db/c.cc:467 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 27 25 0 NOTE_INSN_DELETED)

;; Function void leveldb_comparator_destroy(leveldb_comparator_t*) (leveldb_comparator_destroy, funcdef_no=1500, decl_uid=2329, cgraph_uid=607, symbol_order=610)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 13:  (0) r  (1) rm {*cmpdi_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 16:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) Ts {*leadi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 19:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 22:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 24:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 26:  (0) UBsBz {*sibcall}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 31:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 6
  BB 4
   Insn 26: point = 0
   Insn 25: point = 0
   Insn 24: point = 1
   Insn 23: point = 1
   Insn 22: point = 1
   Insn 21: point = 1
   Insn 19: point = 2
   Insn 18: point = 3
   Insn 17: point = 4
   Insn 16: point = 6
   Insn 37: point = 7
  BB 5
   Insn 31: point = 10
   Insn 30: point = 11
  BB 3
   Insn 14: point = 13
   Insn 13: point = 13
   Insn 10: point = 13
   Insn 9: point = 15
  BB 2
   Insn 7: point = 17
   Insn 6: point = 17
   Insn 2: point = 17
Compressing live ranges: from 18 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 10
changing reg in insn 13
changing reg in insn 31
changing reg in insn 2
changing reg in insn 37
changing reg in insn 30
changing reg in insn 9
changing reg in insn 6
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 17
changing reg in insn 18
changing reg in insn 16
changing reg in insn 17
changing reg in insn 19
changing reg in insn 21
changing reg in insn 37
changing reg in insn 18
changing reg in insn 19
changing reg in insn 23
changing reg in insn 25
changing reg in insn 22
changing reg in insn 19
deleting insn with uid = 2.
deleting insn with uid = 21.
deleting insn with uid = 30.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 22.
verify found no changes in insn with uid = 24.
verify found no changes in insn with uid = 26.
rescanning insn with uid = 31.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 7 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 7 (    1)


void leveldb_comparator_destroy(leveldb_comparator_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={9d,5u} r1={5d} r2={5d} r3={1d,5u,1e} r4={5d} r5={8d,7u,1e} r7={1d,10u} r8={4d} r9={4d} r10={4d} r11={4d} r12={4d} r13={4d} r14={4d} r15={4d} r17={6d,2u} r18={4d} r19={4d} r21={5d} r22={5d} r23={5d} r24={5d} r25={5d} r26={5d} r27={5d} r28={5d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={5d} r38={5d} r39={4d} r40={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} 
;;    total ref usage 345{314d,29u,2e} in 17{13 regular + 4 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 5 di [orig:93 cmp ] [93])
            (const_int 0 [0]))) db/c.cc:470 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 35)
            (pc))) db/c.cc:470 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 35)
;;  succ:       3 [78.3%]  (FALLTHRU)
;;              6 [21.6%] 
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 7835, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [78.3%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 17 [flags]
;; live  kill	
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg/f:DI 0 ax [orig:94 cmp_2(D)->D.28873._vptr.Comparator ] [94])
        (mem/f:DI (reg/v/f:DI 5 di [orig:93 cmp ] [93]) [3 cmp_2(D)->D.28873._vptr.Comparator+0 S8 A64])) db/c.cc:470 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/v/f:DI 5 di [orig:93 cmp ] [93]) [3 cmp_2(D)->D.28873._vptr.Comparator+0 S8 A64])
        (nil)))
(insn 10 9 11 3 (set (reg/f:DI 0 ax [orig:88 D.37393 ] [88])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:94 cmp_2(D)->D.28873._vptr.Comparator ] [94])
                (const_int 8 [0x8])) [3 MEM[(int (*__vtbl_ptr_type) () *)_4 + 8B]+0 S8 A64])) db/c.cc:470 89 {*movdi_internal}
     (nil))
(note 11 10 13 3 NOTE_INSN_DELETED)
(insn 13 11 14 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 0 ax [orig:88 D.37393 ] [88])
            (mem/u/c:DI (const:DI (unspec:DI [
                            (symbol_ref/i:DI ("_ZN20leveldb_comparator_tD0Ev") [flags 0x1]  <function_decl 0x7fb53767c5e8 __deleting_dtor >)
                        ] UNSPEC_GOTPCREL)) [45  S8 A8]))) 8 {*cmpdi_1}
     (nil))
(jump_insn 14 13 15 3 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 28)
            (pc))) 612 {*jcc_1}
     (int_list:REG_BR_PROB 2005 (nil))
 -> 28)
;;  succ:       4 [80.0%]  (FALLTHRU)
;;              5 [20.1%] 
;; lr  out 	 0 [ax] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 5 [di] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 6264, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [80.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di]
;; live  kill	
(note 15 14 37 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 37 15 16 4 (set (reg/v/f:DI 3 bx [orig:93 cmp ] [93])
        (reg/v/f:DI 5 di [orig:93 cmp ] [93])) 89 {*movdi_internal}
     (nil))
(insn 16 37 17 4 (set (reg:DI 0 ax [98])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTV20leveldb_comparator_t")  <var_decl 0x7fb537667870 _ZTV20leveldb_comparator_t>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])) db/c.cc:69 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTV20leveldb_comparator_t")  <var_decl 0x7fb537667870 _ZTV20leveldb_comparator_t>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])
        (nil)))
(insn 17 16 18 4 (set (reg/f:DI 0 ax [97])
        (plus:DI (reg:DI 0 ax [98])
            (const_int 16 [0x10]))) db/c.cc:69 214 {*leadi}
     (expr_list:REG_EQUIV (const:DI (plus:DI (symbol_ref/i:DI ("_ZTV20leveldb_comparator_t")  <var_decl 0x7fb537667870 _ZTV20leveldb_comparator_t>)
                (const_int 16 [0x10])))
        (nil)))
(insn 18 17 19 4 (set (mem/f:DI (reg/v/f:DI 3 bx [orig:93 cmp ] [93]) [3 MEM[(struct leveldb_comparator_t *)cmp_2(D)].D.28873._vptr.Comparator+0 S8 A64])
        (reg/f:DI 0 ax [97])) db/c.cc:69 89 {*movdi_internal}
     (nil))
(insn 19 18 20 4 (set (reg/f:DI 5 di [orig:99 MEM[(struct leveldb_comparator_t *)cmp_2(D)].state_ ] [99])
        (mem/f:DI (plus:DI (reg/v/f:DI 3 bx [orig:93 cmp ] [93])
                (const_int 8 [0x8])) [3 MEM[(struct leveldb_comparator_t *)cmp_2(D)].state_+0 S8 A64])) db/c.cc:70 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (plus:DI (reg/v/f:DI 3 bx [orig:93 cmp ] [93])
                (const_int 8 [0x8])) [3 MEM[(struct leveldb_comparator_t *)cmp_2(D)].state_+0 S8 A64])
        (nil)))
(note 20 19 22 4 NOTE_INSN_DELETED)
(call_insn 22 20 23 4 (call (mem:QI (mem/f:DI (plus:DI (reg/v/f:DI 3 bx [orig:93 cmp ] [93])
                    (const_int 16 [0x10])) [3 MEM[(struct leveldb_comparator_t *)cmp_2(D)].destructor_+0 S8 A64]) [0 *_9 S1 A8])
        (const_int 0 [0])) db/c.cc:70 660 {*call}
     (expr_list:REG_CALL_DECL (nil)
        (expr_list:REG_EH_REGION (const_int -1 [0xffffffffffffffff])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 23 22 24 4 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:93 cmp ] [93])) db/c.cc:69 89 {*movdi_internal}
     (nil))
(call_insn 24 23 25 4 (call (mem:QI (symbol_ref:DI ("_ZN7leveldb10ComparatorD2Ev") [flags 0x41]  <function_decl 0x7fb5377df6c0 __base_dtor >) [0 __base_dtor  S1 A8])
        (const_int 0 [0])) db/c.cc:69 660 {*call}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb10ComparatorD2Ev") [flags 0x41]  <function_decl 0x7fb5377df6c0 __base_dtor >)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 25 24 26 4 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:93 cmp ] [93])) db/c.cc:71 89 {*movdi_internal}
     (nil))
(call_insn/j 26 25 27 4 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) db/c.cc:71 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 27 26 28)
;; basic block 5, loop depth 0, count 0, freq 1571, maybe hot
;;  prev block 4, next block 6, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [20.1%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 0 [ax] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 28 27 29 5 377 "" [1 uses])
(note 29 28 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(call_insn/j 31 29 32 5 (call (mem:QI (reg/f:DI 0 ax [orig:88 D.37393 ] [88]) [0 *OBJ_TYPE_REF(_5;(struct leveldb_comparator_t)cmp_2(D)->1) S1 A8])
        (const_int 0 [0])) db/c.cc:470 662 {*sibcall}
     (expr_list:REG_CALL_DECL (nil)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 32 31 35)
;; basic block 6, loop depth 0, count 0, freq 2165, maybe hot
;;  prev block 5, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [21.6%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 35 32 36 6 375 "" [1 uses])
(note 36 35 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 38 36 0 NOTE_INSN_DELETED)

;; Function leveldb_filterpolicy_t* leveldb_filterpolicy_create(void*, void (*)(void*), char* (*)(void*, const char* const*, const size_t*, int, size_t*), unsigned char (*)(void*, const char*, size_t, const char*, size_t), const char* (*)(void*)) (leveldb_filterpolicy_create, funcdef_no=1501, decl_uid=2347, cgraph_uid=614, symbol_order=617)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-40, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 10:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 14:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 15:  (0) =r  (1) Ts {*leadi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 18:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 19:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 20:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 21:  (0) m  (1) re {*movdi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 27: point = 0
   Insn 26: point = 0
   Insn 21: point = 1
   Insn 20: point = 2
   Insn 19: point = 3
   Insn 18: point = 4
   Insn 17: point = 5
   Insn 16: point = 6
   Insn 15: point = 7
   Insn 14: point = 9
   Insn 12: point = 10
   Insn 11: point = 11
   Insn 10: point = 11
   Insn 6: point = 11
   Insn 5: point = 12
   Insn 4: point = 13
   Insn 3: point = 14
   Insn 2: point = 15
Compressing live ranges: from 16 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=48, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-40, prev_offset=0)
changing reg in insn 2
changing reg in insn 17
changing reg in insn 3
changing reg in insn 18
changing reg in insn 4
changing reg in insn 19
changing reg in insn 5
changing reg in insn 20
changing reg in insn 6
changing reg in insn 21
changing reg in insn 12
changing reg in insn 26
changing reg in insn 21
changing reg in insn 20
changing reg in insn 19
changing reg in insn 18
changing reg in insn 17
changing reg in insn 16
changing reg in insn 15
changing reg in insn 16
changing reg in insn 14
changing reg in insn 15


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 11.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


leveldb_filterpolicy_t* leveldb_filterpolicy_create(void*, void (*)(void*), char* (*)(void*, const char* const*, const size_t*, int, size_t*), unsigned char (*)(void*, const char*, size_t, const char*, size_t), const char* (*)(void*))

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 1[dx] 2[cx] 3[bx] 4[si] 5[di] 6[bp] 7[sp] 37[r8] 41[r12] 42[r13] 43[r14]
;;  ref usage 	r0={4d,10u} r1={4d,3u} r2={2d,1u} r3={1d,1u} r4={2d,1u} r5={3d,2u} r6={1d,1u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d,1u} r38={2d} r39={1d} r40={1d} r41={1d,1u} r42={1d,1u} r43={1d,1u} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 124{98d,26u,0e} in 18{17 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8]
;; lr  use 	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 41 [r12] 42 [r13] 43 [r14] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 37 [r8]
;; live  gen 	 0 [ax] 1 [dx] 3 [bx] 5 [di] 6 [bp] 41 [r12] 42 [r13] 43 [r14]
;; live  kill	
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 8 3 2 (set (reg/v/f:DI 43 r14 [orig:89 state ] [89])
        (reg:DI 5 di [ state ])) db/c.cc:485 89 {*movdi_internal}
     (nil))
(insn 3 2 4 2 (set (reg/v/f:DI 42 r13 [orig:90 destructor ] [90])
        (reg:DI 4 si [ destructor ])) db/c.cc:485 89 {*movdi_internal}
     (nil))
(insn 4 3 5 2 (set (reg/v/f:DI 41 r12 [orig:91 create_filter ] [91])
        (reg:DI 1 dx [ create_filter ])) db/c.cc:485 89 {*movdi_internal}
     (nil))
(insn 5 4 6 2 (set (reg/v/f:DI 6 bp [orig:92 key_may_match ] [92])
        (reg:DI 2 cx [ key_may_match ])) db/c.cc:485 89 {*movdi_internal}
     (nil))
(insn 6 5 7 2 (set (reg/v/f:DI 3 bx [orig:93 name ] [93])
        (reg:DI 37 r8 [ name ])) db/c.cc:485 89 {*movdi_internal}
     (nil))
(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)
(insn 10 7 11 2 (set (reg:DI 5 di)
        (const_int 48 [0x30])) db/c.cc:486 89 {*movdi_internal}
     (nil))
(call_insn 11 10 12 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>) [0 operator new S1 A8])
            (const_int 0 [0]))) db/c.cc:486 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 12 11 14 2 (set (reg/f:DI 0 ax [94])
        (reg:DI 0 ax)) db/c.cc:486 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [94])
        (nil)))
(insn 14 12 15 2 (set (reg:DI 1 dx [96])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTV22leveldb_filterpolicy_t")  <var_decl 0x7fb537682ab0 _ZTV22leveldb_filterpolicy_t>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])) db/c.cc:86 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTV22leveldb_filterpolicy_t")  <var_decl 0x7fb537682ab0 _ZTV22leveldb_filterpolicy_t>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])
        (nil)))
(insn 15 14 16 2 (set (reg/f:DI 1 dx [95])
        (plus:DI (reg:DI 1 dx [96])
            (const_int 16 [0x10]))) db/c.cc:86 214 {*leadi}
     (expr_list:REG_EQUIV (const:DI (plus:DI (symbol_ref/i:DI ("_ZTV22leveldb_filterpolicy_t")  <var_decl 0x7fb537682ab0 _ZTV22leveldb_filterpolicy_t>)
                (const_int 16 [0x10])))
        (nil)))
(insn 16 15 17 2 (set (mem/f:DI (reg/f:DI 0 ax [94]) [3 MEM[(struct leveldb_filterpolicy_t *)_3].D.28950._vptr.FilterPolicy+0 S8 A64])
        (reg/f:DI 1 dx [95])) db/c.cc:86 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [94])
                (const_int 8 [0x8])) [3 MEM[(struct leveldb_filterpolicy_t *)_3].state_+0 S8 A64])
        (reg/v/f:DI 43 r14 [orig:89 state ] [89])) db/c.cc:487 89 {*movdi_internal}
     (nil))
(insn 18 17 19 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [94])
                (const_int 16 [0x10])) [3 MEM[(struct leveldb_filterpolicy_t *)_3].destructor_+0 S8 A64])
        (reg/v/f:DI 42 r13 [orig:90 destructor ] [90])) db/c.cc:488 89 {*movdi_internal}
     (nil))
(insn 19 18 20 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [94])
                (const_int 32 [0x20])) [3 MEM[(struct leveldb_filterpolicy_t *)_3].create_+0 S8 A64])
        (reg/v/f:DI 41 r12 [orig:91 create_filter ] [91])) db/c.cc:489 89 {*movdi_internal}
     (nil))
(insn 20 19 21 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [94])
                (const_int 40 [0x28])) [3 MEM[(struct leveldb_filterpolicy_t *)_3].key_match_+0 S8 A64])
        (reg/v/f:DI 6 bp [orig:92 key_may_match ] [92])) db/c.cc:490 89 {*movdi_internal}
     (nil))
(insn 21 20 26 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [94])
                (const_int 24 [0x18])) [3 MEM[(struct leveldb_filterpolicy_t *)_3].name_+0 S8 A64])
        (reg/v/f:DI 3 bx [orig:93 name ] [93])) db/c.cc:491 89 {*movdi_internal}
     (nil))
(insn 26 21 27 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [94])) db/c.cc:493 89 {*movdi_internal}
     (nil))
(insn 27 26 29 2 (use (reg/i:DI 0 ax)) db/c.cc:493 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 29 27 0 NOTE_INSN_DELETED)

;; Function void leveldb_filterpolicy_destroy(leveldb_filterpolicy_t*) (leveldb_filterpolicy_destroy, funcdef_no=1508, decl_uid=2349, cgraph_uid=615, symbol_order=618)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 12:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 4
  BB 3
   Insn 12: point = 0
   Insn 11: point = 1
   Insn 10: point = 2
   Insn 9: point = 4
  BB 2
   Insn 7: point = 6
   Insn 6: point = 6
   Insn 2: point = 6
Compressing live ranges: from 7 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 11
changing reg in insn 9
changing reg in insn 6
changing reg in insn 9
changing reg in insn 9
changing reg in insn 10
changing reg in insn 10
changing reg in insn 12
deleting insn with uid = 2.
deleting insn with uid = 11.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 12.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)


void leveldb_filterpolicy_destroy(leveldb_filterpolicy_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={4d,2u} r1={2d} r2={2d} r4={2d} r5={2d,3u,1e} r7={1d,5u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={2d,1u} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 103{91d,11u,1e} in 5{4 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 5 di [orig:89 filter ] [89])
            (const_int 0 [0]))) db/c.cc:496 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 16)
            (pc))) db/c.cc:496 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 16)
;;  succ:       3 [78.3%]  (FALLTHRU)
;;              4 [21.6%] 
;; lr  out 	 5 [di] 7 [sp]
;; live  out 	 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 7835, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [78.3%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg/f:DI 0 ax [orig:90 filter_2(D)->D.28950._vptr.FilterPolicy ] [90])
        (mem/f:DI (reg/v/f:DI 5 di [orig:89 filter ] [89]) [3 filter_2(D)->D.28950._vptr.FilterPolicy+0 S8 A64])) db/c.cc:496 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/v/f:DI 5 di [orig:89 filter ] [89]) [3 filter_2(D)->D.28950._vptr.FilterPolicy+0 S8 A64])
        (nil)))
(insn 10 9 12 3 (set (reg/f:DI 0 ax [orig:91 MEM[(int (*__vtbl_ptr_type) () *)_4 + 8B] ] [91])
        (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:90 filter_2(D)->D.28950._vptr.FilterPolicy ] [90])
                (const_int 8 [0x8])) [3 MEM[(int (*__vtbl_ptr_type) () *)_4 + 8B]+0 S8 A64])) db/c.cc:496 89 {*movdi_internal}
     (nil))
(call_insn/j 12 10 13 3 (call (mem:QI (reg/f:DI 0 ax [orig:91 MEM[(int (*__vtbl_ptr_type) () *)_4 + 8B] ] [91]) [0 *OBJ_TYPE_REF(_5;(struct leveldb_filterpolicy_t)filter_2(D)->1) S1 A8])
        (const_int 0 [0])) db/c.cc:496 662 {*sibcall}
     (expr_list:REG_CALL_DECL (nil)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 13 12 16)
;; basic block 4, loop depth 0, count 0, freq 2165, maybe hot
;;  prev block 3, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [21.6%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	
;; live  in  	 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 16 13 17 4 382 "" [1 uses])
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 18 17 0 NOTE_INSN_DELETED)

;; Function leveldb_filterpolicy_t* leveldb_filterpolicy_create_bloom(int) (leveldb_filterpolicy_create_bloom, funcdef_no=1509, decl_uid=2351, cgraph_uid=627, symbol_order=630)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 6:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) rBwBz {*call_value}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (0) =r  (1) Ts {*leadi}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 12:  (0) m  (1) re {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 16:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 17:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=3,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=5,overall=9,losers=1,rld_nregs=1
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=6,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=7,overall=10,losers=1 -- refuse
            Staticly defined alt reject+=6
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=8,overall=16,losers=1 -- refuse
            Staticly defined alt reject+=6
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=9,overall=22,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=10,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=11: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=12,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=13,overall=10,losers=1 -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=14,overall=10,losers=1 -- refuse
            1 Costly loser: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=15,overall=16,losers=2 -- refuse
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=16,overall=15,losers=1 -- refuse
            Staticly defined alt reject+=6
            alt=18: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=19: Bad operand -- refuse
            Staticly defined alt reject+=6
            alt=20: Bad operand -- refuse
            alt=21: Bad operand -- refuse
            alt=22: Bad operand -- refuse
            0 Costly loser: reject++
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=23,overall=10,losers=1 -- refuse
            alt=24: Bad operand -- refuse
	 Choosing alt 4 in insn 19:  (0) r  (1) i {*movdi_internal}
      Creating newreg=96, assigning class GENERAL_REGS to r96
   19: r96:DI=`_ZZ33leveldb_filterpolicy_create_bloomEN7Wrapper9DoNothingEPv'
    Inserting insn reload after:
   28: [r91:DI+0x10]=r96:DI

            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non pseudo reload: reject++
          alt=3,overall=610,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
            1 Non pseudo reload: reject++
          alt=5,overall=1,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 28:  (0) m  (1) re {*movdi_internal}
	   Spilling non-eliminable hard regs: 7

********** Pseudo live ranges #1: **********

  BB 2
   Insn 25: point = 0
   Insn 24: point = 0
   Insn 28: point = 1
   Insn 19: point = 2
   Insn 17: point = 3
   Insn 16: point = 3
   Insn 15: point = 4
   Insn 14: point = 5
   Insn 13: point = 5
   Insn 12: point = 6
   Insn 11: point = 7
   Insn 10: point = 9
   Insn 8: point = 10
   Insn 7: point = 11
   Insn 6: point = 11
   Insn 2: point = 11
 r88: [3..4]
 r90: [5..11]
 r91: [0..10]
 r92: [6..7]
 r93: [8..9]
 r96: [1..2]
Compressing live ranges: from 12 to 8 - 66%
Ranges after the compression:
 r88: [2..3]
 r90: [4..7]
 r91: [0..7]
 r92: [4..5]
 r93: [6..7]
 r96: [0..1]

********** Inheritance #1: **********

EBB 2

********** Pseudo live ranges #2: **********

  BB 2
   Insn 25: point = 0
   Insn 24: point = 0
   Insn 28: point = 1
   Insn 19: point = 2
   Insn 17: point = 3
   Insn 16: point = 3
   Insn 15: point = 4
   Insn 14: point = 5
   Insn 13: point = 5
   Insn 12: point = 6
   Insn 11: point = 7
   Insn 10: point = 9
   Insn 8: point = 10
   Insn 7: point = 11
   Insn 6: point = 11
   Insn 2: point = 11
 r88: [3..4]
 r90: [5..11]
 r91: [0..10]
 r92: [6..7]
 r93: [8..9]
 r96: [1..2]
Compressing live ranges: from 12 to 8 - 66%
Ranges after the compression:
 r88: [2..3]
 r90: [4..7]
 r91: [0..7]
 r92: [4..5]
 r93: [6..7]
 r96: [0..1]

********** Assignment #1: **********

	 Assigning to 96 (cl=GENERAL_REGS, orig=96, freq=2000, tfirst=96, tfreq=2000)...
	   Assign 0 to reload r96 (freq=2000)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=32)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
changing reg in insn 15
changing reg in insn 16
changing reg in insn 2
changing reg in insn 13
changing reg in insn 8
changing reg in insn 19
changing reg in insn 24
changing reg in insn 17
changing reg in insn 16
changing reg in insn 12
changing reg in insn 15
changing reg in insn 11
changing reg in insn 12
changing reg in insn 10
changing reg in insn 11


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 14.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


leveldb_filterpolicy_t* leveldb_filterpolicy_create_bloom(int)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={8d,8u} r1={3d} r2={3d} r3={1d,5u,1e} r4={3d} r5={5d,3u} r6={1d,1u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 191{169d,21u,1e} in 16{14 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp]
;; live  kill	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v:SI 6 bp [orig:90 bits_per_key ] [90])
        (reg:SI 5 di [ bits_per_key ])) db/c.cc:499 90 {*movsi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 5 di)
        (const_int 56 [0x38])) db/c.cc:515 89 {*movdi_internal}
     (nil))
(call_insn 7 6 8 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>) [0 operator new S1 A8])
            (const_int 0 [0]))) db/c.cc:515 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 8 7 10 2 (set (reg/f:DI 3 bx [91])
        (reg:DI 0 ax)) db/c.cc:515 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 3 bx [91])
        (nil)))
(insn 10 8 11 2 (set (reg:DI 0 ax [93])
        (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTVZ33leveldb_filterpolicy_create_bloomE7Wrapper")  <var_decl 0x7fb537404870 _ZTVZ33leveldb_filterpolicy_create_bloomE7Wrapper>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])) db/c.cc:503 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/u/c:DI (const:DI (unspec:DI [
                        (symbol_ref/i:DI ("_ZTVZ33leveldb_filterpolicy_create_bloomE7Wrapper")  <var_decl 0x7fb537404870 _ZTVZ33leveldb_filterpolicy_create_bloomE7Wrapper>)
                    ] UNSPEC_GOTPCREL)) [45  S8 A8])
        (nil)))
(insn 11 10 12 2 (set (reg/f:DI 0 ax [92])
        (plus:DI (reg:DI 0 ax [93])
            (const_int 16 [0x10]))) db/c.cc:503 214 {*leadi}
     (expr_list:REG_EQUIV (const:DI (plus:DI (symbol_ref/i:DI ("_ZTVZ33leveldb_filterpolicy_create_bloomE7Wrapper")  <var_decl 0x7fb537404870 _ZTVZ33leveldb_filterpolicy_create_bloomE7Wrapper>)
                (const_int 16 [0x10])))
        (nil)))
(insn 12 11 13 2 (set (mem/f:DI (reg/f:DI 3 bx [91]) [3 MEM[(struct Wrapper *)_3].D.31955.D.28950._vptr.FilterPolicy+0 S8 A64])
        (reg/f:DI 0 ax [92])) db/c.cc:503 89 {*movdi_internal}
     (nil))
(insn 13 12 14 2 (set (reg:SI 5 di)
        (reg/v:SI 6 bp [orig:90 bits_per_key ] [90])) db/c.cc:516 90 {*movsi_internal}
     (nil))
(call_insn 14 13 15 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZN7leveldb20NewBloomFilterPolicyEi") [flags 0x41]  <function_decl 0x7fb537663438 NewBloomFilterPolicy>) [0 NewBloomFilterPolicy S1 A8])
            (const_int 0 [0]))) db/c.cc:516 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb20NewBloomFilterPolicyEi") [flags 0x41]  <function_decl 0x7fb537663438 NewBloomFilterPolicy>)
        (nil))
    (expr_list:SI (use (reg:SI 5 di))
        (nil)))
(insn 15 14 16 2 (set (reg/f:DI 0 ax [orig:88 D.37411 ] [88])
        (reg:DI 0 ax)) db/c.cc:516 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (plus:DI (reg/f:DI 3 bx [91])
                (const_int 48 [0x30])) [3 MEM[(struct Wrapper *)_3].rep_+0 S8 A64])
        (nil)))
(insn 16 15 17 2 (set (mem/f:DI (plus:DI (reg/f:DI 3 bx [91])
                (const_int 48 [0x30])) [3 MEM[(struct Wrapper *)_3].rep_+0 S8 A64])
        (reg/f:DI 0 ax [orig:88 D.37411 ] [88])) db/c.cc:516 89 {*movdi_internal}
     (nil))
(insn 17 16 18 2 (set (mem/f:DI (plus:DI (reg/f:DI 3 bx [91])
                (const_int 8 [0x8])) [3 MEM[(struct Wrapper *)_3].D.31955.state_+0 S8 A64])
        (const_int 0 [0])) db/c.cc:517 89 {*movdi_internal}
     (nil))
(note 18 17 19 2 NOTE_INSN_DELETED)
(insn 19 18 28 2 (set (reg:DI 0 ax [96])
        (symbol_ref:DI ("_ZZ33leveldb_filterpolicy_create_bloomEN7Wrapper9DoNothingEPv") [flags 0x3]  <function_decl 0x7fb537401a20 DoNothing>)) db/c.cc:518 89 {*movdi_internal}
     (nil))
(insn 28 19 24 2 (set (mem/f:DI (plus:DI (reg/f:DI 3 bx [91])
                (const_int 16 [0x10])) [3 MEM[(struct Wrapper *)_3].D.31955.destructor_+0 S8 A64])
        (reg:DI 0 ax [96])) db/c.cc:518 89 {*movdi_internal}
     (nil))
(insn 24 28 25 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 3 bx [91])) db/c.cc:520 89 {*movdi_internal}
     (nil))
(insn 25 24 27 2 (use (reg/i:DI 0 ax)) db/c.cc:520 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 27 25 0 NOTE_INSN_DELETED)

;; Function leveldb_readoptions_t* leveldb_readoptions_create() (leveldb_readoptions_create, funcdef_no=1521, decl_uid=2352, cgraph_uid=631, symbol_order=634)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 5:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 9:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 10:  (0) m  (1) qn {*movqi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=2,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 17: point = 0
   Insn 16: point = 0
   Insn 11: point = 1
   Insn 10: point = 1
   Insn 9: point = 1
   Insn 7: point = 1
   Insn 6: point = 2
   Insn 5: point = 2
Compressing live ranges: from 2 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 7
changing reg in insn 16
changing reg in insn 11
changing reg in insn 10
changing reg in insn 9


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


leveldb_readoptions_t* leveldb_readoptions_create()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 5[di] 7[sp]
;;  ref usage 	r0={4d,7u} r1={2d} r2={2d} r4={2d} r5={3d,1u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 102{91d,11u,0e} in 8{7 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 5 di)
        (const_int 16 [0x10])) db/c.cc:523 89 {*movdi_internal}
     (nil))
(call_insn 6 5 7 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>) [0 operator new S1 A8])
            (const_int 0 [0]))) db/c.cc:523 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 7 6 9 2 (set (reg/f:DI 0 ax [89])
        (reg:DI 0 ax)) db/c.cc:523 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [89])
        (nil)))
(insn 9 7 10 2 (set (mem:QI (reg/f:DI 0 ax [89]) [17 MEM[(struct ReadOptions *)_3].verify_checksums+0 S1 A64])
        (const_int 0 [0])) ./include/leveldb/options.h:164 93 {*movqi_internal}
     (nil))
(insn 10 9 11 2 (set (mem:QI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 1 [0x1])) [17 MEM[(struct ReadOptions *)_3].fill_cache+0 S1 A8])
        (const_int 1 [0x1])) ./include/leveldb/options.h:164 93 {*movqi_internal}
     (nil))
(insn 11 10 16 2 (set (mem/f:DI (plus:DI (reg/f:DI 0 ax [89])
                (const_int 8 [0x8])) [3 MEM[(struct ReadOptions *)_3].snapshot+0 S8 A64])
        (const_int 0 [0])) ./include/leveldb/options.h:164 89 {*movdi_internal}
     (nil))
(insn 16 11 17 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [89])) db/c.cc:524 89 {*movdi_internal}
     (nil))
(insn 17 16 19 2 (use (reg/i:DI 0 ax)) db/c.cc:524 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 19 17 0 NOTE_INSN_DELETED)

;; Function void leveldb_readoptions_destroy(leveldb_readoptions_t*) (leveldb_readoptions_destroy, funcdef_no=1897, decl_uid=2354, cgraph_uid=632, symbol_order=635)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 7: point = 0
   Insn 6: point = 0
   Insn 2: point = 1
Compressing live ranges: from 2 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 6
deleting insn with uid = 2.
deleting insn with uid = 6.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_readoptions_destroy(leveldb_readoptions_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 5[di] 7[sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={2d} r5={2d,1u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 92{88d,4u,0e} in 1{0 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 7 2 NOTE_INSN_FUNCTION_BEG)
(call_insn/j 7 3 8 2 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) db/c.cc:552 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 8 7 11)
(note 11 8 0 NOTE_INSN_DELETED)

;; Function void leveldb_readoptions_set_verify_checksums(leveldb_readoptions_t*, unsigned char) (leveldb_readoptions_set_verify_checksums, funcdef_no=1526, decl_uid=2357, cgraph_uid=633, symbol_order=636)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =qm {*setcc_qi}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 10: point = 0
   Insn 8: point = 1
   Insn 3: point = 2
   Insn 2: point = 3
Compressing live ranges: from 4 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 10
changing reg in insn 3
deleting insn with uid = 2.
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_readoptions_set_verify_checksums(leveldb_readoptions_t*, unsigned char)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 4[si] 5[di] 17[flags]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r7={1d,2u} r17={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 22{17d,5u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 6 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 4 si [orig:90 v ] [90])
            (const_int 0 [0]))) db/c.cc:533 1 {*cmpqi_ccno_1}
     (nil))
(note 9 8 10 2 NOTE_INSN_DELETED)
(insn 10 9 13 2 (set (mem:QI (reg/v/f:DI 5 di [orig:88 opt ] [88]) [17 opt_4(D)->rep.verify_checksums+0 S1 A64])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) db/c.cc:533 607 {*setcc_qi}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 13 10 0 NOTE_INSN_DELETED)

;; Function void leveldb_readoptions_set_fill_cache(leveldb_readoptions_t*, unsigned char) (leveldb_readoptions_set_fill_cache, funcdef_no=1527, decl_uid=2360, cgraph_uid=634, symbol_order=637)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =qm {*setcc_qi}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 10: point = 0
   Insn 8: point = 1
   Insn 3: point = 2
   Insn 2: point = 3
Compressing live ranges: from 4 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 10
changing reg in insn 3
deleting insn with uid = 2.
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_readoptions_set_fill_cache(leveldb_readoptions_t*, unsigned char)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 4[si] 5[di] 17[flags]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r7={1d,2u} r17={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 22{17d,5u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 6 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 4 si [orig:90 v ] [90])
            (const_int 0 [0]))) db/c.cc:538 1 {*cmpqi_ccno_1}
     (nil))
(note 9 8 10 2 NOTE_INSN_DELETED)
(insn 10 9 13 2 (set (mem:QI (plus:DI (reg/v/f:DI 5 di [orig:88 opt ] [88])
                (const_int 1 [0x1])) [17 opt_4(D)->rep.fill_cache+0 S1 A8])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) db/c.cc:538 607 {*setcc_qi}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 13 10 0 NOTE_INSN_DELETED)

;; Function void leveldb_readoptions_set_snapshot(leveldb_readoptions_t*, const leveldb_snapshot_t*) (leveldb_readoptions_set_snapshot, funcdef_no=1528, decl_uid=2363, cgraph_uid=635, symbol_order=638)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 11:  (0) r  (1) rem {*movdi_internal}
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 5:  (0) r  (1) Z {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 14:  (0) m  (1) re {*movdi_internal}

********** Pseudo live ranges #1: **********

  BB 5
   Insn 14: point = 0
  BB 3
   Insn 21: point = 2
   Insn 11: point = 2
  BB 4
   Insn 5: point = 5
  BB 2
   Insn 9: point = 7
   Insn 8: point = 7
   Insn 3: point = 7
   Insn 2: point = 8
Compressing live ranges: from 9 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 5
changing reg in insn 11
changing reg in insn 14
changing reg in insn 2
changing reg in insn 14
changing reg in insn 3
changing reg in insn 11
changing reg in insn 8
deleting insn with uid = 2.
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 6 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 6 (    1)


void leveldb_readoptions_set_snapshot(leveldb_readoptions_t*, const leveldb_snapshot_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 4[si] 5[di] 17[flags]
;;  ref usage 	r0={3d,1u} r1={1d} r2={1d} r4={1d,2u} r5={1d,1u} r7={1d,5u} r17={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 29{19d,10u,0e} in 6{6 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 6 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 4 6 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 4 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/v/f:DI 4 si [orig:89 snap ] [89])
            (const_int 0 [0]))) db/c.cc:544 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 9 8 10 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 20)
            (pc))) db/c.cc:544 612 {*jcc_1}
     (int_list:REG_BR_PROB 1014 (nil))
 -> 20)
;;  succ:       3 [89.9%]  (FALLTHRU)
;;              4 [10.1%] 
;; lr  out 	 4 [si] 5 [di] 7 [sp]
;; live  out 	 4 [si] 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 8986, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [89.9%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 11 10 21 3 (set (reg/f:DI 0 ax [orig:87 D.37430 ] [87])
        (mem/f:DI (reg/v/f:DI 4 si [orig:89 snap ] [89]) [3 snap_2(D)->rep+0 S8 A64])) db/c.cc:544 89 {*movdi_internal}
     (nil))
(jump_insn 21 11 22 3 (set (pc)
        (label_ref 12)) 654 {jump}
     (nil)
 -> 12)
;;  succ:       5 [100.0%] 
;; lr  out 	 0 [ax] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 5 [di] 7 [sp]

(barrier 22 21 20)
;; basic block 4, loop depth 0, count 0, freq 1014, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [10.1%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(code_label 20 22 19 4 393 "" [1 uses])
(note 19 20 5 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 5 19 12 4 (set (reg/f:DI 0 ax [orig:87 D.37430 ] [87])
        (const_int 0 [0])) db/c.cc:544 89 {*movdi_internal}
     (nil))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 5 [di] 7 [sp]
;; live  out 	 0 [ax] 5 [di] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 4, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       4 [100.0%]  (FALLTHRU)
;;              3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 0 [ax] 5 [di] 7 [sp]
;; lr  use 	 0 [ax] 5 [di] 7 [sp]
;; lr  def 	
;; live  in  	 0 [ax] 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(code_label 12 5 13 5 392 "" [1 uses])
(note 13 12 14 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 14 13 23 5 (set (mem/f:DI (plus:DI (reg/v/f:DI 5 di [orig:88 opt ] [88])
                (const_int 8 [0x8])) [3 opt_5(D)->rep.snapshot+0 S8 A64])
        (reg/f:DI 0 ax [orig:87 D.37430 ] [87])) db/c.cc:544 89 {*movdi_internal}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 23 14 0 NOTE_INSN_DELETED)

;; Function leveldb_writeoptions_t* leveldb_writeoptions_create() (leveldb_writeoptions_create, funcdef_no=1529, decl_uid=2364, cgraph_uid=639, symbol_order=642)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 5:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 9:  (0) m  (1) qn {*movqi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 15: point = 0
   Insn 14: point = 0
   Insn 9: point = 1
   Insn 7: point = 1
   Insn 6: point = 2
   Insn 5: point = 2
Compressing live ranges: from 2 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 7
changing reg in insn 14
changing reg in insn 9


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


leveldb_writeoptions_t* leveldb_writeoptions_create()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 5[di] 7[sp]
;;  ref usage 	r0={4d,5u} r1={2d} r2={2d} r4={2d} r5={3d,1u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 100{91d,9u,0e} in 6{5 regular + 1 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 5 [di]
;; live  kill	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 5 di)
        (const_int 1 [0x1])) db/c.cc:548 89 {*movdi_internal}
     (nil))
(call_insn 6 5 7 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>) [0 operator new S1 A8])
            (const_int 0 [0]))) db/c.cc:548 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 7 6 9 2 (set (reg/f:DI 0 ax [89])
        (reg:DI 0 ax)) db/c.cc:548 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 0 ax [89])
        (nil)))
(insn 9 7 14 2 (set (mem:QI (reg/f:DI 0 ax [89]) [17 MEM[(struct WriteOptions *)_3].sync+0 S1 A8])
        (const_int 0 [0])) ./include/leveldb/options.h:189 93 {*movqi_internal}
     (nil))
(insn 14 9 15 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 0 ax [89])) db/c.cc:549 89 {*movdi_internal}
     (nil))
(insn 15 14 17 2 (use (reg/i:DI 0 ax)) db/c.cc:549 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 17 15 0 NOTE_INSN_DELETED)

;; Function void leveldb_writeoptions_destroy(leveldb_writeoptions_t*) (leveldb_writeoptions_destroy, funcdef_no=1533, decl_uid=2366, cgraph_uid=640, symbol_order=643)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 7: point = 0
   Insn 6: point = 0
   Insn 2: point = 1
Compressing live ranges: from 2 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 6
deleting insn with uid = 2.
deleting insn with uid = 6.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_writeoptions_destroy(leveldb_writeoptions_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 5[di] 7[sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={2d} r5={2d,1u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 92{88d,4u,0e} in 1{0 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 7 2 NOTE_INSN_FUNCTION_BEG)
(call_insn/j 7 3 8 2 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) db/c.cc:552 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 8 7 11)
(note 11 8 0 NOTE_INSN_DELETED)

;; Function void leveldb_writeoptions_set_sync(leveldb_writeoptions_t*, unsigned char) (leveldb_writeoptions_set_sync, funcdef_no=1534, decl_uid=2369, cgraph_uid=641, symbol_order=644)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 8:  (0) q {*cmpqi_ccno_1}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) =qm {*setcc_qi}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 10: point = 0
   Insn 8: point = 1
   Insn 3: point = 2
   Insn 2: point = 3
Compressing live ranges: from 4 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 10
changing reg in insn 3
deleting insn with uid = 2.
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_writeoptions_set_sync(leveldb_writeoptions_t*, unsigned char)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 4[si] 5[di] 17[flags]
;;  ref usage 	r0={1d} r1={1d} r2={1d} r4={1d,1u} r5={1d,1u} r7={1d,2u} r17={1d,1u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 22{17d,5u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 4 [si] 5 [di] 7 [sp]
;; lr  use 	 4 [si] 5 [di] 7 [sp]
;; lr  def 	 17 [flags]
;; live  in  	 4 [si] 5 [di] 7 [sp]
;; live  gen 	 17 [flags]
;; live  kill	
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 5 6 8 2 NOTE_INSN_FUNCTION_BEG)
(insn 8 5 9 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg:QI 4 si [orig:90 v ] [90])
            (const_int 0 [0]))) db/c.cc:557 1 {*cmpqi_ccno_1}
     (nil))
(note 9 8 10 2 NOTE_INSN_DELETED)
(insn 10 9 13 2 (set (mem:QI (reg/v/f:DI 5 di [orig:88 opt ] [88]) [17 opt_4(D)->rep.sync+0 S1 A8])
        (ne:QI (reg:CCZ 17 flags)
            (const_int 0 [0]))) db/c.cc:557 607 {*setcc_qi}
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(note 13 10 0 NOTE_INSN_DELETED)

;; Function leveldb_cache_t* leveldb_cache_create_lru(size_t) (leveldb_cache_create_lru, funcdef_no=1535, decl_uid=2371, cgraph_uid=642, symbol_order=645)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 6:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 11:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 13:  (0) m  (1) re {*movdi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 19: point = 0
   Insn 18: point = 0
   Insn 13: point = 1
   Insn 12: point = 2
   Insn 11: point = 3
   Insn 10: point = 3
   Insn 8: point = 4
   Insn 7: point = 5
   Insn 6: point = 5
   Insn 2: point = 5
Compressing live ranges: from 6 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=32, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-24, prev_offset=0)
changing reg in insn 12
changing reg in insn 13
changing reg in insn 2
changing reg in insn 10
changing reg in insn 8
changing reg in insn 18
changing reg in insn 13
changing reg in insn 12


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 7.
verify found no changes in insn with uid = 11.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


leveldb_cache_t* leveldb_cache_create_lru(size_t)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 5[di] 6[bp] 7[sp]
;;  ref usage 	r0={5d,5u} r1={3d} r2={3d} r3={1d,2u,1e} r4={3d} r5={5d,3u} r6={1d,1u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 182{166d,15u,1e} in 10{8 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 6 [bp] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di] 6 [bp]
;; live  kill	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v:DI 6 bp [orig:90 capacity ] [90])
        (reg:DI 5 di [ capacity ])) db/c.cc:560 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:DI 5 di)
        (const_int 8 [0x8])) db/c.cc:561 89 {*movdi_internal}
     (nil))
(call_insn 7 6 8 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>) [0 operator new S1 A8])
            (const_int 0 [0]))) db/c.cc:561 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 8 7 10 2 (set (reg/f:DI 3 bx [91])
        (reg:DI 0 ax)) db/c.cc:561 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 3 bx [91])
        (nil)))
(insn 10 8 11 2 (set (reg:DI 5 di)
        (reg/v:DI 6 bp [orig:90 capacity ] [90])) db/c.cc:562 89 {*movdi_internal}
     (nil))
(call_insn 11 10 12 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZN7leveldb11NewLRUCacheEm") [flags 0x41]  <function_decl 0x7fb5377c2a20 NewLRUCache>) [0 NewLRUCache S1 A8])
            (const_int 0 [0]))) db/c.cc:562 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb11NewLRUCacheEm") [flags 0x41]  <function_decl 0x7fb5377c2a20 NewLRUCache>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 12 11 13 2 (set (reg/f:DI 0 ax [orig:88 D.37446 ] [88])
        (reg:DI 0 ax)) db/c.cc:562 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 3 bx [91]) [3 c_3->rep+0 S8 A64])
        (nil)))
(insn 13 12 18 2 (set (mem/f:DI (reg/f:DI 3 bx [91]) [3 c_3->rep+0 S8 A64])
        (reg/f:DI 0 ax [orig:88 D.37446 ] [88])) db/c.cc:562 89 {*movdi_internal}
     (nil))
(insn 18 13 19 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 3 bx [91])) db/c.cc:564 89 {*movdi_internal}
     (nil))
(insn 19 18 21 2 (use (reg/i:DI 0 ax)) db/c.cc:564 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 21 19 0 NOTE_INSN_DELETED)

;; Function void leveldb_cache_destroy(leveldb_cache_t*) (leveldb_cache_destroy, funcdef_no=1536, decl_uid=2373, cgraph_uid=643, symbol_order=646)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 6:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 10:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 13:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 4
   Insn 17: point = 0
   Insn 16: point = 0
  BB 3
   Insn 13: point = 2
   Insn 12: point = 3
   Insn 10: point = 4
  BB 2
   Insn 8: point = 6
   Insn 7: point = 6
   Insn 6: point = 6
   Insn 2: point = 7
Compressing live ranges: from 8 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 6
changing reg in insn 12
changing reg in insn 10
changing reg in insn 7
changing reg in insn 2
changing reg in insn 16
changing reg in insn 6
changing reg in insn 10
changing reg in insn 13
deleting insn with uid = 12.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 13.
verify found no changes in insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 5 (    1)


void leveldb_cache_destroy(leveldb_cache_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={4d,1u} r1={3d} r2={3d} r3={1d,2u} r4={3d} r5={5d,5u} r7={1d,6u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={3d,1u} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 180{165d,15u,0e} in 8{6 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 3 [bx] 5 [di] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 3 [bx] 5 [di] 17 [flags]
;; live  kill	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v/f:DI 3 bx [orig:90 cache ] [90])
        (reg:DI 5 di [ cache ])) db/c.cc:566 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg/f:DI 5 di [orig:87 D.37449 ] [87])
        (mem/f:DI (reg/v/f:DI 3 bx [orig:90 cache ] [90]) [3 cache_3(D)->rep+0 S8 A64])) db/c.cc:567 89 {*movdi_internal}
     (nil))
(insn 7 6 8 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:87 D.37449 ] [87])
            (const_int 0 [0]))) db/c.cc:567 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 8 7 9 2 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 14)
            (pc))) db/c.cc:567 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 14)
;;  succ:       3 [78.3%]  (FALLTHRU)
;;              4 [21.6%] 
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 7835, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [78.3%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 9 8 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 10 9 11 3 (set (reg/f:DI 0 ax [orig:91 _4->_vptr.Cache ] [91])
        (mem/f:DI (reg/f:DI 5 di [orig:87 D.37449 ] [87]) [3 _4->_vptr.Cache+0 S8 A64])) db/c.cc:567 89 {*movdi_internal}
     (nil))
(note 11 10 13 3 NOTE_INSN_DELETED)
(call_insn 13 11 14 3 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:91 _4->_vptr.Cache ] [91])
                    (const_int 8 [0x8])) [3 MEM[(int (*__vtbl_ptr_type) () *)_5 + 8B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_6;(struct Cache)_4->1) S1 A8])
        (const_int 0 [0])) db/c.cc:567 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (expr_list:REG_CALL_DECL (nil)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       4 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 3, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [21.6%] 
;;              3 [100.0%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 14 13 15 4 401 "" [1 uses])
(note 15 14 16 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 16 15 17 4 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:90 cache ] [90])) db/c.cc:568 89 {*movdi_internal}
     (nil))
(call_insn/j 17 16 18 4 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) db/c.cc:568 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 18 17 27)
(note 27 18 0 NOTE_INSN_DELETED)

;; Function leveldb_env_t* leveldb_create_default_env() (leveldb_create_default_env, funcdef_no=1537, decl_uid=2374, cgraph_uid=644, symbol_order=647)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
          alt=2,overall=0,losers=0,rld_nregs=0
	 Choosing alt 2 in insn 5:  (0) r  (1) Z {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (1) rBwBz {*call_value}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (1) rBwBz {*call_value}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2: Bad operand -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=3,overall=609,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=4: Bad operand -- refuse
          alt=5,overall=0,losers=0,rld_nregs=0
	 Choosing alt 5 in insn 11:  (0) m  (1) re {*movdi_internal}
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=18,losers=2,rld_nregs=2
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=1,overall=9,losers=1,rld_nregs=1
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=2,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=18,losers=2 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=4,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=5,overall=15,losers=1 -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 12:  (0) m  (1) qn {*movqi_internal}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 18: point = 0
   Insn 17: point = 0
   Insn 12: point = 1
   Insn 11: point = 1
   Insn 10: point = 2
   Insn 9: point = 3
   Insn 7: point = 3
   Insn 6: point = 4
   Insn 5: point = 4
Compressing live ranges: from 4 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 10
changing reg in insn 11
changing reg in insn 7
changing reg in insn 17
changing reg in insn 12
changing reg in insn 11
changing reg in insn 10


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 6.
verify found no changes in insn with uid = 9.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


leveldb_env_t* leveldb_create_default_env()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 5[di] 7[sp]
;;  ref usage 	r0={5d,5u} r1={3d} r2={3d} r3={1d,3u,1e} r4={3d} r5={4d,1u} r7={1d,4u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={2d} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 178{164d,13u,1e} in 9{7 regular + 2 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 3 [bx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax] 3 [bx] 5 [di]
;; live  kill	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)
(insn 5 2 6 2 (set (reg:DI 5 di)
        (const_int 16 [0x10])) db/c.cc:572 89 {*movdi_internal}
     (nil))
(call_insn 6 5 7 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>) [0 operator new S1 A8])
            (const_int 0 [0]))) db/c.cc:572 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_Znwm") [flags 0x41]  <function_decl 0x7fb538d991b0 operator new>)
        (nil))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
(insn 7 6 9 2 (set (reg/f:DI 3 bx [90])
        (reg:DI 0 ax)) db/c.cc:572 89 {*movdi_internal}
     (expr_list:REG_NOALIAS (reg/f:DI 3 bx [90])
        (nil)))
(call_insn 9 7 10 2 (set (reg:DI 0 ax)
        (call (mem:QI (symbol_ref:DI ("_ZN7leveldb3Env7DefaultEv") [flags 0x41]  <function_decl 0x7fb5375c2e58 Default>) [0 Default S1 A8])
            (const_int 0 [0]))) db/c.cc:573 669 {*call_value}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZN7leveldb3Env7DefaultEv") [flags 0x41]  <function_decl 0x7fb5375c2e58 Default>)
        (nil))
    (nil))
(insn 10 9 11 2 (set (reg/f:DI 0 ax [orig:88 D.37456 ] [88])
        (reg:DI 0 ax)) db/c.cc:573 89 {*movdi_internal}
     (expr_list:REG_EQUIV (mem/f:DI (reg/f:DI 3 bx [90]) [3 result_3->rep+0 S8 A64])
        (nil)))
(insn 11 10 12 2 (set (mem/f:DI (reg/f:DI 3 bx [90]) [3 result_3->rep+0 S8 A64])
        (reg/f:DI 0 ax [orig:88 D.37456 ] [88])) db/c.cc:573 89 {*movdi_internal}
     (nil))
(insn 12 11 17 2 (set (mem:QI (plus:DI (reg/f:DI 3 bx [90])
                (const_int 8 [0x8])) [17 result_3->is_default+0 S1 A64])
        (const_int 1 [0x1])) db/c.cc:574 93 {*movqi_internal}
     (nil))
(insn 17 12 18 2 (set (reg/i:DI 0 ax)
        (reg/f:DI 3 bx [90])) db/c.cc:576 89 {*movdi_internal}
     (nil))
(insn 18 17 20 2 (use (reg/i:DI 0 ax)) db/c.cc:576 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 20 18 0 NOTE_INSN_DELETED)

;; Function void leveldb_env_destroy(leveldb_env_t*) (leveldb_env_destroy, funcdef_no=1538, decl_uid=2376, cgraph_uid=645, symbol_order=648)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
            Staticly defined alt reject+=6
          alt=1,overall=6,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 6:  (0) ?mq {*cmpqi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 9:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 10:  (0) r {*cmpdi_ccno_1}
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 13:  (0) r  (1) rem {*movdi_internal}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 16:  (0) rBwBz {*call}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 20:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 5
   Insn 20: point = 0
   Insn 19: point = 0
  BB 4
   Insn 16: point = 2
   Insn 15: point = 3
   Insn 13: point = 4
  BB 3
   Insn 11: point = 6
   Insn 10: point = 6
   Insn 9: point = 6
  BB 2
   Insn 7: point = 8
   Insn 6: point = 8
   Insn 2: point = 8
Compressing live ranges: from 9 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=16, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=-8, prev_offset=0)
changing reg in insn 9
changing reg in insn 15
changing reg in insn 13
changing reg in insn 10
changing reg in insn 2
changing reg in insn 19
changing reg in insn 9
changing reg in insn 6
changing reg in insn 13
changing reg in insn 16
deleting insn with uid = 15.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 16.
verify found no changes in insn with uid = 20.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 6 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 6 (    1)


void leveldb_env_destroy(leveldb_env_t*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 0[ax] 3[bx] 5[di] 7[sp] 17[flags]
;;  ref usage 	r0={4d,1u} r1={3d} r2={3d} r3={1d,3u} r4={3d} r5={5d,5u} r7={1d,7u} r8={2d} r9={2d} r10={2d} r11={2d} r12={2d} r13={2d} r14={2d} r15={2d} r17={4d,2u} r18={2d} r19={2d} r21={3d} r22={3d} r23={3d} r24={3d} r25={3d} r26={3d} r27={3d} r28={3d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={3d} r38={3d} r39={2d} r40={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} 
;;    total ref usage 184{166d,18u,0e} in 10{8 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 3, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 3 [bx] 17 [flags]
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	 3 [bx] 17 [flags]
;; live  kill	
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(insn 2 4 3 2 (set (reg/v/f:DI 3 bx [orig:91 env ] [91])
        (reg:DI 5 di [ env ])) db/c.cc:578 89 {*movdi_internal}
     (nil))
(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)
(insn 6 3 7 2 (set (reg:CCZ 17 flags)
        (compare:CCZ (mem:QI (plus:DI (reg/v/f:DI 3 bx [orig:91 env ] [91])
                    (const_int 8 [0x8])) [17 env_3(D)->is_default+0 S1 A64])
            (const_int 0 [0]))) db/c.cc:579 1 {*cmpqi_ccno_1}
     (nil))
(jump_insn 7 6 8 2 (set (pc)
        (if_then_else (ne (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref 17)
            (pc))) db/c.cc:579 612 {*jcc_1}
     (int_list:REG_BR_PROB 3900 (nil))
 -> 17)
;;  succ:       3 [61.0%]  (FALLTHRU)
;;              5 [39.0%] 
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 3, loop depth 0, count 0, freq 6100, maybe hot
;;  prev block 2, next block 4, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       2 [61.0%]  (FALLTHRU)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 5 [di] 17 [flags]
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 5 [di] 17 [flags]
;; live  kill	
(note 8 7 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 9 8 10 3 (set (reg/f:DI 5 di [orig:88 D.37460 ] [88])
        (mem/f:DI (reg/v/f:DI 3 bx [orig:91 env ] [91]) [3 env_3(D)->rep+0 S8 A64])) db/c.cc:579 89 {*movdi_internal}
     (nil))
(insn 10 9 11 3 (set (reg:CCZ 17 flags)
        (compare:CCZ (reg/f:DI 5 di [orig:88 D.37460 ] [88])
            (const_int 0 [0]))) db/c.cc:579 4 {*cmpdi_ccno_1}
     (nil))
(jump_insn 11 10 12 3 (set (pc)
        (if_then_else (eq (reg:CCZ 17 flags)
                (const_int 0 [0]))
            (label_ref:DI 17)
            (pc))) db/c.cc:579 612 {*jcc_1}
     (int_list:REG_BR_PROB 2165 (nil))
 -> 17)
;;  succ:       4 [78.3%]  (FALLTHRU)
;;              5 [21.6%] 
;; lr  out 	 3 [bx] 5 [di] 7 [sp]
;; live  out 	 3 [bx] 5 [di] 7 [sp]

;; basic block 4, loop depth 0, count 0, freq 4779, maybe hot
;;  prev block 3, next block 5, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [78.3%]  (FALLTHRU)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 5 [di] 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 13 12 14 4 (set (reg/f:DI 0 ax [orig:92 _5->_vptr.Env ] [92])
        (mem/f:DI (reg/f:DI 5 di [orig:88 D.37460 ] [88]) [3 _5->_vptr.Env+0 S8 A64])) db/c.cc:579 89 {*movdi_internal}
     (nil))
(note 14 13 16 4 NOTE_INSN_DELETED)
(call_insn 16 14 17 4 (call (mem:QI (mem/f:DI (plus:DI (reg/f:DI 0 ax [orig:92 _5->_vptr.Env ] [92])
                    (const_int 8 [0x8])) [3 MEM[(int (*__vtbl_ptr_type) () *)_6 + 8B]+0 S8 A64]) [0 *OBJ_TYPE_REF(_7;(struct Env)_5->1) S1 A8])
        (const_int 0 [0])) db/c.cc:579 660 {*call}
     (expr_list:REG_EH_REGION (const_int 0 [0])
        (expr_list:REG_CALL_DECL (nil)
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       5 [100.0%]  (FALLTHRU)
;; lr  out 	 3 [bx] 7 [sp]
;; live  out 	 3 [bx] 7 [sp]

;; basic block 5, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 4, next block 1, flags: (REACHABLE, HOT_PARTITION, RTL, MODIFIED)
;;  pred:       3 [21.6%] 
;;              4 [100.0%]  (FALLTHRU)
;;              2 [39.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(7){ }}
;; lr  in  	 3 [bx] 7 [sp]
;; lr  use 	 3 [bx] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 3 [bx] 7 [sp]
;; live  gen 	 5 [di]
;; live  kill	
(code_label 17 16 18 5 409 "" [2 uses])
(note 18 17 19 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 19 18 20 5 (set (reg:DI 5 di)
        (reg/v/f:DI 3 bx [orig:91 env ] [91])) db/c.cc:580 89 {*movdi_internal}
     (nil))
(call_insn/j 20 19 21 5 (call (mem:QI (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>) [0 operator delete S1 A8])
        (const_int 0 [0])) db/c.cc:580 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("_ZdlPv") [flags 0x41]  <function_decl 0x7fb538d99360 operator delete>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 21 20 30)
(note 30 21 0 NOTE_INSN_DELETED)

;; Function void leveldb_free(void*) (leveldb_free, funcdef_no=1539, decl_uid=2378, cgraph_uid=646, symbol_order=649)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 7:  (0) UBsBz {*sibcall}

********** Pseudo live ranges #1: **********

  BB 2
   Insn 7: point = 0
   Insn 6: point = 0
   Insn 2: point = 1
Compressing live ranges: from 2 to 0 - 0%
Ranges after the compression:
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
changing reg in insn 2
changing reg in insn 6
deleting insn with uid = 2.
deleting insn with uid = 6.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


void leveldb_free(void*)

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 7 [sp]
;;  regs ever live 	 5[di] 7[sp]
;;  ref usage 	r0={2d} r1={2d} r2={2d} r4={2d} r5={2d,1u} r7={1d,3u} r8={1d} r9={1d} r10={1d} r11={1d} r12={1d} r13={1d} r14={1d} r15={1d} r17={1d} r18={1d} r19={1d} r21={2d} r22={2d} r23={2d} r24={2d} r25={2d} r26={2d} r27={2d} r28={2d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={2d} r38={2d} r39={1d} r40={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} 
;;    total ref usage 92{88d,4u,0e} in 1{0 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 5 [di] 7 [sp]
;; lr  use 	 5 [di] 7 [sp]
;; lr  def 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;; live  in  	 5 [di] 7 [sp]
;; live  gen 	
;; live  kill	
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 3 4 7 2 NOTE_INSN_FUNCTION_BEG)
(call_insn/j 7 3 8 2 (call (mem:QI (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fb538d19ca8 free>) [0 __builtin_free S1 A8])
        (const_int 0 [0])) db/c.cc:584 662 {*sibcall}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("free") [flags 0x41]  <function_decl 0x7fb538d19ca8 free>)
        (expr_list:REG_EH_REGION (const_int 0 [0])
            (nil)))
    (expr_list:DI (use (reg:DI 5 di))
        (nil)))
;;  succ:       EXIT [100.0%]  (ABNORMAL,SIBCALL)
;; lr  out 	 7 [sp]
;; live  out 	 7 [sp]

(barrier 8 7 11)
(note 11 8 0 NOTE_INSN_DELETED)

;; Function int leveldb_major_version() (leveldb_major_version, funcdef_no=1540, decl_uid=2379, cgraph_uid=647, symbol_order=650)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}

********** Pseudo live ranges #1: **********

New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


int leveldb_major_version()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 21{17d,4u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 2 10 2 (set (reg/i:SI 0 ax)
        (const_int 1 [0x1])) db/c.cc:589 90 {*movsi_internal}
     (nil))
(insn 10 9 12 2 (use (reg/i:SI 0 ax)) db/c.cc:589 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 12 10 0 NOTE_INSN_DELETED)

;; Function int leveldb_minor_version() (leveldb_minor_version, funcdef_no=1541, decl_uid=2380, cgraph_uid=648, symbol_order=651)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 7
New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 9:  (0) =r  (1) g {*movsi_internal}

********** Pseudo live ranges #1: **********

New elimination table:
Can eliminate 16 to 7 (offset=8, prev_offset=0)
Can eliminate 16 to 6 (offset=8, prev_offset=0)
Can eliminate 20 to 7 (offset=0, prev_offset=0)
Can eliminate 20 to 6 (offset=0, prev_offset=0)


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)


int leveldb_minor_version()

Dataflow summary:
;;  invalidated by call 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 8 [st] 9 [st(1)] 10 [st(2)] 11 [st(3)] 12 [st(4)] 13 [st(5)] 14 [st(6)] 15 [st(7)] 17 [flags] 18 [fpsr] 19 [fpcr] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 29 [mm0] 30 [mm1] 31 [mm2] 32 [mm3] 33 [mm4] 34 [mm5] 35 [mm6] 36 [mm7] 37 [r8] 38 [r9] 39 [r10] 40 [r11] 45 [xmm8] 46 [xmm9] 47 [xmm10] 48 [xmm11] 49 [xmm12] 50 [xmm13] 51 [xmm14] 52 [xmm15] 53 [] 54 [] 55 [] 56 [] 57 [] 58 [] 59 [] 60 [] 61 [] 62 [] 63 [] 64 [] 65 [] 66 [] 67 [] 68 [] 69 [] 70 [] 71 [] 72 [] 73 [] 74 [] 75 [] 76 [] 77 [] 78 [] 79 [] 80 []
;;  hardware regs used 	 7 [sp]
;;  regular block artificial uses 	 7 [sp]
;;  eh block artificial uses 	 7 [sp] 16 [argp]
;;  entry block defs 	 0 [ax] 1 [dx] 2 [cx] 4 [si] 5 [di] 7 [sp] 21 [xmm0] 22 [xmm1] 23 [xmm2] 24 [xmm3] 25 [xmm4] 26 [xmm5] 27 [xmm6] 28 [xmm7] 37 [r8] 38 [r9]
;;  exit block uses 	 0 [ax] 7 [sp]
;;  regs ever live 	 0[ax]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r4={1d} r5={1d} r7={1d,2u} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d} r26={1d} r27={1d} r28={1d} r37={1d} r38={1d} 
;;    total ref usage 21{17d,4u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)
;; basic block 2, loop depth 0, count 0, freq 10000, maybe hot
;;  prev block 0, next block 1, flags: (REACHABLE, RTL, MODIFIED)
;;  pred:       ENTRY [100.0%]  (FALLTHRU)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(7){ }}
;; lr  in  	 7 [sp]
;; lr  use 	 7 [sp]
;; lr  def 	 0 [ax]
;; live  in  	 7 [sp]
;; live  gen 	 0 [ax]
;; live  kill	
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 3 9 2 NOTE_INSN_FUNCTION_BEG)
(insn 9 2 10 2 (set (reg/i:SI 0 ax)
        (const_int 18 [0x12])) db/c.cc:593 90 {*movsi_internal}
     (nil))
(insn 10 9 12 2 (use (reg/i:SI 0 ax)) db/c.cc:593 -1
     (nil))
;;  succ:       EXIT [100.0%]  (FALLTHRU)
;; lr  out 	 0 [ax] 7 [sp]
;; live  out 	 0 [ax] 7 [sp]

(note 12 10 0 NOTE_INSN_DELETED)
